[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "I’m a data enthusiast and machine learning practicioner leveraging large-scale simulations and Python-based data analysis to solve problems in astrophysics.\nI’m also adapting and growing my skillset to tackle problems a bit closer to home, and I envision this blog as a medium for communicating new independent projects, as well as some data-intensive work from my academic life.\nIf you have any thoughts or comments on my work, please don’t hesitate to contact me!"
  },
  {
    "objectID": "posts/CR_Turb/CR_Turb_Notebook.html",
    "href": "posts/CR_Turb/CR_Turb_Notebook.html",
    "title": "Cosmic Ray Impacts on Turbulence",
    "section": "",
    "text": "This notebook shows a subset of the Python code and analysis done in Bustard and Oh 2022, 2023, which aim to better understand the interplay between cosmic rays and their magnetized, turbulent environments."
  },
  {
    "objectID": "posts/CR_Turb/CR_Turb_Notebook.html#energy-growth-rates-time-series-analysis",
    "href": "posts/CR_Turb/CR_Turb_Notebook.html#energy-growth-rates-time-series-analysis",
    "title": "Cosmic Ray Impacts on Turbulence",
    "section": "Energy growth rates: Time-series analysis",
    "text": "Energy growth rates: Time-series analysis\nAt set time intervals, the simulation outputs integrated quantities such as kinetic energy, magnetic energy, and cosmic ray energy stored in a file called cr.hst. We’ll use one of these files and rolling averages to find the exponential growth rate of CR energy as a function of time. We can then compare that to the turbulent stirring rate (a constant that is set by the user)\n\n# Load in integrated quantities from Athena++ history data file\n\ndir = './files/'\n\ntime, mass, ke1, ke2, ke3, me1, me2, me3, ec = np.loadtxt(dir+'cr.hst',skiprows = 2, usecols = (0,2,6,7,8,9,10,11,12),unpack=True)\n\n\n# Alfven Mach number M_A = v/v_A\nalfvenMach = np.sqrt(2*(ke1 + ke2 + ke3)/(mass))/np.sqrt(2*(me1+me2+me3)/(mass))\n\nedenstocgs = 6.54e-11 # conversion of energy density in code units to physical units (CGS)\ncellVol1 = (2.0)**3.0\n\n# arrays to store velocity, sound speed, kinetic energy, magnetic energy, thermal energy, and CR energy\nvval = []\ncsval = []\nketot = []\nmetot = []\nthermaletot = []\nectot = []\n\nfor j in range(0,len(time),1):\n  keval = (ke1[j] + ke2[j] + ke3[j])*edenstocgs/cellVol1\n  ketot.append(keval)\n  meval = (me1[j] + me2[j] + me3[j])*edenstocgs/cellVol1\n  cs2 = (.11*1e8)**2.0 # hard-coded using input sound speed of 0.11 in code units\n  csval.append(np.sqrt(cs2))\n  ecval = ec[j]*edenstocgs/cellVol1\n  vval.append((np.sqrt(2*(ke1[j] + ke2[j] + ke3[j])/(mass[j])) * 1.e8))\n  metot.append(meval)\n  ectot.append(ecval)\n\nLet’s start by doing a rough calculation of the average cosmic ray energy growth rate. Under the right conditions, this can be very fast! In this case, conditions for fast cosmic ray growth are not optimal, but cosmic rays do soak up a large fraction of the input energy\n\n# Start by getting a preliminary estimate of the (exponential) CR energy growth rate\nprint(\"Number of time snapshots: \" + str(len(ectot)))\n\n# Change these to get slope between different start and end points\nstart = int(len(ectot)/4.)\nend = int(3.*len(ectot)/4.)\n\n# Note we take the log of ectot because we want the exponential growth rate, i.e. convert an exponential curve\n# to a linear curve and then find the slope\np0 = np.polyfit(time[start:end],np.log10(np.array(ectot[start:end])),1)\ngrowthTime_log = (1/(p0[0]*np.log(10)))\n\n\n# v_ph ~ c_s = 1e7 for CGM\nprint(\"L*v_ph = {}\".format(3.0856e21*1e7))\nprint(\"Simulation growth time (Myrs) = {}\".format(growthTime_log))\n\nNumber of time snapshots: 6986\nL*v_ph = 3.0856e+28\nSimulation growth time (Myrs) = 1198.4721011637334\n\n\n\n# Calculating CR pressure / gas pressure and time / eddy turnover time\nCRPresGasPres = np.array(ectot)*0.333/(1.67e-28*1e14)\ntimeeddy = np.array(time)*3.155e13/(0.667*3.0856e21/7.5e6)\n\n\nplt.semilogy(timeeddy,alfvenMach,linewidth=1)\nplt.xlabel(r'$t/ \\tau_{eddy}$',fontsize=18)\nplt.ylabel('M_A',fontsize=18)\nplt.legend()\nplt.tight_layout()\nplt.savefig(dir+'alfvenMach.pdf')\nplt.close()\n\nplt.semilogy(timeeddy,vval,linewidth=1)\nplt.xlabel(r'$t/ \\tau_{eddy}$',fontsize=18)\nplt.ylabel('Average Velocity (cm/s)',fontsize=18)\nplt.legend()\nplt.tight_layout()\nplt.savefig(dir+'Velocity.pdf')\nplt.close()\n\nplt.semilogy(timeeddy,CRPresGasPres,linewidth=2)\nplt.xlabel(r'$t/ \\tau_{eddy}$',fontsize=18)\nplt.ylabel(r'$P_{CR}/P_{g}$',fontsize=18)\n#plt.legend()\nplt.tight_layout()\nplt.savefig(dir+'CRPresGasPres.pdf')\nplt.close()\n\n#plt.semilogy(timeeddy,ketot,linewidth=1,label=\"Kinetic\")\nplt.semilogy(timeeddy,ectot,linewidth=1,label=\"Cosmic Ray\")\n#plt.semilogy(timeeddy,metot,linewidth=1,label=\"Magnetic\")\nplt.semilogy(timeeddy,np.array(metot) + np.array(ectot) + np.array(ketot),linewidth=1,label=\"Total\")\nplt.xlabel(r'$t/ \\tau_{eddy}$',fontsize=18)\nplt.ylabel('Energy Density',fontsize=18)\nplt.legend()\nplt.tight_layout()\nplt.show()\nplt.close()\n\nplt.semilogy(timeeddy,ketot,linewidth=1,label=\"Kinetic\")\nplt.semilogy(timeeddy,ectot,linewidth=1,label=\"Cosmic Ray\")\nplt.semilogy(timeeddy,metot,linewidth=1,label=\"Magnetic\")\nplt.semilogy(timeeddy,np.array(metot) + np.array(ectot) + np.array(ketot),linewidth=1,label=\"Total\")\nplt.xlabel(r'$t/ \\tau_{eddy}$',fontsize=18)\nplt.ylabel('Energy Density',fontsize=18)\nplt.legend()\nplt.tight_layout()\nplt.savefig(dir+'EnergyDensities.pdf')\nplt.show()\nplt.close()\n\nNo artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\nNo artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n\n\n\n\n\n\n\n\nBoth figures show time on the x-axis and the log of energies on the y-axis. The top figure shows that cosmic ray energy is a large fraction of the total energy quantified (cosmic ray + magnetic + kinetic), while the bottom figure shows that magnetic energy and kinetic energy are quite subdominant.\nNext, let’s quantify the energy growth rates of each component (cosmic rays, magnetic fields, kinetic motions) and compare them to the total energy input rate\n\n# Calculate rolling derivatives of quantities\ndef get_deriv(y,x,smooth = None):\n    \"\"\"Return derivative of `y` wrt to `x`\n     while keeping the length constant.\n      Keywords:\n     * hst           -- HST numpy array\n       * y          -- other y values or key to take the derivate\n       * x          -- key\n       * smooth        -- smooth over length in units of `x`\n     \"\"\"\n\n    dx = (x[1:] - x[:-1])\n    dydx = (y[1:] - y[:-1]) / dx\n    if smooth is not None:\n        if isinstance(smooth, int):\n            n = smooth\n        else:\n            n = np.round(smooth / np.median(dx))\n        dydx = np.convolve(dydx, np.ones(int(n)) / n, mode='same')\n\n    r = np.interp(x, 0.5 * (x[1:] + x[:-1]), dydx)\n    return r\n\n# Set smoothing length\nsmooth = 1000\n\n\ntotE_codeunits = (np.array(metot) + np.array(ectot) + np.array(ketot))/edenstocgs\n\n# rho*v^3/2L is a useful quantity to know -- in hydrodynamic turbulence, this is equal to\n# the input driving energy, and deviations from this relationship tell us the impact of \n# magnetic fields and cosmic rays\nrhov3L = .03066*((np.array(vval)/1e8)**3.0)/(2.0*0.667)\n\nplt.plot(time,rhov3L,'k-.',label=r\"$\\rho v^{3} / 2L$\")\nplt.axhline(y=3e-5/cellVol1, color='r', linestyle='-',label=\"Driving dE/dt\")\nplt.semilogy(time,get_deriv(totE_codeunits,time,smooth=smooth),linewidth=1,label=\"Total dE/dt\")\nplt.semilogy(time,get_deriv(np.array(ectot)/edenstocgs,time,smooth=smooth),linewidth=1,label=r\"dE$_{CR}$/dt\")\nplt.semilogy(time,get_deriv(np.array(ketot)/edenstocgs,time,smooth=smooth),linewidth=1,label=r\"dE$_{k}$/dt\")\nplt.semilogy(time,get_deriv(np.array(metot)/edenstocgs,time,smooth=smooth),linewidth=1,label=r\"dE$_{B}$/dt\")\nplt.ylim(1e-9,1e-5)\nplt.xlabel(r't',fontsize=18)\nplt.ylabel('dE/dt',fontsize=18)\nplt.title(r\"$P_{CR}/P_{g} \\sim 1$\",fontsize=22)\nplt.legend()\nplt.tight_layout()\nplt.savefig(dir+'dEdt_codeunits_log.pdf')\nplt.show()\nplt.close()\n\nplt.plot(time,rhov3L,'k-.',label=r\"$\\rho v^{3} / 2L$\")\nplt.axhline(y=3e-5/cellVol1, color='r', linestyle='-',label=\"Driving dE/dt\")\nplt.plot(time,get_deriv(totE_codeunits,time,smooth=smooth),linewidth=1,label=\"Total dE/dt\")\nplt.plot(time,get_deriv(np.array(ectot)/edenstocgs,time,smooth=smooth),linewidth=1,label=r\"dE$_{CR}$/dt\")\nplt.plot(time,get_deriv(np.array(ketot)/edenstocgs,time,smooth=smooth),linewidth=1,label=r\"dE$_{k}$/dt\")\nplt.plot(time,get_deriv(np.array(metot)/edenstocgs,time,smooth=smooth),linewidth=1,label=r\"dE$_{B}$/dt\")\nplt.ylim(1e-8,1e-5)\nplt.xlabel(r't',fontsize=18)\nplt.ylabel('dE/dt',fontsize=18)\nplt.title(r\"$P_{CR}/P_{g} \\sim 1$\",fontsize=22)\nplt.legend()\nplt.tight_layout()\nplt.savefig(dir+'dEdt_codeunits_nolog.pdf')\n#plt.show()\nplt.close()\n\n\n\n\nYou’ll notice that neither the total dE/dt nor rhov^3/2L add up to the horizontal red line (the constant energy input rate)! This is because we are only quantifying the ups and downs of magnetic energy, cosmic ray energy, and kinetic energy, NOT including any energy that is lost from the system due to cosmic ray energy loss – because the gas is isothermal, this energy is completely lost from the simulation instead of being put back into the system in the form of heat.\nLet’s quickly quantify the average energy gain rates at late times (when they have more-or-less stabilized) before we additionally quantify the amount of energy lost from the system due to cosmic ray “interception”.\n\n# Calculate fractions of input energy that go into CRs, etc.\n\neps = (3e-5/cellVol1) # energy input rate in code units\n\n# dEc/dt in code units\necderiv = get_deriv(np.array(ectot)/edenstocgs,time,smooth=smooth)\n\n# dEtot/dt in code units\ntotederiv = get_deriv(np.array(totE_codeunits),time,smooth=smooth)\nprint(r\"f_{CR} =  \" + str(np.mean(ecderiv[int(3*len(ecderiv)/4):len(ecderiv)-1])/eps))\nprint(r\"f_{E} =  \" + str(np.mean(rhov3L[int(3*len(ecderiv)/4):len(ecderiv)-1])/eps))\nprint(r\"f_{tot} = \" + str(np.mean(totederiv[int(3*len(totederiv)/4):len(totederiv)-1])/eps))\n\nf_{CR} =  0.2374729535746033\nf_{E} =  0.13176189294429297\nf_{tot} = 0.24147444502707388\n\n\nMost notably, note f_E, which is the ratio of rho v^3/2L to epsilon, the energy input rate. In hydrodynamic turbulence, this is equal to 1, but here, in the presence of cosmic rays, it only reaches 0.13, a massive decrease!"
  },
  {
    "objectID": "posts/CR_Turb/CR_Turb_Notebook.html#quantifying-energy-partitions",
    "href": "posts/CR_Turb/CR_Turb_Notebook.html#quantifying-energy-partitions",
    "title": "Cosmic Ray Impacts on Turbulence",
    "section": "Quantifying energy partitions",
    "text": "Quantifying energy partitions\nNow, we’ll plot the outcome of energy input into many simulations, particularly taking into account the energy gain by the cosmic rays, the rate of energy lost by the cosmic rays, AND the remaining rate of energy dissipation at the grid scale (the traditional energy outcome when cosmic rays aren’t present). We’ll see that cosmic rays change things quite dramatically from what happens in hydrodynamic turbulence, where energy dissipation is close to 100% of the energy budget…\nSeparate scripts were used to calculate these energy gain/loss rates, and average values were tabulated in turbulent_energy_partitions.csv\n\n# Import data from CSV file\nimport pandas as pd\n\ndf = pd.read_csv('files/turbulent_energy_partitions.csv')\n\n\n# this data is in wide form, but it's easier to work with in long form\ndf = df.to_numpy()\ndf = df.flatten('F')\n\n# This is kind of gross, but it works for now to help label the chart correctly\ndfall = pd.DataFrame(dict(\n    beta = [r'$\\beta \\sim 1$',r'$\\beta \\sim 1$',r'$\\beta \\sim 1$',r'$\\beta \\sim 1$',r'$\\beta \\sim 1$',r'$\\beta \\sim 1$',r'$\\beta \\sim 1$',r'$\\beta \\sim 1$',r'$\\beta \\sim 1$',r'$\\beta \\sim 1$',r'$\\beta \\sim 1$',r'$\\beta \\sim 1$',r'$\\beta \\sim 1$',r'$\\beta \\sim 1$',r'$\\beta \\sim 1$',r'$\\beta \\sim 10$',\n    r'$\\beta \\sim 10$',r'$\\beta \\sim 10$',r'$\\beta \\sim 10$',r'$\\beta \\sim 10$',r'$\\beta \\sim 10$',r'$\\beta \\sim 10$',r'$\\beta \\sim 10$',r'$\\beta \\sim 10$',r'$\\beta \\sim 10$',r'$\\beta \\sim 10$',r'$\\beta \\sim 10$',r'$\\beta \\sim 10$',r'$\\beta \\sim 10$',r'$\\beta \\sim 10$',\n    r'$\\beta \\sim 100$',r'$\\beta \\sim 100$',r'$\\beta \\sim 100$',r'$\\beta \\sim 100$',r'$\\beta \\sim 100$',r'$\\beta \\sim 100$',r'$\\beta \\sim 100$',r'$\\beta \\sim 100$',r'$\\beta \\sim 100$',r'$\\beta \\sim 100$',r'$\\beta \\sim 100$',r'$\\beta \\sim 100$',r'$\\beta \\sim 100$',r'$\\beta \\sim 100$',r'$\\beta \\sim 100$'],\n    labels = [\"Diffusion Only\",\"Diffusion Only\",\"Diffusion Only\",\"Streaming Only\",\"Streaming Only\",\"Streaming Only\",\"Diff + Stream\",\"Diff + Stream\",\"Diff + Stream\",\"Adiab. Stream Only\",\"Adiab. Stream Only\",\"Adiab. Stream Only\",\"Adiab. Diff + Stream\",\"Adiab. Diff + Stream\",\"Adiab. Diff + Stream\"] * 3,\n    flabel = [r'$f_{\\rm CR} \\text{, CR Energization}$', r'$f_{\\rm CR, heating} \\text{, Streaming Energy Loss}$', r'$f_{\\rm th} - f_{\\rm CR, heating} \\text{, Grid-Scale Heating}$'] * 15,\n    f = df))\n\n#Take a look at the dataframe\nprint(dfall.head(16))\n\n\n##########################################################################3\n# Now comes the fun part of plotting this as a stacked, grouped bar chart. After trying\n# some methods in regular matplotlib, seaborn, etc., plotly emerged as the best option\n\n# Without this ridiculous work-around, every PDF file I save has a box with \"Loading MathJax\" written in the lower left corner. \n# Might be a problem with the Kaleido package used to write plotly images to files\n# For now, I'll omit this and let the LaTeX stuff be rendered incorrectly\n\n#figure=\"some_figure.pdf\"\n#fig=px.scatter(x=[0, 1, 2, 3, 4], y=[0, 1, 4, 9, 16])\n#fig.write_image(figure, format=\"pdf\")\n\n#time.sleep(2) # this delay gives some time for MathJax to load before the next figure (the real figure) is plotted and saved\n\nfig = go.Figure()\n\n\n# Note that all text that includes LaTeX anywhere near it has to be inside $ $\nfig.update_layout(\n    template=\"simple_white\",\n    xaxis=dict(ticklen=0),\n    yaxis=dict(title_text=r\"$\\dot{E}/\\epsilon$\",range=(0,1.1)),\n    font=dict(size=12),\n    barmode=\"stack\",\n    legend=dict(\n        font=dict(size=12),\n        x=0.55,\n        y=1.4,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n    )\n)\n\ncolors = [\"blue\", \"red\",\"orange\"]\n\n# Add traces for each bar. Grouped by $\\beta \\sim ...$, colored by f_{CR} or f_{CR, heating}\nfor r, c in zip(dfall.flabel.unique(), colors):\n    plot_df = dfall[dfall.flabel == r]\n    fig.add_trace(\n        go.Bar(x=[plot_df.beta, plot_df.labels], y=plot_df.f, name=r, marker_color=c,opacity=0.7),\n    )\nfig.update_xaxes(\n        tickangle = 90,\n        tickson = \"boundaries\",\n        ticks=\"inside\",\n        ticklen=0, # just get rid of the ticks\n        dividerwidth=0,\n        dividercolor='black',\n        title_text = r\"\", # just get rid of the title\n        title_font = {\"size\": 10},\n        title_standoff = 20)\n\n# To write to PDF\n#fig.write_image(\"barchart_plotly.pdf\",engine=\"kaleido\")\n#fig.show() #-- Since the LateX labels might not be rendered correctly\n            #  depending on the platform this is being run on (see all the funny workarounds above),\n            # I've commented this part out and just added the figure from our paper in the next cell\n\n               beta                labels  \\\n0    $\\beta \\sim 1$        Diffusion Only   \n1    $\\beta \\sim 1$        Diffusion Only   \n2    $\\beta \\sim 1$        Diffusion Only   \n3    $\\beta \\sim 1$        Streaming Only   \n4    $\\beta \\sim 1$        Streaming Only   \n5    $\\beta \\sim 1$        Streaming Only   \n6    $\\beta \\sim 1$         Diff + Stream   \n7    $\\beta \\sim 1$         Diff + Stream   \n8    $\\beta \\sim 1$         Diff + Stream   \n9    $\\beta \\sim 1$    Adiab. Stream Only   \n10   $\\beta \\sim 1$    Adiab. Stream Only   \n11   $\\beta \\sim 1$    Adiab. Stream Only   \n12   $\\beta \\sim 1$  Adiab. Diff + Stream   \n13   $\\beta \\sim 1$  Adiab. Diff + Stream   \n14   $\\beta \\sim 1$  Adiab. Diff + Stream   \n15  $\\beta \\sim 10$        Diffusion Only   \n\n                                               flabel       f  \n0               $f_{\\rm CR} \\text{, CR Energization}$  0.8600  \n1   $f_{\\rm CR, heating} \\text{, Streaming Energy ...  0.0000  \n2   $f_{\\rm th} - f_{\\rm CR, heating} \\text{, Grid...  0.0000  \n3               $f_{\\rm CR} \\text{, CR Energization}$  0.0300  \n4   $f_{\\rm CR, heating} \\text{, Streaming Energy ...  0.3860  \n5   $f_{\\rm th} - f_{\\rm CR, heating} \\text{, Grid...  0.0000  \n6               $f_{\\rm CR} \\text{, CR Energization}$  0.0300  \n7   $f_{\\rm CR, heating} \\text{, Streaming Energy ...  0.3800  \n8   $f_{\\rm th} - f_{\\rm CR, heating} \\text{, Grid...  0.0000  \n9               $f_{\\rm CR} \\text{, CR Energization}$  0.0160  \n10  $f_{\\rm CR, heating} \\text{, Streaming Energy ...  0.4560  \n11  $f_{\\rm th} - f_{\\rm CR, heating} \\text{, Grid...  0.5109  \n12              $f_{\\rm CR} \\text{, CR Energization}$  0.0170  \n13  $f_{\\rm CR, heating} \\text{, Streaming Energy ...  0.4520  \n14  $f_{\\rm th} - f_{\\rm CR, heating} \\text{, Grid...  0.4880  \n15              $f_{\\rm CR} \\text{, CR Energization}$  0.8700  \n\n\n\n                                                \n\n\nThe above figure might not render LaTeX correctly; below, I load in the full figure (and caption) from our paper.\n\nimage_path = \"figures/BustardOh2023_fig2.png\"\nimage = Image.open(image_path)\nplt.imshow(image)\nplt.axis('off')\n\n(-0.5, 1951.5, 1499.5, -0.5)\n\n\n\n\n\nWhat we see is that “grid scale heating”, i.e. the traditional outcome of energy, is only a very small portion of the energy budget. In fact, for high \\(\\beta\\) values, it comprises only a few percent; instead of energy being dissipated at the grid scale, where it heats the background gas, heating actually comes from the cosmic rays at very different scales. In some cases, namely when cosmic ray transport is diffusion only, that energy instead goes into the cosmic ray population.\nIn either case, cosmic rays are intercepting the turbulent cascade and affecting the scale and amount of heating that the gas receives."
  },
  {
    "objectID": "posts/CR_Turb/CR_Turb_Notebook.html#calculating-turbulence-energy-spectra",
    "href": "posts/CR_Turb/CR_Turb_Notebook.html#calculating-turbulence-energy-spectra",
    "title": "Cosmic Ray Impacts on Turbulence",
    "section": "Calculating turbulence energy spectra",
    "text": "Calculating turbulence energy spectra\nWith such large portions of the turbulent driving energy going either towards CR energization or CR heating rather than grid-scale heating, it’s likely that turbulent properties, such as the amount of power in velocity fluctuations on each scale, will change significantly. This is indeed the case.\nTo calculate the amount of power on each scale, we take the Fourier transform using numpy as follows. First, we define a helper function that will take the Fourier transform of \\(\\rho^{1/2} v\\) and return the power, i.e. in units of \\(\\rho v^{2}\\), what we need for kinetic energy.\n\n# Full version that takes in multiple fields (irho, iu) and additional input nindex_rho\ndef fft_comp_withrho(ds, irho, iu, nindex_rho, level, low, delta ):\n\n    # FFT operates on uniformly gridded data.  We'll use the yt\n    # covering grid for this in general, which allows this script to run on \n    # simulation grids with non-uniform resolution. In this specific application,\n    # our grid is already uniform so this next line is overkill.\n    cube = ds.covering_grid(level, left_edge=low,\n                            dims=delta,\n                            fields=[irho, iu])\n\n    rho = cube[irho].d\n    u = cube[iu].d\n\n    nx, ny, nz = rho.shape\n\n    # Take FFT of rho^nindex_rho x u -- for kinetic energy, nindex_rho should = 1/2\n    ru = np.fft.fftn(rho**nindex_rho * u)[0:nx//2+1,0:ny//2+1,0:nz//2+1]\n    ru = 8.0*ru/(nx*ny*nz)\n\n    return np.abs(ru)**2  # e.g. gives rho v^2 for kinetic energy\n\nThen we create a function that uses the fft_comp_withrho function to calculate the kinetic energy spectrum\n\ndef create_KE_spectra(ds):\n    max_level = ds.index.max_level\n\n    low = ds.domain_left_edge\n    dims = ds.domain_dimensions*int(1.0)\n    nx, ny, nz = dims\n    \n    nindex_rho = 1./2.\n\n    # Array to store the 3D Fourier transformed kinetic energy\n    Kk = np.zeros( (nx//2+1, ny//2+1, nz//2+1))\n\n    # Loop over each spatial direction and add Fourier power of (rho^1/2 v)\n    for vel in [(\"gas\", \"velocity_x\"), (\"gas\", \"velocity_y\"),\n                (\"gas\", \"velocity_z\")]:\n   \n        Kk += 0.5*fft_comp_withrho(ds, (\"gas\", \"density\"), vel,\n                           nindex_rho, max_level, low, dims)\n\n    # wavenumbers\n    L = (ds.domain_right_edge - ds.domain_left_edge).d\n    print(L)\n    print(np.fft.rfftfreq(nx))\n    kx = np.fft.rfftfreq(nx)*nx/L[0]\n    ky = np.fft.rfftfreq(ny)*ny/L[1]\n    kz = np.fft.rfftfreq(nz)*nz/L[2]\n\n    # physical limits to the wavenumbers\n    kmin = np.min(1.0/L)\n    kmax = np.min(0.5*dims/L)\n\n    kbins = np.arange(kmin, kmax, kmin)\n    N = len(kbins)\n\n    # bin the Fourier KE into radial kbins\n    kx3d, ky3d, kz3d = np.meshgrid(kx, ky, kz, indexing=\"ij\")\n    k = np.sqrt(kx3d**2 + ky3d**2 + kz3d**2)\n\n    whichbin = np.digitize(k.flat, kbins)\n\n    ncount = np.bincount(whichbin)\n\n    E_spectrum = np.zeros(len(ncount)-1)\n\n    \n    for n in range(0,len(ncount)-1):\n        E_spectrum[n] = np.sum(Kk.flat[whichbin==n])\n    \n    k = kbins[0:N]\n    E_spectrum = E_spectrum[0:N]\n\n    \n    # It's sometimes useful to know the scale with maximum power\n    index = np.argmax(E_spectrum)\n    kmax = k[index]\n    print(\"Wavelength with highest energy density (in kpc): \")\n    print(1.0/(kmax))\n    Emax = E_spectrum[index]\n    print(\"Emax: \")\n    print(Emax)\n\n\n    return k, E_spectrum\n\nAnd using the above code snippets on a series of data cubes (simulation volumes), we can obtain the kinetic energy as a function of scale and see how it varies with CR transport, CR content, etc. Instead of loading in many very large data cubes, I’ve loaded in the figure from our paper below.\n\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimage_path = \"figures/BustardOh2023_fig4.png\"\nimage = Image.open(image_path)\nplt.imshow(image)\nplt.axis('off')\n\n(-0.5, 1949.5, 1291.5, -0.5)\n\n\n\n\n\nThe above figure from Bustard and Oh 2023 shows kinetic energy spectra for two different turbulent Mach numbers (\\(\\mathcal{M} \\sim 0.15\\) and \\(\\mathcal{M} \\sim 0.5\\)) and different ratios of cosmic ray pressure \\(P_{\\rm CR}\\) to gas pressure \\(P_{\\rm g}\\). Black and magenta curves are for the no-CR (MHD) cases. As \\(P_{\\rm CR}/P_{\\rm g}\\) increases, cosmic rays damp high-k fluctuations more and more. The yellow curve, which we think has parameters quite appropriate for the circumgalactic medium of Milky Way-mass galaxies, shows the most dramatic change, suggesting that turbulence may look very different in the diffuse surroundings of galaxies compared to their interiors."
  },
  {
    "objectID": "posts/CR_Turb/CR_Turb_Notebook.html#separating-compressive-and-solenoidal-motions-hodge-helmholtz-decomposition",
    "href": "posts/CR_Turb/CR_Turb_Notebook.html#separating-compressive-and-solenoidal-motions-hodge-helmholtz-decomposition",
    "title": "Cosmic Ray Impacts on Turbulence",
    "section": "Separating compressive and solenoidal motions – Hodge-Helmholtz Decomposition",
    "text": "Separating compressive and solenoidal motions – Hodge-Helmholtz Decomposition\nHow cosmic rays impact turbulence goes beyond spectral changes. Cosmic rays also appear to impact the mixture of solenoidal and compressive motions, which in turn affects the shape of turbulent eddies at different scales (e.g. whether eddies are elongated along the magnetic field or isotropic with respect to it).\n\n# Hodge-Helmholtz decomposition of 3D velocity field into compressive and solenoidal components\n# \n# Outline:\n#   1. v(r) --&gt; v(k) by taking a 3D FFT of velocity field v(r)\n#   2. Find solenoidal component (k \\cdot vsol(k) = 0) as:\n#       For each i in 1 to 3:\n#           visol(k) = sum(delta_ij - kikj/k^2)vj(k) for j = 1 to 3\n#\n#   3. Find compressive component as vicomp(k) = vi(k) - visol(k)\n#   4. Produce a power spectrum of each component, compare integrated power, etc.\n#   5. (Optionally) Project back into physical space via inverse FFT\n\n\nimport yt\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom yt.units.yt_array import YTQuantity\nfrom yt.fields.api import ValidateParameter\n\ndef decompose(ds):\n    # Calls FFT to do step 1\n    # Does steps 2-4 for an individual snapshot and returns\n    #   Vector of wavenumbers, total velocity power spectrum, solenoidal power spectrum, \n    #   compressive power spectrum\n   \n\n    # Step 1 ..........................................................................\n\n    # a FFT operates on uniformly gridded data.  We'll use the yt\n    # covering grid for this.\n    max_level = ds.index.max_level\n\n    low = ds.domain_left_edge\n    dims = ds.domain_dimensions*int(1.0)\n    nx, ny, nz = dims\n\n    \n    # FFT of v_x, v_y, v_z\n    vx, v_k_x = fft_comp(ds, (\"gas\",\"velocity_x\"), max_level, low, dims)\n    vy, v_k_y = fft_comp(ds, (\"gas\",\"velocity_y\"), max_level, low, dims)\n    vz, v_k_z = fft_comp(ds, (\"gas\",\"velocity_z\"), max_level, low, dims)\n \n\n    print(\"Shapes of v_k componennts: \")\n    print(v_k_x.shape)   \n    print(v_k_y.shape)   \n    print(v_k_z.shape)\n   \n    # wavenumbers\n    #kx = np.fft.rfftfreq(nx).reshape(nx,1,1)\n    #ky = np.fft.rfftfreq(ny).reshape(ny,1,1)\n    #kz = np.fft.rfftfreq(nz)\n    kx = np.fft.fftfreq(nx)\n    ky = np.fft.fftfreq(ny)\n    kz = np.fft.fftfreq(nz)\n\n    # bin the Fourier KE into radial kbins\n    kx3d, ky3d, kz3d = np.meshgrid(kx, ky, kz, indexing=\"ij\")\n    k2 = kx3d**2 + ky3d**2 + kz3d**2\n    k2[0,0,0] = 1. # get rid of infinite scale\n   \n\n    # new\n    div_Vf_k = (v_k_x * kx3d + v_k_y * ky3d + v_k_z * kz3d)\n    v_comp_overk = div_Vf_k / k2\n    \n    # Compressive components\n    v_comp_x = np.fft.ifftn(v_comp_overk * kx3d)\n    v_comp_y = np.fft.ifftn(v_comp_overk * ky3d)\n    v_comp_z = np.fft.ifftn(v_comp_overk * kz3d)\n    \n    # Solenoidal components\n    v_sol_x = np.fft.ifftn(v_k_x - (v_comp_overk * kx3d))\n    v_sol_y = np.fft.ifftn(v_k_y - (v_comp_overk * ky3d))\n    v_sol_z = np.fft.ifftn(v_k_z - (v_comp_overk * kz3d))\n\n    return vx, vy, vz, v_comp_x, v_comp_y, v_comp_z, v_sol_x, v_sol_y, v_sol_z\n\n# Calculates the Fourier transform of the velocity\ndef fft_comp(ds, iu, level, low, delta ):\n\n    cube = ds.covering_grid(level, left_edge=low,\n                            dims=delta,\n                            fields=[iu])\n\n    u = cube[iu].d\n\n    # the first half of the axes -- that's what we keep.  Our\n    # normalization has an '8' to account for this clipping to one\n    # octant.\n\n    ru = np.fft.fftn(u) # computes 3D FFT over all axes\n    return u, ru # velocity, fourier component of velocity  \n\n\ndef create_spectra(ds,v_sol_x, v_sol_y, v_sol_z, v_comp_x, v_comp_y, v_comp_z):\n\n    # Only relevant if we have non-uniform resolution\n    max_level = ds.index.max_level\n\n    low = ds.domain_left_edge\n\n    # Calculate dimensions of simulation domain in each direction\n    dims = ds.domain_dimensions*int(1.0)\n    nx, ny, nz = dims\n\n    # Arrays to hold the Fourier power total, in solenoidal motions, \n    # and in compressive motions\n    Kk = np.zeros( (nx//2+1, ny//2+1, nz//2+1))\n    Kk_sol = np.zeros( (nx//2+1, ny//2+1, nz//2+1))\n    Kk_comp = np.zeros( (nx//2+1, ny//2+1, nz//2+1))\n    \n    # Loop over velocities in x, y, z directions and calculate Fourier power\n    for vel in [(\"gas\",\"velocity_x\"), (\"gas\",\"velocity_y\"), (\"gas\",\"velocity_z\")]:\n        Kk += fft_comp_power(ds, vel, max_level, low, dims)\n    \n    for vel in [v_sol_x, v_sol_y, v_sol_z]:\n        ru = np.fft.fftn(vel)[0:nx//2+1,0:ny//2+1,0:nz//2+1]\n        ru = 8.0*ru/(nx*ny*nz)\n        Kk_sol += np.abs(ru)**2.0\n    \n    for vel in [v_comp_x, v_comp_y, v_comp_z]:\n        ru = np.fft.fftn(vel)[0:nx//2+1,0:ny//2+1,0:nz//2+1]\n        ru = 8.0*ru/(nx*ny*nz)\n        Kk_comp += np.abs(ru)**2.0\n\n\n    # wavenumbers\n    L = (ds.domain_right_edge - ds.domain_left_edge).d\n\n    kx = np.fft.rfftfreq(nx)*nx/L[0]\n    ky = np.fft.rfftfreq(ny)*ny/L[1]\n    kz = np.fft.rfftfreq(nz)*nz/L[2]\n\n    # physical limits to the wavenumbers\n    kmin = np.min(1.0/L)\n    kmax = np.min(0.5*dims/L)\n\n    kbins = np.arange(kmin, kmax, kmin)\n    N = len(kbins)\n\n    # bin the Fourier KE into radial kbins\n    kx3d, ky3d, kz3d = np.meshgrid(kx, ky, kz, indexing=\"ij\")\n    k = np.sqrt(kx3d**2 + ky3d**2 + kz3d**2)\n\n    whichbin = np.digitize(k.flat, kbins)\n    ncount = np.bincount(whichbin)\n    \n    E_spectrum = np.zeros(len(ncount)-1)\n    E_spectrum_sol = np.zeros(len(ncount)-1)\n    E_spectrum_comp = np.zeros(len(ncount)-1)\n\n    for n in range(0,len(ncount)-1):\n        E_spectrum[n] = np.sum(Kk.flat[whichbin==n])\n        E_spectrum_sol[n] = np.sum(Kk_sol.flat[whichbin==n])\n        E_spectrum_comp[n] = np.sum(Kk_comp.flat[whichbin==n])\n\n    k = kbins[0:N]\n    E_spectrum = E_spectrum[0:N]\n    E_spectrum_sol = E_spectrum_sol[0:N]\n    E_spectrum_comp = E_spectrum_comp[0:N]\n\n\n    return k, E_spectrum, E_spectrum_sol, E_spectrum_comp\n\ndef fft_comp_power(ds, iu, level, low, delta ):\n    # FFT operates on uniformly gridded data.  We'll use the yt\n    # covering grid for this in general, which allows this script to run on \n    # simulation grids with non-uniform resolution. In this specific application,\n    # our grid is already uniform so this next line is overkill.\n    cube = ds.covering_grid(level, left_edge=low,\n                            dims=delta,\n                            fields=[iu])\n\n    u = cube[iu].d\n\n    nx, ny, nz = u.shape\n\n    # We keep just the first half of the axes in each direction.  Our\n    # normalization has an '8' to account for this clipping to one\n    # octant.\n    ru = np.fft.fftn(u)[0:nx//2+1,0:ny//2+1,0:nz//2+1]\n    ru = 8.0*ru/(nx*ny*nz)\n\n    return np.abs(ru)**2  # absolute value and square to get the power\n\nWe now have all the helper functions to decompose the velocity field into solenoidal and compressive components. From there, we can plot the power spectra in each component and compare how different CR transport models affect both the total ratio of compressive to solenoidal power and the mixture of components as a function of scale.\nBecause recreating the results of the paper involves loading and decomposing many files totaling 10s-100s of GBs, I’ve commented out the below script but left the file_path and files there to be modified.\n\n\"\"\"\nfile_path = \"../\"\nfiles = \"cr.out1.0004*\"\n\nts = yt.DatasetSeries(file_path+files)\nvtot_all_times = np.zeros(255)\nvsol_all_times = np.zeros(255)\nvcomp_all_times = np.zeros(255)\n\nfor ds in ts:\n    dd = ds.all_data()\n\n    # Decompose and return k and spectra for v_tot, v_sol, v_comp\n    vx, vy, vz, v_comp_x, v_comp_y, v_comp_z, v_sol1_x, v_sol1_y, v_sol1_z = decompose(ds)\n\n    v_sol_x = vx - v_comp_x\n    v_sol_y = vy - v_comp_y\n    v_sol_z = vz - v_comp_z\n\n    print(\"Comparing v_sol......\")\n    print(\"From function: \")\n    print(v_sol1_x)\n    print(\"From restructured compressive component: \")\n    print(v_sol_x)\n\n\n    power_ratio = (v_sol_x.var() + v_sol_y.var() + v_sol_z.var())/(v_comp_x.var() + v_comp_y.var() + v_comp_z.var())\n    #power_ratio = (v_sol_x.mean()**2.0 + v_sol_y.mean() + v_sol_z.mean()**2.0)/(v_comp_x.mean()**2.0 + v_comp_y.mean()**2.0 + v_comp_z.mean()**2.0)\n    \n    print(\"Variance in each component\")\n    print('Solenoidal x, y, z: ' + str(v_sol_x.var()) + \", \" + str(v_sol_y.var()) + \", \" + str(v_sol_z.var()))\n    print('Compressive x, y, z: ' + str(v_comp_x.var()) + \", \" + str(v_comp_y.var()) + \", \" + str(v_comp_z.var()))\n    \n    print(\"Average squared in each component\")\n    print('Solenoidal x, y, z: ' + str(v_sol_x.mean()**2.0) + \", \" + str(v_sol_y.mean()**2.0) + \", \" + str(v_sol_z.mean()**2.0))\n    print('Compressive x, y, z: ' + str(v_comp_x.mean()**2.0) + \", \" + str(v_comp_y.mean()**2.0) + \", \" + str(v_comp_z.mean()**2.0))\n \n    print(\"Ratio of solenoidal to compressive power: \" + str(power_ratio))  \n\n    # Calculate power spectra of total, solenoidal, and compressive kinetic energy components\n    kvec, tot_KE_spec, sol_KE_spec, comp_KE_spec = create_spectra(ds, v_sol_x, v_sol_y, v_sol_z, v_comp_x, v_comp_y, v_comp_z)\n\n    # Stack together different time snapshots to later do time-series analysis\n    vtot_all_times = np.vstack([vtot_all_times, tot_KE_spec])\n    vsol_all_times = np.vstack([vsol_all_times, sol_KE_spec])\n    vcomp_all_times = np.vstack([vcomp_all_times, comp_KE_spec])\n\n\n# Space for time-series analysis -- i.e. averaging over many snapshots, etc.\n\n#vtot_all_times = vtot_all_times[1:8,:]  # last few rows (times) of spectrum array\n#vsol_all_times = vsol_all_times[1:8,:]  # last few rows (times) of spectrum array\n#vcomp_all_times = vcomp_all_times[1:8,:]  # last few rows (times) of spectrum array\n\n# take mean, min, max over time (axis = 0)\navg_tot = np.mean(vtot_all_times,axis = 0)\nmina_tot = np.min(vtot_all_times,axis = 0)\nmaxa_tot = np.max(vtot_all_times,axis = 0)\n\navg_sol = np.mean(vsol_all_times,axis = 0)\nmina_sol = np.min(vsol_all_times,axis = 0)\nmaxa_sol = np.max(vsol_all_times,axis = 0)\n\navg_comp = np.mean(vcomp_all_times,axis = 0)\nmina_comp = np.min(vcomp_all_times,axis = 0)\nmaxa_comp = np.max(vcomp_all_times,axis = 0)\n\nk = kvec[0:len(avg_tot)]\n\nprint(\"Plotting average spectra (with min and max) over several snapshots: \")\n\n# normalize spectra by average value of total velocity spectrum at 3rd mode\nnorma = avg_tot[2]*k[2]**2\n\n# Plot spectra together\n# (Optional) Uncomment \"fill_between\" lines to show a shaded region between min and max power for each line\nplt.loglog((k), avg_tot*(k**2)/norma, 'ko-',label=r\"Total (Compressive + Solenoidal)\")\n#plt.fill_between((k), mina_tot*(k**2), maxa_tot*(k**2), facecolor='black', alpha=0.5)\nplt.loglog((k), avg_sol*(k**2)/norma, 'bo-',label=r\"Solenoidal\")\n#plt.fill_between((k), mina_sol*(k**2), maxa_sol*(k**2), facecolor='blue', alpha=0.5)\nplt.loglog((k), avg_comp*(k**2)/norma, 'go-',label=r\"Compressive\")\n#plt.fill_between((k), mina_comp*(k**2), maxa_comp*(k**2), facecolor='green', alpha=0.5)\nplt.ylim(1E-4,5E0)\n#plt.xlim(3E-2,2E0)\nplt.xlim(0.5,50)\nplt.xlabel(r\"$k$\",fontsize=18)\nplt.ylabel(r\"Power Spectra x k^2\",fontsize=18)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.legend(loc=\"lower right\")\nplt.tight_layout()\nplt.savefig(\"HH_diff_beta10.pdf\")\nplt.close()\n\nprint(\"Total Values: \")\nprint(avg_tot)\nprint(mina_tot)\nprint(maxa_tot)\nprint(\"Solenoidal Values: \")\nprint(avg_sol)\nprint(mina_sol)\nprint(maxa_sol)\nprint(\"Compressive Values: \")\nprint(avg_comp)\nprint(mina_comp)\nprint(maxa_comp)\nprint(\"k: \")\nprint(k)\n\"\"\"\n\n'\\nfile_path = \"../\"\\nfiles = \"cr.out1.0004*\"\\n\\nts = yt.DatasetSeries(file_path+files)\\nvtot_all_times = np.zeros(255)\\nvsol_all_times = np.zeros(255)\\nvcomp_all_times = np.zeros(255)\\n\\nfor ds in ts:\\n    dd = ds.all_data()\\n\\n    # Decompose and return k and spectra for v_tot, v_sol, v_comp\\n    vx, vy, vz, v_comp_x, v_comp_y, v_comp_z, v_sol1_x, v_sol1_y, v_sol1_z = decompose(ds)\\n\\n    v_sol_x = vx - v_comp_x\\n    v_sol_y = vy - v_comp_y\\n    v_sol_z = vz - v_comp_z\\n\\n    print(\"Comparing v_sol......\")\\n    print(\"From function: \")\\n    print(v_sol1_x)\\n    print(\"From restructured compressive component: \")\\n    print(v_sol_x)\\n\\n\\n    power_ratio = (v_sol_x.var() + v_sol_y.var() + v_sol_z.var())/(v_comp_x.var() + v_comp_y.var() + v_comp_z.var())\\n    #power_ratio = (v_sol_x.mean()**2.0 + v_sol_y.mean() + v_sol_z.mean()**2.0)/(v_comp_x.mean()**2.0 + v_comp_y.mean()**2.0 + v_comp_z.mean()**2.0)\\n    \\n    print(\"Variance in each component\")\\n    print(\\'Solenoidal x, y, z: \\' + str(v_sol_x.var()) + \", \" + str(v_sol_y.var()) + \", \" + str(v_sol_z.var()))\\n    print(\\'Compressive x, y, z: \\' + str(v_comp_x.var()) + \", \" + str(v_comp_y.var()) + \", \" + str(v_comp_z.var()))\\n    \\n    print(\"Average squared in each component\")\\n    print(\\'Solenoidal x, y, z: \\' + str(v_sol_x.mean()**2.0) + \", \" + str(v_sol_y.mean()**2.0) + \", \" + str(v_sol_z.mean()**2.0))\\n    print(\\'Compressive x, y, z: \\' + str(v_comp_x.mean()**2.0) + \", \" + str(v_comp_y.mean()**2.0) + \", \" + str(v_comp_z.mean()**2.0))\\n \\n    print(\"Ratio of solenoidal to compressive power: \" + str(power_ratio))  \\n\\n    # Calculate power spectra of total, solenoidal, and compressive kinetic energy components\\n    kvec, tot_KE_spec, sol_KE_spec, comp_KE_spec = create_spectra(ds, v_sol_x, v_sol_y, v_sol_z, v_comp_x, v_comp_y, v_comp_z)\\n\\n    # Stack together different time snapshots to later do time-series analysis\\n    vtot_all_times = np.vstack([vtot_all_times, tot_KE_spec])\\n    vsol_all_times = np.vstack([vsol_all_times, sol_KE_spec])\\n    vcomp_all_times = np.vstack([vcomp_all_times, comp_KE_spec])\\n\\n\\n# Space for time-series analysis -- i.e. averaging over many snapshots, etc.\\n\\n#vtot_all_times = vtot_all_times[1:8,:]  # last few rows (times) of spectrum array\\n#vsol_all_times = vsol_all_times[1:8,:]  # last few rows (times) of spectrum array\\n#vcomp_all_times = vcomp_all_times[1:8,:]  # last few rows (times) of spectrum array\\n\\n# take mean, min, max over time (axis = 0)\\navg_tot = np.mean(vtot_all_times,axis = 0)\\nmina_tot = np.min(vtot_all_times,axis = 0)\\nmaxa_tot = np.max(vtot_all_times,axis = 0)\\n\\navg_sol = np.mean(vsol_all_times,axis = 0)\\nmina_sol = np.min(vsol_all_times,axis = 0)\\nmaxa_sol = np.max(vsol_all_times,axis = 0)\\n\\navg_comp = np.mean(vcomp_all_times,axis = 0)\\nmina_comp = np.min(vcomp_all_times,axis = 0)\\nmaxa_comp = np.max(vcomp_all_times,axis = 0)\\n\\nk = kvec[0:len(avg_tot)]\\n\\nprint(\"Plotting average spectra (with min and max) over several snapshots: \")\\n\\n# normalize spectra by average value of total velocity spectrum at 3rd mode\\nnorma = avg_tot[2]*k[2]**2\\n\\n# Plot spectra together\\n# (Optional) Uncomment \"fill_between\" lines to show a shaded region between min and max power for each line\\nplt.loglog((k), avg_tot*(k**2)/norma, \\'ko-\\',label=r\"Total (Compressive + Solenoidal)\")\\n#plt.fill_between((k), mina_tot*(k**2), maxa_tot*(k**2), facecolor=\\'black\\', alpha=0.5)\\nplt.loglog((k), avg_sol*(k**2)/norma, \\'bo-\\',label=r\"Solenoidal\")\\n#plt.fill_between((k), mina_sol*(k**2), maxa_sol*(k**2), facecolor=\\'blue\\', alpha=0.5)\\nplt.loglog((k), avg_comp*(k**2)/norma, \\'go-\\',label=r\"Compressive\")\\n#plt.fill_between((k), mina_comp*(k**2), maxa_comp*(k**2), facecolor=\\'green\\', alpha=0.5)\\nplt.ylim(1E-4,5E0)\\n#plt.xlim(3E-2,2E0)\\nplt.xlim(0.5,50)\\nplt.xlabel(r\"$k$\",fontsize=18)\\nplt.ylabel(r\"Power Spectra x k^2\",fontsize=18)\\nplt.xticks(fontsize=14)\\nplt.yticks(fontsize=14)\\nplt.legend(loc=\"lower right\")\\nplt.tight_layout()\\nplt.savefig(\"HH_diff_beta10.pdf\")\\nplt.close()\\n\\nprint(\"Total Values: \")\\nprint(avg_tot)\\nprint(mina_tot)\\nprint(maxa_tot)\\nprint(\"Solenoidal Values: \")\\nprint(avg_sol)\\nprint(mina_sol)\\nprint(maxa_sol)\\nprint(\"Compressive Values: \")\\nprint(avg_comp)\\nprint(mina_comp)\\nprint(maxa_comp)\\nprint(\"k: \")\\nprint(k)\\n'\n\n\nAttached is a figure from Bustard and Oh 2023 showing the outcome for different CR transport models.\n\nimage_path = \"figures/BustardOh2023_fig10.png\"\nimage = Image.open(image_path)\nplt.imshow(image)\nplt.axis('off')\n\n(-0.5, 2531.5, 1049.5, -0.5)\n\n\n\n\n\nOne can see how solenoidal energy \\(E_{\\rm sol}\\) (dashed lines) and compressive energy \\(E_{\\rm comp}\\) (solid lines) vary as a function of scale, with solenoidal motions generally being most important (or even dominant) at small scales / high-k. This depends on transport, however. Especially for \\(\\beta \\sim 100\\) (right panel), CR streaming leads to a much larger ratio of \\(E_{\\rm sol}/E_{\\rm comp}\\) compared to the no-CR MHD case, particularly at small scales.\nWhile a more definite conclusion awaits future simulations and analysis, we speculate that CR damping predominantly acts on compressive motions, but since compressions combine with magnetic tension to drive solenoidal motions (see e.g. Lim et al. 2020), CR damping ultimately affects the solenoidal energy too. That it generally leads to more solenoidal power than compressive power indicates that CRs mainly damp compressions; this “divergence cleaning” of the velocity field is quite interesting and deserves additional follow-up with simulations employing a mixture of solenoidal and compressive driving from the start, rather than solely compressive driving. For instance, we show in our paper that the anisotropy of turbulent eddies, which depends on the solenoidal vs compressive ratio, is affected by CRs; when CR damping is strong, eddies become more elongated along the mean magnetic field direction, which has interesting implications for cosmic ray scattering by turbulent eddies. This is way beyond the scope of this notebook; read about it more in the paper!"
  },
  {
    "objectID": "posts/CR_Turb/CR_Turb_Notebook.html#broader-turbulence-statistics",
    "href": "posts/CR_Turb/CR_Turb_Notebook.html#broader-turbulence-statistics",
    "title": "Cosmic Ray Impacts on Turbulence",
    "section": "Broader turbulence statistics",
    "text": "Broader turbulence statistics\nWe’ve seen a few different ways that cosmic rays affect turbulence, particularly the kinetic energy spectra and the mixture of solenoidal vs compressive motions. How about something more basic, like the probability distribution function of CR pressure, gas density, and velocity? Below, we won’t plot any PDFs (though this is pretty easy to do with yt). Instead, we’ll quantify three summary statistics probing the width of the PDFs: \\(\\delta v /v\\), \\(\\delta \\rho /\\rho\\), and \\(\\delta P_{\\rm CR} / P_{\\rm CR}\\). Here, the numerator is the standard deviation of log10 of the field, while the denominator is the average of log10 of that field over the whole simulation box. We do log10 because turbulent PDFs are generally lognormal, and this calculation conforms with previous work.\n\ndef quantify_std_dev(file_path,files):\n\n  devdensArr = []\n  devvelArr = []\n  devEcArr = []\n\n  ts = yt.DatasetSeries(file_path+files,parallel=False)\n\n  for ds in ts.piter():\n    dd = ds.all_data()\n\n    # Calculate average field quantities\n    avg_density = dd.quantities.weighted_average_quantity(\"density\",weight=\"ones\")\n    avg_vel = dd.quantities.weighted_average_quantity(\"velocity_magnitude\",weight=\"ones\")\n    avg_Ec = dd.quantities.weighted_average_quantity(\"Ec\",weight=\"ones\")\n\n    # Since compressive turbulence leads to lognormal distributions (usually), \n    # we move this calculation into log space, i.e. we'll take the log10(density / average density)\n    # and then calculate it's standard deviation\n\n    def density_log(field, data):\n      return np.log(data['density']/avg_density)\n\n    ds.add_field(('gas', u'density_log'), function = density_log, units=\"\")\n\n    def vel_log(field, data):\n      return np.log(data['velocity_magnitude']/avg_vel)\n\n    ds.add_field(('gas', u'vel_log'), function = vel_log, units=\"\")\n\n    def Ec_log(field, data):\n      return np.log(data['Ec']/avg_Ec)\n\n    ds.add_field(('gas', u'Ec_log'), function = Ec_log, units=\"\")\n\n    # Take the standard deviation, which in yt lingo is very incorrectly called the \"variance\"\n    stddev_density, avg_density = dd.quantities.weighted_variance(\"density_log\",weight=\"ones\")\n    stddev_vel,avg_vel = dd.quantities.weighted_variance(\"vel_log\",weight=\"ones\")\n    stddev_Ec,avg_Ec = dd.quantities.weighted_variance(\"Ec_log\",weight=\"ones\")\n    devdensArr.append(stddev_density)\n    devvelArr.append(stddev_vel)\n    devEcArr.append(stddev_Ec)\n\n    print(\"delta rho \")\n    print(devdensArr)\n    print(\"delta v \")\n    print(devvelArr)\n    print(\"delta Ec \")\n    print(devEcArr)\n\nRunning the above code snippet on a series of simulation volumes with varying CR diffusivity and varying \\(P_{\\rm CR}/P_{\\rm g}\\) yields the figure below. In canonical MHD turbulence, there’s a rough equivalence between the plotted quantities: \\(\\delta v /v \\sim \\delta \\rho /\\rho\\). With CRs, that is no longer true. Especially as CR content increases and CR damping becomes more important around \\(P_{\\rm CR}/P_{\\rm g} &gt; 1\\), fluctuating quantities deviate significantly.\n\nimage_path = \"figures/BustardOh2023_fig11.png\"\nimage = Image.open(image_path)\nplt.imshow(image)\nplt.axis('off')\n\n(-0.5, 1923.5, 1005.5, -0.5)\n\n\n\n\n\nAs shown above, the canonical \\(\\delta v /v \\sim \\delta \\rho /\\rho\\) relationship is broken in the presence of cosmic rays, with a dependency on \\(P_{CR}/P_{g}\\), and cosmic ray fluctuations also have a dependency. Additionally, these fluctuations depend as well on cosmic ray transport: when cosmic ray diffusion hits a sweet-spot value, it damps fluctuations, and this damping is imprinted on the gas density (low \\(\\delta \\rho /\\rho\\)). These imprints differ when cosmic rays do not diffuse, or when diffusion is very fast (not shown)."
  },
  {
    "objectID": "posts/LMC_Part1/index.html",
    "href": "posts/LMC_Part1/index.html",
    "title": "Data Analysis and Visualization for Astrophysics Research: Part I",
    "section": "",
    "text": "In this tutorial post, I’ll show how to use Python-based data analysis and visualization tools to carry out exploratory and diagnostic data analysis of astrophysics simulations. We’ll be exploring simulations of the Large Magellanic Cloud (Bustard+ 2020), which is a dwarf satellite galaxy of the Milky Way actively blowing out gas in a “galactic wind” (shown below).\nIn this notebook (part I), we will extract a few mock observables from the dataset, including rotation measure (which is a probe of magnetic field strength) and ion column densities. Then we’ll make a few mock absorption line spectra comparable to that from the COS-Halos spectrograph aboard the Hubble Space Telescope.\nIn part II, we will plot values of “ram pressure” across the LMC disk and tabulate them at specific points where there are observational sightlines (this part, followed by an analysis of correlations between local ram pressure and observed ion abundances forms the basis for a funded Hubble Space Telescope (HST) grant (PI: Yong Zheng, Co-I: Chad Bustard)"
  },
  {
    "objectID": "posts/LMC_Part1/index.html#mock-observables-from-models-of-the-large-magellanic-cloud",
    "href": "posts/LMC_Part1/index.html#mock-observables-from-models-of-the-large-magellanic-cloud",
    "title": "Data Analysis and Visualization for Astrophysics Research: Part I",
    "section": "Mock Observables from Models of the Large Magellanic Cloud",
    "text": "Mock Observables from Models of the Large Magellanic Cloud\n\nAuthor: Chad Bustard\nThis notebook goes through a few analyses of simulation data, specifically the simulations published in Bustard et al. 2020 of ram pressure stripping and supernova-driven outflows from the Large Magellanic Cloud.\n\nMain publication: https://ui.adsabs.harvard.edu/abs/2020ApJ…893…29B/abstract\n\n\nOrder of operations:\n\nWhy do these simulations?\nWhat goes into these simulations?\nWhat do the simulations look like?\nSimulation analysis – mock observations\n\n\n\nPython-based packages used:\nPandas, yt, Trident, astropy"
  },
  {
    "objectID": "posts/LMC_Part1/index.html#background",
    "href": "posts/LMC_Part1/index.html#background",
    "title": "Data Analysis and Visualization for Astrophysics Research: Part I",
    "section": "Background",
    "text": "Background\n\nWhy were these simulations created?\nHow gas flows in and out of galaxies is an important and open question in galaxy formation and evolution. Large-scale supernova-driven outflows (or winds) from galaxies are prevalent throughout the Universe and can greatly impact galaxy evolution by quenching star formation and redistributing metals from the inner galaxy to the circumgalactic medium. The composition of these outflows and the physical processes that drive them, however, are not well understood, and there are large discrepancies between observations and theory. This project closes those gaps by creating synthetic, multi-wavelength observations of outflow simulations to be compared to observations from Chandra, HST, JWST, and other current and future telescopes.\nSpecifically, our simulations focus on the Large Magellanic Cloud (LMC), a dwarf galaxy roughly 50 kiloparsecs from the Milky Way that exhibits evidence for galactic winds. The LMC also has a rich interaction history with its neighbor, the Small Magellanic Cloud (SMC), which allows us to probe how a galaxy’s environment affects outflow generation and dynamics. While falling into the Milky Way halo, the Clouds orbit around each other, triggering bursts of star formation and also tearing each other apart as their gravitational forces loosen and strip material. Combined with the constant headwind they experience during their infall, their galactic dance flings gas behind the Clouds, contributing to the Trailing Magellanic Stream. This massive gaseous tail extending tens of kiloparsecs behind the Clouds may someday fall onto the Milky Way disk and enhance our Galactic ecosystem by providing more fuel to form stars. Fortunately, because of our birds-eye view, the Magellanic System gives us an incredible window into how galaxies expel and feed on gas; both the large-scale gas cycles in and between galaxies, as well as the small-scale, internal processes that drive gas flows.\nMore specifically, this project looks at the generation of supernova-driven outflows from the LMC and their interaction with ram pressure, the pressure that a galaxy feels as it moves through a static background. Individually, these processes are known to oppose gravity and remove gas from galaxies, but in concert, their effects are less well known.\n\n\nWhat goes into these simulations?\nIn Bustard et al. 2018, we modeled individual, idealized gas outbursts from the LMC and their interaction with a headwind directed parallel to the LMC disk axis.\nHere, in Bustard et al. 2020, we increase complexity and realism in important ways:\n\nWe use active particles in FLASH to represent clusters of stars that evolve and explode over a given time period, depositing energy and momentum to the surrounding cells according to the fitting functions of Martizzi et al. 2015 and the star cluster implementation of Semenov et al. 2016.\nPart of the energy released from supernovae goes into cosmic rays. Cosmic rays are relativistic particles, comprising only about a billionth of all particles in the Milky Way, but their energies are so high that, collectively, the cosmic ray population has an equal importance to galaxy dynamics and thermodynamics. Cosmic rays are of specific interest because of their ability to help launch galactic outflows. The FLASH cosmic ray module we employ has been used in numerous galaxy-scale simulations as well as in recent localized simulations of a stratified ISM made unstable by cosmic ray streaming (Heintz, Bustard, and Zweibel 2020).\nProbably the most novel part of these simulations…the creation of star cluster particles is directly tied to the spatially resolved star formation history of the LMC! Small-scale structures resolved by observations of the Magellanic Clouds, as well as the reconstructed star formation histories of the Clouds, afford us the opportunity to test the cumulative effects of various physical processes on outflow and fountain generation. Specifically, we have included into our model the derived star formation sites in the LMC over the past billion years. This is done by reading in data files containing the star formation rate at over 1300 (x,y) coordinates at 10 time snapshots. In between these coarse time snapshots, we randomly draw cluster masses from a probability distribution function, which we can vary, and populate each (x,y) coordinate with star clusters such that the total mass formed as stars matches the total mass known to form during that time interval. We leave the number of star forming events as a free parameter; fewer events necessitates either larger mass particles or more particles per event (supernovae that are more clustered), while more frequent events necessitates lower mass particles. This allows us to probe the effects of supernova clustering on outflow generation.\n\n\n\nWhat do the full simulations look like?\nThe video below shows volume renderings of the LMC gas pressure over the course of a billion (simulated) years of LMC evolution, including the generation of supernova-driven outflows and ram pressure stripping of loosely connected gas.\nIn the following cells, we’ll take a closer look at the simulation data ourselves…\n\nfrom IPython import display\ndisplay.Video(\"Image_Video_Files/movie_GasPres_timeseries.mp4\", embed=True)\n\n\n \n Your browser does not support the video tag.\n \n\n\n\n# Import all the packages we need\n#!pip install --upgrade yt\n#!pip install trident\n!pip install aplpy\nimport yt\nimport trident\nfrom trident import LightRay\nimport aplpy\nimport numpy as np\n#import matplotlib as plt\nfrom yt.units.yt_array import YTQuantity\nfrom yt import YTArray\nimport h5py\nimport matplotlib.pyplot as plt\nfrom astropy.io import fits\nfrom astropy.table import Table\nfrom astropy import wcs\nfrom astropy.wcs import WCS\nimport csv\nimport pandas as pd\n\n!pip install cmasher # a nice repository of colorblind-friendly, aesthetically pleasing colormaps\nimport cmasher as cmr\n\nRequirement already satisfied: aplpy in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (2.1.0)\nRequirement already satisfied: numpy in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from aplpy) (1.25.2)\nRequirement already satisfied: astropy&gt;=3.1 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from aplpy) (5.3.1)\nRequirement already satisfied: matplotlib&gt;=2.0 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from aplpy) (3.7.2)\nRequirement already satisfied: reproject&gt;=0.4 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from aplpy) (0.12.0)\nRequirement already satisfied: pyregion&gt;=2.0 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from aplpy) (2.2.0)\nRequirement already satisfied: pillow&gt;=4.3 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from aplpy) (10.0.0)\nRequirement already satisfied: pyavm&gt;=0.9.4 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from aplpy) (0.9.5)\nRequirement already satisfied: scikit-image&gt;=0.14 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from aplpy) (0.21.0)\nRequirement already satisfied: shapely&gt;=1.7 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from aplpy) (2.0.1)\nRequirement already satisfied: pyerfa&gt;=2.0 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from astropy&gt;=3.1-&gt;aplpy) (2.0.0.3)\nRequirement already satisfied: PyYAML&gt;=3.13 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from astropy&gt;=3.1-&gt;aplpy) (6.0.1)\nRequirement already satisfied: packaging&gt;=19.0 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from astropy&gt;=3.1-&gt;aplpy) (23.1)\nRequirement already satisfied: contourpy&gt;=1.0.1 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib&gt;=2.0-&gt;aplpy) (1.1.0)\nRequirement already satisfied: cycler&gt;=0.10 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib&gt;=2.0-&gt;aplpy) (0.11.0)\nRequirement already satisfied: fonttools&gt;=4.22.0 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib&gt;=2.0-&gt;aplpy) (4.42.0)\nRequirement already satisfied: kiwisolver&gt;=1.0.1 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib&gt;=2.0-&gt;aplpy) (1.4.4)\nRequirement already satisfied: pyparsing&lt;3.1,&gt;=2.3.1 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib&gt;=2.0-&gt;aplpy) (3.0.9)\nRequirement already satisfied: python-dateutil&gt;=2.7 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib&gt;=2.0-&gt;aplpy) (2.8.2)\nRequirement already satisfied: astropy-healpix&gt;=0.6 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from reproject&gt;=0.4-&gt;aplpy) (1.0.0)\nRequirement already satisfied: scipy&gt;=1.5 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from reproject&gt;=0.4-&gt;aplpy) (1.11.1)\nRequirement already satisfied: dask[array]&gt;=2021.8 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from reproject&gt;=0.4-&gt;aplpy) (2023.9.1)\nRequirement already satisfied: cloudpickle in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from reproject&gt;=0.4-&gt;aplpy) (2.2.1)\nRequirement already satisfied: zarr in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from reproject&gt;=0.4-&gt;aplpy) (2.16.1)\nRequirement already satisfied: fsspec in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from reproject&gt;=0.4-&gt;aplpy) (2023.9.0)\nRequirement already satisfied: networkx&gt;=2.8 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from scikit-image&gt;=0.14-&gt;aplpy) (3.1)\nRequirement already satisfied: imageio&gt;=2.27 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from scikit-image&gt;=0.14-&gt;aplpy) (2.31.1)\nRequirement already satisfied: tifffile&gt;=2022.8.12 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from scikit-image&gt;=0.14-&gt;aplpy) (2023.7.18)\nRequirement already satisfied: PyWavelets&gt;=1.1.1 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from scikit-image&gt;=0.14-&gt;aplpy) (1.4.1)\nRequirement already satisfied: lazy_loader&gt;=0.2 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from scikit-image&gt;=0.14-&gt;aplpy) (0.3)\nRequirement already satisfied: click&gt;=8.0 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from dask[array]&gt;=2021.8-&gt;reproject&gt;=0.4-&gt;aplpy) (8.1.7)\nRequirement already satisfied: partd&gt;=1.2.0 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from dask[array]&gt;=2021.8-&gt;reproject&gt;=0.4-&gt;aplpy) (1.4.0)\nRequirement already satisfied: toolz&gt;=0.10.0 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from dask[array]&gt;=2021.8-&gt;reproject&gt;=0.4-&gt;aplpy) (0.12.0)\nRequirement already satisfied: importlib-metadata&gt;=4.13.0 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from dask[array]&gt;=2021.8-&gt;reproject&gt;=0.4-&gt;aplpy) (6.8.0)\nRequirement already satisfied: six&gt;=1.5 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib&gt;=2.0-&gt;aplpy) (1.16.0)\nRequirement already satisfied: asciitree in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from zarr-&gt;reproject&gt;=0.4-&gt;aplpy) (0.3.3)\nRequirement already satisfied: fasteners in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from zarr-&gt;reproject&gt;=0.4-&gt;aplpy) (0.18)\nRequirement already satisfied: numcodecs&gt;=0.10.0 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from zarr-&gt;reproject&gt;=0.4-&gt;aplpy) (0.11.0)\nRequirement already satisfied: zipp&gt;=0.5 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from importlib-metadata&gt;=4.13.0-&gt;dask[array]&gt;=2021.8-&gt;reproject&gt;=0.4-&gt;aplpy) (3.16.2)\nRequirement already satisfied: entrypoints in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from numcodecs&gt;=0.10.0-&gt;zarr-&gt;reproject&gt;=0.4-&gt;aplpy) (0.4)\nRequirement already satisfied: locket in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from partd&gt;=1.2.0-&gt;dask[array]&gt;=2021.8-&gt;reproject&gt;=0.4-&gt;aplpy) (1.0.0)\nRequirement already satisfied: cmasher in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (1.6.3)\nRequirement already satisfied: colorspacious&gt;=1.1.0 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from cmasher) (1.1.2)\nRequirement already satisfied: e13tools&gt;=0.9.4 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from cmasher) (0.9.6)\nRequirement already satisfied: matplotlib&gt;=2.2.4 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from cmasher) (3.7.2)\nRequirement already satisfied: numpy&gt;=1.16.0 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from cmasher) (1.25.2)\nRequirement already satisfied: contourpy&gt;=1.0.1 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib&gt;=2.2.4-&gt;cmasher) (1.1.0)\nRequirement already satisfied: cycler&gt;=0.10 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib&gt;=2.2.4-&gt;cmasher) (0.11.0)\nRequirement already satisfied: fonttools&gt;=4.22.0 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib&gt;=2.2.4-&gt;cmasher) (4.42.0)\nRequirement already satisfied: kiwisolver&gt;=1.0.1 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib&gt;=2.2.4-&gt;cmasher) (1.4.4)\nRequirement already satisfied: packaging&gt;=20.0 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib&gt;=2.2.4-&gt;cmasher) (23.1)\nRequirement already satisfied: pillow&gt;=6.2.0 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib&gt;=2.2.4-&gt;cmasher) (10.0.0)\nRequirement already satisfied: pyparsing&lt;3.1,&gt;=2.3.1 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib&gt;=2.2.4-&gt;cmasher) (3.0.9)\nRequirement already satisfied: python-dateutil&gt;=2.7 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib&gt;=2.2.4-&gt;cmasher) (2.8.2)\nRequirement already satisfied: six&gt;=1.5 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib&gt;=2.2.4-&gt;cmasher) (1.16.0)\n\n\n\n# Get the HDF5 file from my Google Drive\n# Note: Can delete this cell if the HDF5 file is already downloaded\n#!pip install gdown\n#!gdown \"https://drive.google.com/uc?id=1BCvIdYOA3VZj91Fdh9seOki0ww3Rqiky\""
  },
  {
    "objectID": "posts/LMC_Part1/index.html#a-first-look-at-the-simulation-data",
    "href": "posts/LMC_Part1/index.html#a-first-look-at-the-simulation-data",
    "title": "Data Analysis and Visualization for Astrophysics Research: Part I",
    "section": "A first look at the simulation data",
    "text": "A first look at the simulation data\nFor the remainder of this notebook, we employ the yt package, a visualization and analysis toolkit for astrophysics: https://yt-project.org/.\nLet’s start by loading the present-day LMC snapshot and printing off the fields that yt knows about. Then let’s take a look at density and temperature slices of the simulations parallel and perpendicular to the axis of the disk.\n\n# Load our dataset with yt\nyt.enable_parallelism() # for large data files (or multiple files), yt can be parallelized with this command. Here we don't need it\n\n# general way to load in a series of snapshots, in this case just the final snapshot of the 50 I output during the simulation\nds = yt.load(\"windCRs_hdf5_plt_cnt_0050\")\n\ndd = ds.all_data()\n\n# just giving the simulation box periodic boundaries (so we can calculate gradients if we want to without throwing errors)\n#ds.periodicity=(True,True,True)\n        \n# rearranging coordinates \nds.coordinates.x_axis[1] = 0\nds.coordinates.y_axis[1] = 2\n\n# Let's take a look at all the quantities or \"fields\" known to yt derived from the ~10 output variables in the HDF5 file\nprint(ds.derived_field_list)\n\nyt : [ERROR    ] 2023-09-13 16:08:02,635 Could not enable parallelism: mpi4py is not installed\nyt : [INFO     ] 2023-09-13 16:08:02,764 Parameters: current_time              = 3.156010944496386e+16\nyt : [INFO     ] 2023-09-13 16:08:02,765 Parameters: domain_dimensions         = [96 96 96]\nyt : [INFO     ] 2023-09-13 16:08:02,768 Parameters: domain_left_edge          = [-6.171e+22 -6.171e+22 -6.171e+22]\nyt : [INFO     ] 2023-09-13 16:08:02,768 Parameters: domain_right_edge         = [1.234e+23 1.234e+23 1.234e+23]\nyt : [INFO     ] 2023-09-13 16:08:02,768 Parameters: cosmological_simulation   = 0\n\n\n[('flash', 'cell_volume'), ('flash', 'cloo'), ('flash', 'cray'), ('flash', 'dens'), ('flash', 'dx'), ('flash', 'dy'), ('flash', 'dz'), ('flash', 'haco'), ('flash', 'hrat'), ('flash', 'igm '), ('flash', 'ism '), ('flash', 'magx'), ('flash', 'magy'), ('flash', 'magz'), ('flash', 'mtl '), ('flash', 'path_element_x'), ('flash', 'path_element_y'), ('flash', 'path_element_z'), ('flash', 'pres'), ('flash', 'temp'), ('flash', 'velx'), ('flash', 'vely'), ('flash', 'velz'), ('flash', 'volume'), ('flash', 'x'), ('flash', 'y'), ('flash', 'z'), ('gas', 'alfven_speed'), ('gas', 'angular_momentum_magnitude'), ('gas', 'angular_momentum_x'), ('gas', 'angular_momentum_y'), ('gas', 'angular_momentum_z'), ('gas', 'averaged_density'), ('gas', 'baroclinic_vorticity_magnitude'), ('gas', 'baroclinic_vorticity_x'), ('gas', 'baroclinic_vorticity_y'), ('gas', 'baroclinic_vorticity_z'), ('gas', 'cell_mass'), ('gas', 'cell_volume'), ('gas', 'courant_time_step'), ('gas', 'cutting_plane_magnetic_field_x'), ('gas', 'cutting_plane_magnetic_field_y'), ('gas', 'cutting_plane_magnetic_field_z'), ('gas', 'cutting_plane_velocity_x'), ('gas', 'cutting_plane_velocity_y'), ('gas', 'cutting_plane_velocity_z'), ('gas', 'density'), ('gas', 'density_gradient_magnitude'), ('gas', 'density_gradient_x'), ('gas', 'density_gradient_y'), ('gas', 'density_gradient_z'), ('gas', 'dx'), ('gas', 'dy'), ('gas', 'dynamical_time'), ('gas', 'dz'), ('gas', 'four_velocity_magnitude'), ('gas', 'four_velocity_t'), ('gas', 'four_velocity_x'), ('gas', 'four_velocity_y'), ('gas', 'four_velocity_z'), ('gas', 'jeans_mass'), ('gas', 'kT'), ('gas', 'kinetic_energy_density'), ('gas', 'lorentz_factor'), ('gas', 'mach_alfven'), ('gas', 'mach_number'), ('gas', 'magnetic_energy_density'), ('gas', 'magnetic_field_cylindrical_radius'), ('gas', 'magnetic_field_cylindrical_theta'), ('gas', 'magnetic_field_cylindrical_z'), ('gas', 'magnetic_field_divergence'), ('gas', 'magnetic_field_divergence_absolute'), ('gas', 'magnetic_field_los'), ('gas', 'magnetic_field_magnitude'), ('gas', 'magnetic_field_poloidal'), ('gas', 'magnetic_field_poloidal_magnitude'), ('gas', 'magnetic_field_spherical_phi'), ('gas', 'magnetic_field_spherical_radius'), ('gas', 'magnetic_field_spherical_theta'), ('gas', 'magnetic_field_strength'), ('gas', 'magnetic_field_toroidal'), ('gas', 'magnetic_field_toroidal_magnitude'), ('gas', 'magnetic_field_x'), ('gas', 'magnetic_field_y'), ('gas', 'magnetic_field_z'), ('gas', 'magnetic_pressure'), ('gas', 'mass'), ('gas', 'mean_molecular_weight'), ('gas', 'momentum_density_x'), ('gas', 'momentum_density_y'), ('gas', 'momentum_density_z'), ('gas', 'momentum_x'), ('gas', 'momentum_y'), ('gas', 'momentum_z'), ('gas', 'number_density'), ('gas', 'path_element_x'), ('gas', 'path_element_y'), ('gas', 'path_element_z'), ('gas', 'plasma_beta'), ('gas', 'pressure'), ('gas', 'pressure_gradient_magnitude'), ('gas', 'pressure_gradient_x'), ('gas', 'pressure_gradient_y'), ('gas', 'pressure_gradient_z'), ('gas', 'radial_mach_number'), ('gas', 'radial_magnetic_field'), ('gas', 'radial_magnetic_field_absolute'), ('gas', 'radial_velocity'), ('gas', 'radial_velocity_absolute'), ('gas', 'relative_magnetic_field_x'), ('gas', 'relative_magnetic_field_y'), ('gas', 'relative_magnetic_field_z'), ('gas', 'relative_velocity_x'), ('gas', 'relative_velocity_y'), ('gas', 'relative_velocity_z'), ('gas', 'shear'), ('gas', 'shear_criterion'), ('gas', 'shear_mach'), ('gas', 'sound_speed'), ('gas', 'specific_angular_momentum_magnitude'), ('gas', 'specific_angular_momentum_x'), ('gas', 'specific_angular_momentum_y'), ('gas', 'specific_angular_momentum_z'), ('gas', 'tangential_magnetic_field'), ('gas', 'tangential_over_magnetic_field_magnitude'), ('gas', 'tangential_over_velocity_magnitude'), ('gas', 'tangential_velocity'), ('gas', 'temperature'), ('gas', 'velocity_cylindrical_radius'), ('gas', 'velocity_cylindrical_theta'), ('gas', 'velocity_cylindrical_z'), ('gas', 'velocity_divergence'), ('gas', 'velocity_divergence_absolute'), ('gas', 'velocity_los'), ('gas', 'velocity_magnitude'), ('gas', 'velocity_spherical_phi'), ('gas', 'velocity_spherical_radius'), ('gas', 'velocity_spherical_theta'), ('gas', 'velocity_x'), ('gas', 'velocity_y'), ('gas', 'velocity_z'), ('gas', 'volume'), ('gas', 'vorticity_growth_magnitude'), ('gas', 'vorticity_growth_magnitude_absolute'), ('gas', 'vorticity_growth_timescale'), ('gas', 'vorticity_growth_x'), ('gas', 'vorticity_growth_y'), ('gas', 'vorticity_growth_z'), ('gas', 'vorticity_magnitude'), ('gas', 'vorticity_squared'), ('gas', 'vorticity_stretching_magnitude'), ('gas', 'vorticity_stretching_x'), ('gas', 'vorticity_stretching_y'), ('gas', 'vorticity_stretching_z'), ('gas', 'vorticity_x'), ('gas', 'vorticity_y'), ('gas', 'vorticity_z'), ('gas', 'x'), ('gas', 'y'), ('gas', 'z'), ('index', 'cell_volume'), ('index', 'cylindrical_radius'), ('index', 'cylindrical_theta'), ('index', 'cylindrical_z'), ('index', 'dx'), ('index', 'dy'), ('index', 'dz'), ('index', 'grid_indices'), ('index', 'grid_level'), ('index', 'morton_index'), ('index', 'ones'), ('index', 'ones_over_dx'), ('index', 'path_element_x'), ('index', 'path_element_y'), ('index', 'path_element_z'), ('index', 'radius'), ('index', 'spherical_phi'), ('index', 'spherical_radius'), ('index', 'spherical_theta'), ('index', 'virial_radius_fraction'), ('index', 'volume'), ('index', 'x'), ('index', 'y'), ('index', 'z'), ('index', 'zeros')]\n\n\nLet’s take a quick look at the simulations to see what we have. We’ll start with Slice plots, which just look at a 2D array of cells, both in the plane of the disk and vertical to the plane of the disk.\n\n# Plot a slice of the hydrogen number density -- # of hydrogen particles per cubic centimeter -- in the plane of the disk\nfield = (\"gas\",\"number_density\")\nproj = yt.SlicePlot(ds, \"z\", field,center = (0,0,0), width=(20, 'kpc'))\nproj.set_cmap(field=field, cmap='cmr.eclipse')\nproj.set_colorbar_label(field, r\"Density (cm$^{-3}$)\")\nproj.set_zlim(field,1e-3,1e0)\nproj.annotate_timestamp()\nproj.show()\n\nproj = yt.SlicePlot(ds, \"x\", field,center = (0,0,0), width=(20, 'kpc'))\nproj.set_cmap(field=field, cmap='cmr.eclipse')\nproj.set_colorbar_label(field, r\"Density (cm$^{-3}$)\")\nproj.set_zlim(field,1e-3,1e0)\nproj.annotate_timestamp()\nproj.show()\n\nfield = (\"gas\",\"temperature\")\nproj = yt.SlicePlot(ds, \"z\", field,center = (0,0,0), width=(20, 'kpc'))\nproj.set_cmap(field=field, cmap='cmr.eclipse')\nproj.set_colorbar_label(field, r\"Temperature (K)\")\nproj.set_zlim(field,1e3,1e7)\nproj.annotate_timestamp()\nproj.show()\n\nproj = yt.SlicePlot(ds, \"x\", field,center = (0,0,0), width=(20, 'kpc'))\nproj.set_cmap(field=field, cmap='cmr.eclipse')\nproj.set_colorbar_label(field, r\"Temperature (K)\")\nproj.set_zlim(field,1e3,1e7)\nproj.annotate_timestamp()\nproj.show()\n\nyt : [INFO     ] 2023-09-13 16:08:03,989 xlim = -30856775809623249649664.000000 30856775809623249649664.000000\nyt : [INFO     ] 2023-09-13 16:08:03,989 ylim = -30856775809623249649664.000000 30856775809623249649664.000000\nyt : [INFO     ] 2023-09-13 16:08:03,990 xlim = -30856775809623249649664.000000 30856775809623249649664.000000\nyt : [INFO     ] 2023-09-13 16:08:03,990 ylim = -30856775809623249649664.000000 30856775809623249649664.000000\nyt : [INFO     ] 2023-09-13 16:08:03,992 Making a fixed resolution buffer of (('gas', 'number_density')) 800 by 800\nyt : [INFO     ] 2023-09-13 16:08:04,561 xlim = -30856775809623249649664.000000 30856775809623249649664.000000\nyt : [INFO     ] 2023-09-13 16:08:04,562 ylim = -30856775809623249649664.000000 30856775809623249649664.000000\nyt : [INFO     ] 2023-09-13 16:08:04,563 xlim = -30856775809623249649664.000000 30856775809623249649664.000000\nyt : [INFO     ] 2023-09-13 16:08:04,563 ylim = -30856775809623249649664.000000 30856775809623249649664.000000\nyt : [INFO     ] 2023-09-13 16:08:04,563 Making a fixed resolution buffer of (('gas', 'number_density')) 800 by 800\nyt : [INFO     ] 2023-09-13 16:08:04,921 xlim = -30856775809623249649664.000000 30856775809623249649664.000000\nyt : [INFO     ] 2023-09-13 16:08:04,921 ylim = -30856775809623249649664.000000 30856775809623249649664.000000\nyt : [INFO     ] 2023-09-13 16:08:04,922 xlim = -30856775809623249649664.000000 30856775809623249649664.000000\nyt : [INFO     ] 2023-09-13 16:08:04,923 ylim = -30856775809623249649664.000000 30856775809623249649664.000000\nyt : [INFO     ] 2023-09-13 16:08:04,923 Making a fixed resolution buffer of (('gas', 'temperature')) 800 by 800\nyt : [INFO     ] 2023-09-13 16:08:05,441 xlim = -30856775809623249649664.000000 30856775809623249649664.000000\nyt : [INFO     ] 2023-09-13 16:08:05,441 ylim = -30856775809623249649664.000000 30856775809623249649664.000000\nyt : [INFO     ] 2023-09-13 16:08:05,442 xlim = -30856775809623249649664.000000 30856775809623249649664.000000\nyt : [INFO     ] 2023-09-13 16:08:05,442 ylim = -30856775809623249649664.000000 30856775809623249649664.000000\nyt : [INFO     ] 2023-09-13 16:08:05,442 Making a fixed resolution buffer of (('gas', 'temperature')) 800 by 800\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can see a lot of interesting physics at play here, as well as some info about the simulation methodology.\nFirst, you might notice in the last figure, which shows a vertical view of the temperature, that the actual cells of the simulation are noticeable in the region far above the disk. This is because we derefine the grid in areas with lower density. The cells are more densely spaced near the center of the galaxy, specifically at regions where the gas density is highest; this technique is called adaptive mesh refinement (AMR) and is commonly used to focus resolution on certain areas of the simulation box. In this case, every n timesteps in the simulation (here set to be ~100 timesteps), the grid will re-assess the gas density and restructure itself. This technique saves on computation time and memory. If the entire simulation domain were tiled by small cells, the simulation would be intractable.\nSecond, check out the structures that have formed in the LMC disk. Clusters of supernova explosions have heated and ejected the gas (as one can see in the vertical slices), carving out hot, diffuse holes surrounded by dense shells. This is exactly what we see when we observe a neutral hydrogen map of the LMC, and we will confirm that later in this exercise when we create mock HI column density maps, as well as maps of other common and useful ions.\nOf course, this is just an example “slice” in the plane of the disk. In reality, we see the full, integrated column of gas along our line of sight, which is at an angle to the disk orientation. Let’s show that view instead…\n\n# density projection along the line of sight\nL = [-0.561,0.099,0.822] # vector normal to cutting plane\nnorth_vector = [0,0,1]\n\n# Plot the column density (projected density)  \nfield = (\"gas\",\"number_density\")\nproj = yt.OffAxisProjectionPlot(ds, L, field,center = (0,0,0), width=(20, 'kpc'))\nproj.set_cmap(field=field, cmap='cmr.eclipse')\nproj.set_colorbar_label(field, r\"Column Density (cm$^{-2}$)\")\nproj.set_zlim(field,1.E19, 5.E21)\nproj.annotate_timestamp()\nproj.show()\n\nyt : [INFO     ] 2023-09-13 16:08:05,762 xlim = -30856775809623249649664.000000 30856775809623249649664.000000\nyt : [INFO     ] 2023-09-13 16:08:05,762 ylim = -30856775809623249649664.000000 30856775809623249649664.000000\nyt : [INFO     ] 2023-09-13 16:08:05,762 zlim = -92554999999999995019264.000000 92554999999999995019264.000000\nyt : [INFO     ] 2023-09-13 16:08:05,763 Making a fixed resolution buffer of (('gas', 'number_density')) 800 by 800"
  },
  {
    "objectID": "posts/LMC_Part1/index.html#towards-a-better-comparison-to-real-observations",
    "href": "posts/LMC_Part1/index.html#towards-a-better-comparison-to-real-observations",
    "title": "Data Analysis and Visualization for Astrophysics Research: Part I",
    "section": "Towards a better comparison to real observations",
    "text": "Towards a better comparison to real observations\nSo far we’ve made a column density map along the line-of-sight to the LMC, which is a good start, but that is still not exactly what we get from observations.\n\nObservations are typically plotted in Right Ascension (RA), Declination (DEC) coordinates\nObservations never give us the full gas density…instead we obtain abundances of different ions, which exist at certain densities and temperatures\nIon abundances are obtained through e.g. absorption line spectroscopy. So what we ultimately want, to best compare to observations, are maps of various ion column densities and mock absorption lines through different sightlines.\n\nLet’s start by using the astropy package to convert from simulation coordinates to RA, DEC coordinates\n\n# Restrict our plot to just the galaxy (cells with an ISM tag &gt; 0.6)\ncut_data = dd.cut_region('(obj[\"ism \"] &gt; 0.6)')\n\nprj_fits = yt.FITSOffAxisProjection(ds,L,field,center = (0,0,0),width=(20, 'kpc'),data_source=cut_data)\nsky_center = [79.0,-68.68] # in degrees, what Jack told me to use\nsky_scale = (4123.71, \"arcsec/kpc\") # could also use a YTQuantity\nprj_fits.create_sky_wcs(sky_center, sky_scale, ctype=[\"RA---TAN\",\"DEC--TAN\"], replace_old_wcs=True)\nprj_fits.writeto(\"LMC_H.fits\",overwrite=True)\n\nyt : [INFO     ] 2023-09-13 16:08:19,662 Making a FITS image of field number_density\n\n\n\n# We'll plot images multiple times, so let's make this a function\n\n# Requires: file -- file name, e.g. \"LMC_H.fits\"\n# Requires: ion -- ion name, e.g. \"H\"\n# Requires: min_max = (min, max) of field value for colorbar = (1e19,5e21) by default\ndef plotFits(file,ion,min_max=(1e19,5e21)):\n    image_data = fits.getdata(file)\n    print(type(image_data))\n    print(image_data.shape)\n\n    vmin,vmax = min_max\n    fig = aplpy.FITSFigure(file)\n    fig.add_grid()\n    fig.show_colorscale(cmap=\"cmr.eclipse\",stretch = 'log', vmin=vmin, vmax = vmax)\n    fig.tick_labels.set_xposition(\"top\")\n    fig.ticks.set_xspacing(8.0)\n    fig.ticks.set_yspacing(8.0)\n    fig.add_colorbar()\n    fig.colorbar.set_axis_label_text(ion + r' Column Density (cm$^{-2}$)')\n \n    # fig.tick_labels.set_xformat('hh:mm')\n    fig.tick_labels.set_xformat('dd')\n    fig.tick_labels.set_yformat('dd')\n    # fig.set_theme('pretty')\n    #fig.colorbar.show(log_format=False)\n    fig.colorbar.set_font(size=20)\n\n\nplotFits(\"LMC_H.fits\", \"H\",min_max=(1e19,5e21))\n\n&lt;class 'numpy.ndarray'&gt;\n(512, 512)\n\n\n\n\n\nLet’s now separate out different ions instead of showing the full gas column density. Here, we use the Trident package, which assumes that the gas is in photoionization equilibrium (PIE) with the metagalactic UV background. I wrote a new radiative cooling / heating routine in the FLASH simulations that uses the same assumption, calculating cooling rates as a function of the evolving gas density, metallicity, and temperature. So this is a consistent assumption.\n\n# I've created and output a few relevant *tracers* with values in [0,1] from the FLASH simulations: metallicity and concentration of ISM (interstellar medium) matter\n# Trident needs the metallicity field to be called \"metallicity\", so do this here..\ndef _metallicity(field, data):\n    val = data['mtl ']\n    return val\n\n# add the new metallicity field and weight it by ISM concentration so we preferentially select the galaxy instead of the background\nds.add_field(('gas', 'metallicity'), function=_metallicity, units='dimensionless',sampling_type='cell', force_override=True)\n\n# Based on that metallicity and the PIE assumption, tell Trident to calculate HI, HII, and OVI abundances\n# Note: As of YT 4.0, these fields seem to be included without needing to add them with Trident. \ntrident.add_ion_fields(ds, ions=['H I', 'H II', 'Si II', 'Si III', 'Si IV', 'O VI'], ftype=\"gas\")\n\n# create all the projections, write them to FITS files for later use, and make initial mock images\n# this may take a few minutes\nprj_fits = yt.FITSOffAxisProjection(ds,L,'H_p0_number_density',center = (0,0,0),width=(20, 'kpc'),data_source=cut_data)\nprj_fits.create_sky_wcs(sky_center, sky_scale, ctype=[\"RA---TAN\",\"DEC--TAN\"], replace_old_wcs=True)\nprj_fits.writeto(\"LMC_HI.fits\", overwrite=True)\n\nprj_fits = yt.FITSOffAxisProjection(ds,L,'H_p1_number_density',center = (0,0,0),width=(20, 'kpc'),data_source=cut_data)\nprj_fits.create_sky_wcs(sky_center, sky_scale, ctype=[\"RA---TAN\",\"DEC--TAN\"], replace_old_wcs=True)\nprj_fits.writeto(\"LMC_HII.fits\", overwrite=True)\n\nyt : [INFO     ] 2023-09-13 16:08:31,718 Making a FITS image of field H_p0_number_density\nyt : [INFO     ] 2023-09-13 16:08:43,008 Making a FITS image of field H_p1_number_density\n\n\n\n# Make images\nplotFits(\"LMC_HI.fits\", \"H I\")\nplotFits(\"LMC_HII.fits\", \"H II\")\n\n&lt;class 'numpy.ndarray'&gt;\n(512, 512)\n&lt;class 'numpy.ndarray'&gt;\n(512, 512)\n\n\n\n\n\n\n\n\nHI probes neutral hydrogen, which is quite abundant in the LMC disk\nHII probes singly ionized hydrogen. The fact that there is a significant column of ionized hydrogen suggests that estimates of total LMC gas mass from just neutral hydrogen are underestimates; instead, this simulated LMC appears to have a diffuse halo of ionized gas surrounding the disk, in this case developed from ram pressure stripping and galactic outflows driven by supernovae."
  },
  {
    "objectID": "posts/LMC_Part1/index.html#mock-cos-halos-spectra",
    "href": "posts/LMC_Part1/index.html#mock-cos-halos-spectra",
    "title": "Data Analysis and Visualization for Astrophysics Research: Part I",
    "section": "Mock COS-Halos spectra",
    "text": "Mock COS-Halos spectra\nFinally, observations rarely can produce a beautiful, full map of ion densities. Instead, we rely on absorption line spectroscopy along many lines of sight (rays) puncturing the LMC disk and pointed towards either background quasars (very bright objects) or bright stars in the LMC disk. Using Trident, we can create mock spectra according to the specifications of the COS-Halos spectrograph aboard HST.\nIn the following, we’ll use Trident to get Si II and Si III spectra along two rays probing the near-side of the LMC disk (the background light source is assumed to be a bright LMC star instead of a background quasar). We’ll compare spectral widths, which give a measure of the turbulent velocity dispersion, and then create velocity dispersion maps to make more sense of our spectra.\n\n# Somewhat boring stuff where I've modified the Trident plotting function to accept multiple rays on one plot\nfrom yt.funcs import \\\n    mylog\nimport numpy as np\nimport matplotlib.figure\nfrom matplotlib.backends.backend_agg import \\\n    FigureCanvasAgg\n \n\n# Define a helper unit to convert units\ndef kpc2codeunits(ds, kpc_array):\n    # A function which takes coordinates in kpc\n    # and returns a YTArray in code_length\n    KPC2CM = 1000*3.0856775809623245e+18\n    x = YTQuantity(kpc_array[0],'kpc').in_cgs()\n    y = YTQuantity(kpc_array[1],'kpc').in_cgs()\n    z = YTQuantity(kpc_array[2],'kpc').in_cgs()\n    pos = ds.arr([x, y, z],'code_length')\n    return pos\n\n# Trident function modified by Chad\ndef plot_spectrum_Chad(wavelength, flux, filename=\"spectrum.png\",\n    lambda_limits=None, flux_limits=None,\n    title=None, label=None, figsize=None, step=False,\n    stagger=0.2, features=None, axis_labels=None):\n    \"\"\"\n    Plot a spectrum or a collection of spectra and save to disk.\n \n     This function wraps some Matplotlib plotting functionality for\n     plotting spectra generated with the :class:`~trident.SpectrumGenerator`.\n     In its simplest form, it accepts a wavelength array consisting of\n     wavelength values and a corresponding flux array consisting of relative\n     flux values, and it plots them and saves to disk.\n \n     In addition, it can plot several spectra on the same axes simultaneously\n     by passing a list of arrays to the ``wavelength``, ``flux`` arguments\n     (and optionally to the ``label`` and ``step`` keywords).\n \n     Returns the Matplotlib Figure object for further processing.\n \n     **Parameters**\n \n     :wavelength: array of floats or list of arrays of floats\n \n         Wavelength values in angstroms.  Either as an array of floats in the\n         case of plotting a single spectrum, or as a list of arrays of floats\n         in the case of plotting several spectra on the same axes.\n \n     :flux: array of floats or list of arrays of floats\n \n         Relative flux values (from 0 to 1) corresponding to wavelength array.\n         Either as an array of floats in the case of plotting a single\n         spectrum, or as a list of arrays of floats in the case of plotting\n         several spectra on the same axes.\n \n   :filename: string, optional\n \n         Output filename of the plotted spectrum.  Will be a png file.\n         Default: 'spectrum.png'\n \n     :lambda_limits: tuple or list of floats, optional\n \n         The minimum and maximum of the wavelength range (x-axis) for the plot\n         in angstroms.  If specified as None, will use whole lambda range\n         of spectrum. Example: (1200, 1400) for 1200-1400 Angstroms\n         Default: None\n \n     :flux_limits: tuple or list of floats, optional\n \n         The minimum and maximum of the flux range (y-axis) for the plot.\n         If specified as None, limits are automatically from\n         [0, 1.1*max(flux)]. Example: (0, 1) for normal flux range before\n         postprocessing.\n         Default: None\n \n     :step: boolean or list of booleans, optional\n \n         Plot the spectrum as a series of step functions.  Appropriate for\n         plotting processed and noisy data.  Use a list of booleans when\n         plotting multiple spectra, where each boolean corresponds to the entry\n         in the ``wavelength`` and ``flux`` lists.\n \n     :title: string, optional\n \n         Optional title for plot\n         Default: None\n \n     :label: string or list of strings, optional\n \n         Label for each spectrum to be plotted. Useful if plotting multiple\n         spectra simultaneously.  Will automatically trigger a legend to be\n         generated.\n         Default: None\n \n     :stagger: float, optional\n \n         If plotting multiple spectra on the same axes, do we offset them in\n         the y direction?  If set to None, no.  If set to a float, stagger them\n         by the flux value specified by this parameter.\n \n    :features: dict, optional\n \n         Include vertical lines with labels to represent certain spectral\n         features.  Each entry in the dictionary consists of a key string to\n         be overplot and the value float as to where in wavelength space it\n         will be plot as a vertical line with the corresponding label.\n \n         Example: features={'Ly a' : 1216, 'Ly b' : 1026}\n \n         Default: None\n \n     :axis_labels: tuple of strings, optional\n \n         Optionally set the axis labels directly.  If set to None, defaults to\n         ('Wavelength [$\\\\rm\\\\AA$]', 'Relative Flux').\n         Default: None\n \n     **Returns**\n \n     Matplotlib Figure object for further processing\n \n     **Example**\n \n     Plot a flat spectrum\n \n     &gt;&gt;&gt; import numpy as np\n     &gt;&gt;&gt; import trident\n     &gt;&gt;&gt; wavelength = np.arange(1200, 1400)\n     &gt;&gt;&gt; flux = np.ones(len(wavelength))\n     &gt;&gt;&gt; trident.plot_spectrum(wavelength, flux)\n\n     Generate a one-zone ray, create a Lyman alpha spectrum from it, and add\n     gaussian noise to it.  Plot both the raw spectrum and the noisy spectrum\n     on top of each other.\n \n     &gt;&gt;&gt; import trident\n     &gt;&gt;&gt; ray = trident.make_onezone_ray(column_densities={'H_p0_number_density':1e21})\n     &gt;&gt;&gt; sg_final = trident.SpectrumGenerator(lambda_min=1200, lambda_max=1300,         dlambda=0.5)\n     &gt;&gt;&gt; sg_final.make_spectrum(ray, lines=['Ly a'])\n     &gt;&gt;&gt; sg_final.save_spectrum('spec_raw.h5')\n     &gt;&gt;&gt; sg_final.add_gaussian_noise(10)\n     &gt;&gt;&gt; sg_raw = trident.load_spectrum('spec_raw.h5')\n     &gt;&gt;&gt; trident.plot_spectrum([sg_raw.lambda_field, sg_final.lambda_field],\n     ... [sg_raw.flux_field, sg_final.flux_field], stagger=0, step=[False, True],\n     ... label=['Raw', 'Noisy'], filename='raw_and_noise.png')\n     \"\"\"  \n        \n    myfsize = 20\n  \n        # number of rows and columns\n    n_rows = 1\n    n_columns = 1\n \n    # blank space between edge of figure and active plot area\n    top_buffer = 0.07\n    bottom_buffer = 0.15\n    left_buffer = 0.06\n    right_buffer = 0.03\n \n    # blank space between plots\n    hor_buffer = 0.05\n    vert_buffer = 0.05\n \n    # calculate the height and width of each panel\n    panel_width = ((1.0 - left_buffer - right_buffer -\n                    ((n_columns-1)*hor_buffer)) / n_columns)\n    panel_height = ((1.0 - top_buffer - bottom_buffer -\n                     ((n_rows-1)*vert_buffer)) / n_rows)\n \n    # create a figure (figsize is in inches)\n    if figsize is None:\n        figsize = (12, 4)\n    figure = matplotlib.figure.Figure(figsize=figsize, frameon=True)\n\n    # get the row and column number\n    my_row = 0\n    my_column = 0\n\n    # calculate the position of the bottom, left corner of this plot\n    left_side = left_buffer + (my_column * panel_width) + \\\n                my_column * hor_buffer\n    top_side = 1.0 - (top_buffer + (my_row * panel_height) + \\\n               my_row * vert_buffer)\n    bottom_side = top_side - panel_height\n     # create an axes object on which we will make the plot\n    my_axes = figure.add_axes((left_side, bottom_side, panel_width, panel_height))\n\n    # Are we overplotting several spectra?  or just one?\n    if not (isinstance(wavelength, list) and isinstance(flux, list)):\n        wavelengths = [wavelength]\n        fluxs = [flux]\n        labels = [label]\n        steps = [step]\n    else:\n        wavelengths = wavelength\n        fluxs = flux\n        if label is not None:\n            labels = label\n        else:\n            labels = [None]*len(fluxs)\n        if step is not None:\n            steps = step\n        else:\n            steps = [None]*len(fluxs)\n\n    # A running maximum of flux for use in ylim scaling in final plot\n    max_flux = 0.\n\n    for i, (wavelength, flux) in enumerate(zip(wavelengths, fluxs)):\n\n        # Do we stagger the fluxes?\n        if stagger is not None:\n            flux -= stagger * i\n\n        # Do we include labels and a legend?\n        if steps[i]:\n            my_axes.step(wavelength, flux, label=labels[i])\n        else:\n            my_axes.plot(wavelength, flux, label=labels[i])\n\n        new_max_flux = np.max(flux)\n        if new_max_flux &gt; max_flux:\n            max_flux = new_max_flux\n                \n        # Return the fluxes to their normal values\n        # if they've been staggered\n        if stagger is not None:\n            flux += stagger * i\n\n    # Do we include a title?\n    if title is not None:\n        my_axes.set_title(title)\n\n    if lambda_limits is None:\n        lambda_limits = (wavelength.min(), wavelength.max())\n    my_axes.set_xlim(lambda_limits[0], lambda_limits[1])\n\n    if flux_limits is None:\n        flux_limits = (0, 1.1*max_flux)\n    my_axes.set_ylim(flux_limits[0], flux_limits[1])\n    if axis_labels is None:\n        axis_labels = ('Wavelength [$\\\\rm\\\\AA$]', 'Relative Flux')\n    my_axes.xaxis.set_label_text(axis_labels[0],fontsize=myfsize)\n    my_axes.yaxis.set_label_text(axis_labels[1],fontsize=myfsize)\n\n    # Don't let the x-axis switch to offset values for tick labels\n    my_axes.get_xaxis().get_major_formatter().set_useOffset(False)\n\n    for tick in my_axes.xaxis.get_major_ticks():\n                        tick.label.set_fontsize(14)\n    for tick in my_axes.yaxis.get_major_ticks():\n                        tick.label.set_fontsize(14)\n\n    if label is not None: my_axes.legend(fontsize=14)\n\n    # Overplot the relevant features on the plot\n    if features is not None:\n        for feature in features:\n            label = feature\n            wavelength = features[feature]\n            # Draw line\n            my_axes.plot([wavelength, wavelength], flux_limits, '--', color='k')\n            # Write text\n            text_location = flux_limits[1] - 0.05*(flux_limits[1] - flux_limits[0])\n            my_axes.text(wavelength, text_location, label,\n                   # horizontalalignment='left',\n                    horizontalalignment='right',\n                   # verticalalignment='top', rotation='horizontal',fontsize=14)\n                    verticalalignment='top', rotation='vertical',fontsize=12)\n\n    mylog.info(\"Writing spectrum plot to png file: %s\" % filename)\n    canvas = FigureCanvasAgg(figure)\n    canvas.print_figure(filename)\n    return figure\n\n\n# If not already created, create a directory called LightRays to store the ray.h5 files in\nimport os\n  \n# Directory\ndirectory = \"LightRays\"\n  \nif (os.path.exists(directory)==False):\n    os.mkdir(directory)\n    print(\"Directory '% s' created\" % directory)\n\n\n# Let's probe two different regions of the disk. The first ray will puncture close to the center, while another ray will puncture further out\nstart_coords1  = [-3.0,-3.0,0.0]\nend_coords1 = [-3.0-0.561*10.0,-3.0-0.099*10.0,-0.822*10.0]\nray_start1 = kpc2codeunits(ds, start_coords1)\nray_end1 = kpc2codeunits(ds, end_coords1)\nrayName1 = 'ray1'\nline_list='all' # let Trident know about all the absorption lines\n\n \nstart_coords2   = [3.0,7.0,0.0]\nend_coords2 = [3.0-0.561*10.0,7.0-0.099*10.0,-0.822*10.0]\nray_start2 = kpc2codeunits(ds, start_coords2)\nray_end2 = kpc2codeunits(ds, end_coords2)\nrayName2 = 'ray2'\nline_list='all'\n\nray1 = trident.make_simple_ray(ds,\n                               start_position=ray_start1,\n                               end_position=ray_end1,\n                               data_filename=rayName1+'.h5',\n                               lines=line_list,\n                               ftype='gas')\n\nray2 = trident.make_simple_ray(ds,\n                               start_position=ray_start2,\n                               end_position=ray_end2,\n                               data_filename=rayName2+'.h5',\n                               lines=line_list,\n                               ftype='gas')\n\n# Show where the light rays start and end\nq = yt.ProjectionPlot(ds, 1, 'density', weight_field='ism ')\nq.annotate_timestamp()\nq.annotate_ray(ray1, arrow=True)\nq.annotate_ray(ray2, arrow=True)\nq.set_cmap('density', 'cmr.eclipse')\nq.set_zlim('density', 1e-28, 1e-24)\nq.show()\n\nyt : [INFO     ] 2023-09-13 16:08:45,157 Getting segment at z = 0.0: [-0.05000828 -0.05000828  0.        ] unitary to [-0.14352376 -0.06651101 -0.13702269] unitary.\nyt : [INFO     ] 2023-09-13 16:08:45,158 Getting subsegment: [-0.05000828 -0.05000828  0.        ] unitary to [-0.14352376 -0.06651101 -0.13702269] unitary.\nyt : [INFO     ] 2023-09-13 16:08:45,196 Saving field data to yt dataset: ray1.h5.\nyt : [INFO     ] 2023-09-13 16:08:45,306 Parameters: current_time              = 3.156010944496386e+16 code_time\nyt : [INFO     ] 2023-09-13 16:08:45,306 Parameters: domain_dimensions         = [1 1 1]\nyt : [INFO     ] 2023-09-13 16:08:45,306 Parameters: domain_left_edge          = [-6.171e+22 -6.171e+22 -6.171e+22] code_length\nyt : [INFO     ] 2023-09-13 16:08:45,307 Parameters: domain_right_edge         = [1.234e+23 1.234e+23 1.234e+23] code_length\nyt : [INFO     ] 2023-09-13 16:08:45,307 Parameters: cosmological_simulation   = 0\nyt : [INFO     ] 2023-09-13 16:08:45,313 Getting segment at z = 0.0: [0.05000828 0.11668599 0.        ] unitary to [-0.0435072   0.10018325 -0.13702269] unitary.\nyt : [INFO     ] 2023-09-13 16:08:45,313 Getting subsegment: [0.05000828 0.11668599 0.        ] unitary to [-0.0435072   0.10018325 -0.13702269] unitary.\nyt : [INFO     ] 2023-09-13 16:08:45,350 Saving field data to yt dataset: ray2.h5.\nyt : [INFO     ] 2023-09-13 16:08:45,449 Parameters: current_time              = 3.156010944496386e+16 code_time\nyt : [INFO     ] 2023-09-13 16:08:45,449 Parameters: domain_dimensions         = [1 1 1]\nyt : [INFO     ] 2023-09-13 16:08:45,450 Parameters: domain_left_edge          = [-6.171e+22 -6.171e+22 -6.171e+22] code_length\nyt : [INFO     ] 2023-09-13 16:08:45,450 Parameters: domain_right_edge         = [1.234e+23 1.234e+23 1.234e+23] code_length\nyt : [INFO     ] 2023-09-13 16:08:45,450 Parameters: cosmological_simulation   = 0\nyt : [INFO     ] 2023-09-13 16:08:46,473 Projection completed\nyt : [INFO     ] 2023-09-13 16:08:46,475 xlim = -61709999999999992135680.000000 123399999999999997902848.000000\nyt : [INFO     ] 2023-09-13 16:08:46,475 ylim = -61709999999999992135680.000000 123399999999999997902848.000000\nyt : [INFO     ] 2023-09-13 16:08:46,477 xlim = -61709999999999992135680.000000 123399999999999997902848.000000\nyt : [INFO     ] 2023-09-13 16:08:46,477 ylim = -61709999999999992135680.000000 123399999999999997902848.000000\nyt : [INFO     ] 2023-09-13 16:08:46,478 Making a fixed resolution buffer of (('gas', 'density')) 800 by 800\n\n\n\n\n\nNow let’s generate a spectrum. Let’s focus on wavelengths between 1150 and 1300 angstroms, where we’ll find Si II and Si III lines\n\nlambda_min,lambda_max = 1150, 1300\nsg1 = trident.SpectrumGenerator(lambda_min=lambda_min, lambda_max=lambda_max, dlambda=0.01)\nsg1.make_spectrum(ray1, lines='all', use_peculiar_velocity=True,\n                  store_observables=True)\nsg1.add_milky_way_foreground()\nsg1.apply_lsf(filename='avg_COS.txt')\nsg1.add_gaussian_noise(30)\nsg1.save_spectrum('LightRays/spec_all_ray1.h5')\n\nsg2 = trident.SpectrumGenerator(lambda_min=lambda_min, lambda_max=lambda_max, dlambda=0.01)\nsg2.make_spectrum(ray2, lines='all', use_peculiar_velocity=True,\n                 store_observables=True)\nsg2.add_milky_way_foreground()\nsg2.apply_lsf(filename='avg_COS.txt')\nsg2.add_gaussian_noise(30)\nsg2.save_spectrum('LightRays/spec_all_ray2.h5')\n\nyt : [INFO     ] 2023-09-13 16:08:46,798 Setting instrument to Custom\nyt : [INFO     ] 2023-09-13 16:08:46,824 Allocating for 107 particles\nyt : [INFO     ] 2023-09-13 16:08:46,875 Using all 213 available lines in 'lines.txt'.\nyt : [INFO     ] 2023-09-13 16:08:46,877 Creating C_p0_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,882 Creating C_p1_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,884 Creating C_p2_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,886 Creating C_p3_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,887 Creating N_p0_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,892 Creating N_p1_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,894 Creating N_p2_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,896 Creating N_p3_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,897 Creating N_p4_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,899 Creating O_p0_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,904 Creating O_p1_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,906 Creating O_p2_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,907 Creating O_p3_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,909 Creating O_p4_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,911 Creating Ne_p4_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,917 Creating Ne_p5_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,919 Creating Ne_p6_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,922 Creating Ne_p7_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,925 Creating Na_p8_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,930 Creating Mg_p1_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,936 Creating Mg_p9_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,938 Creating Al_p1_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,944 Creating Al_p2_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,947 Creating Si_p11_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,953 Creating P_p3_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,957 Creating P_p4_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,960 Creating S_p1_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,967 Creating S_p2_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,970 Creating S_p3_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,974 Creating S_p4_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,976 Creating S_p5_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,979 Creating S_p13_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,982 Creating Ar_p0_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,989 Creating Ar_p1_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,993 Creating Ar_p6_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:46,996 Creating Ca_p9_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:47,004 Creating Fe_p1_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:47,015 Creating spectrum\nAdding line - Ly a [1215.670000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly a [1215.670000 A]:  13%|█▎        | 14/107 [00:00&lt;00:00, 131.32it/s]Adding line - Ly a [1215.670000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 650.00it/s]\nAdding line - Ly b [1025.722200 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly b [1025.722200 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 5378.81it/s]\nAdding line - Ly c [972.536740 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly c [972.536740 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9047.36it/s]\nAdding line - Ly d [949.742980 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly d [949.742980 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9102.00it/s]\nAdding line - Ly e [937.803400 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly e [937.803400 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9651.92it/s]\nAdding line - Ly 6 [930.748200 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 6 [930.748200 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9746.07it/s]\nAdding line - Ly 7 [926.225640 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 7 [926.225640 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9831.41it/s]\nAdding line - Ly 8 [923.150300 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 8 [923.150300 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9819.47it/s]\nAdding line - Ly 9 [920.963026 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 9 [920.963026 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9747.14it/s]\nAdding line - Ly 10 [919.351351 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 10 [919.351351 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9593.81it/s]\nAdding line - Ly 11 [918.129312 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 11 [918.129312 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9650.24it/s]\nAdding line - Ly 12 [917.180525 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 12 [917.180525 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9706.28it/s]\nAdding line - Ly 13 [916.429085 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 13 [916.429085 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9875.97it/s]\nAdding line - Ly 14 [915.823759 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 14 [915.823759 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9692.95it/s]\nAdding line - Ly 15 [915.328939 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 15 [915.328939 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9716.89it/s]\nAdding line - Ly 16 [914.919249 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 16 [914.919249 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9869.61it/s]\nAdding line - Ly 17 [914.576207 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 17 [914.576207 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9785.11it/s]\nAdding line - Ly 18 [914.286092 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 18 [914.286092 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9765.98it/s]\nAdding line - Ly 19 [914.038542 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 19 [914.038542 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9709.67it/s]\nAdding line - Ly 20 [913.825614 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 20 [913.825614 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9796.75it/s]\nAdding line - Ly 21 [913.641137 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 21 [913.641137 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9920.48it/s]\nAdding line - Ly 22 [913.480256 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 22 [913.480256 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9862.38it/s]\nAdding line - Ly 23 [913.339110 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 23 [913.339110 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9838.59it/s]\nAdding line - Ly 24 [913.214596 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 24 [913.214596 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 10011.40it/s]\nAdding line - Ly 25 [913.104199 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 25 [913.104199 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9834.89it/s]\nAdding line - Ly 26 [913.005863 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 26 [913.005863 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9785.97it/s]\nAdding line - Ly 27 [912.917891 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 27 [912.917891 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9828.37it/s]\nAdding line - Ly 28 [912.838877 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 28 [912.838877 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9979.27it/s]\nAdding line - Ly 29 [912.767643 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 29 [912.767643 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9861.51it/s]\nAdding line - Ly 30 [912.703200 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 30 [912.703200 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9963.16it/s]\nAdding line - Ly 31 [912.644712 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 31 [912.644712 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 10050.32it/s]\nAdding line - Ly 32 [912.591467 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 32 [912.591467 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 10005.77it/s]\nAdding line - Ly 33 [912.542856 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 33 [912.542856 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 10149.21it/s]\nAdding line - Ly 34 [912.498356 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 34 [912.498356 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 10034.22it/s]\nAdding line - Ly 35 [912.457516 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 35 [912.457516 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 10259.52it/s]\nAdding line - Ly 36 [912.419946 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 36 [912.419946 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 10211.92it/s]\nAdding line - Ly 37 [912.385306 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 37 [912.385306 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 10211.92it/s]\nAdding line - Ly 38 [912.353298 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 38 [912.353298 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 10134.86it/s]\nAdding line - Ly 39 [912.323663 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly 39 [912.323663 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 10010.50it/s]\nAdding line - C I 1657 [1656.929000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - C I 1657 [1656.929000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 13164.25it/s]\nAdding line - C I 1560 [1560.309000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - C I 1560 [1560.309000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 14156.41it/s]\nAdding line - C I 1329 [1328.834000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - C I 1329 [1328.834000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 15064.93it/s]\nAdding line - C I 1280 [1280.135000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - C I 1280 [1280.135000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 15795.51it/s]\nAdding line - C I 1277 [1277.245000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - C I 1277 [1277.245000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 11604.01it/s]\nAdding line - C I 1261 [1260.735000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - C I 1261 [1260.735000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 14808.52it/s]\nAdding line - C I 1194 [1193.995000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - C I 1194 [1193.995000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 17266.54it/s]\nAdding line - C I 1193 [1193.031000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - C I 1193 [1193.031000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 15617.95it/s]\nAdding line - C I 1189 [1188.833000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - C I 1189 [1188.833000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 17319.68it/s]\nAdding line - C I 1158 [1157.910000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - C I 1158 [1157.910000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 16648.43it/s]\nAdding line - C II* 1336 [1335.663000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - C II* 1336 [1335.663000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 14292.02it/s]\nAdding line - C II 1335 [1334.532000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - C II 1335 [1334.532000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 7348.94it/s]\nyt : [INFO     ] 2023-09-13 16:08:47,770 26 out of 107 line components are unresolved.\nAdding line - C II* 1037 [1037.018000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - C II* 1037 [1037.018000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 3418.58it/s]\nyt : [INFO     ] 2023-09-13 16:08:47,802 27 out of 107 line components are unresolved.\nAdding line - C II 1036 [1036.337000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - C II 1036 [1036.337000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 4424.42it/s]\nyt : [INFO     ] 2023-09-13 16:08:47,827 33 out of 107 line components are unresolved.\nAdding line - C II 904 [903.962000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - C II 904 [903.962000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 2261.14it/s]\nyt : [INFO     ] 2023-09-13 16:08:47,877 31 out of 107 line components are unresolved.\nAdding line - C III 977 [977.020000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - C III 977 [977.020000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 4732.36it/s]\nAdding line - C IV 1551 [1550.772000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - C IV 1551 [1550.772000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 16043.45it/s]\nAdding line - C IV 1548 [1548.187000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - C IV 1548 [1548.187000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 14916.83it/s]\nAdding line - N I 1201 [1200.710000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - N I 1201 [1200.710000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 11389.10it/s]\nAdding line - N I 1200 [1200.223000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - N I 1200 [1200.223000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 10381.21it/s]\nAdding line - N I 1200 [1199.550000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - N I 1200 [1199.550000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 19037.26it/s]\nyt : [INFO     ] 2023-09-13 16:08:47,947 3 out of 107 line components are unresolved.\nAdding line - N I 1135 [1134.980000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - N I 1135 [1134.980000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 15132.10it/s]\nAdding line - N I 1134 [1134.415000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - N I 1134 [1134.415000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 16768.99it/s]\nAdding line - N I 1134 [1134.165000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - N I 1134 [1134.165000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 22893.73it/s]\nyt : [INFO     ] 2023-09-13 16:08:47,968 33 out of 107 line components are unresolved.\nAdding line - N I 965 [965.041000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - N I 965 [965.041000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 20760.00it/s]\nAdding line - N I 965 [964.626000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - N I 965 [964.626000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 19343.73it/s]\nAdding line - N I 964 [963.990000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - N I 964 [963.990000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 18291.62it/s]\nAdding line - N I 954 [954.104000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - N I 954 [954.104000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 20384.04it/s]\nAdding line - N I 954 [953.970000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - N I 954 [953.970000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 12933.33it/s]\nAdding line - N I 954 [953.655000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - N I 954 [953.655000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 15472.83it/s]\nAdding line - N I 953 [953.415000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - N I 953 [953.415000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 18861.20it/s]\nAdding line - N I 952 [952.415000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - N I 952 [952.415000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 21372.76it/s]\nAdding line - N I 952 [952.303000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - N I 952 [952.303000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 20638.58it/s]\nyt : [INFO     ] 2023-09-13 16:08:48,031 30 out of 107 line components are unresolved.\nAdding line - N II 1084 [1083.990000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - N II 1084 [1083.990000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 8667.78it/s]\nyt : [INFO     ] 2023-09-13 16:08:48,046 33 out of 107 line components are unresolved.\nAdding line - N II 916 [915.612000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - N II 916 [915.612000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 7371.36it/s]\nyt : [INFO     ] 2023-09-13 16:08:48,063 32 out of 107 line components are unresolved.\nAdding line - N III 990 [989.799000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - N III 990 [989.799000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 16705.35it/s]\nyt : [INFO     ] 2023-09-13 16:08:48,072 33 out of 107 line components are unresolved.\nAdding line - N IV 765 [765.147000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - N IV 765 [765.147000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 23782.83it/s]\nAdding line - N V 1243 [1242.804000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - N V 1243 [1242.804000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 24982.93it/s]\nAdding line - N V 1239 [1238.821000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - N V 1239 [1238.821000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 25353.34it/s]\nAdding line - O I* 1306 [1306.029000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O I* 1306 [1306.029000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 12914.55it/s]\nAdding line - O I* 1305 [1304.858000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O I* 1305 [1304.858000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 10475.38it/s]\nAdding line - O I 1302 [1302.168000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O I 1302 [1302.168000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9728.16it/s]\nAdding line - O I 1039 [1039.230000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O I 1039 [1039.230000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 13627.05it/s]\nAdding line - O I 989 [988.773000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O I 989 [988.773000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 7670.61it/s]\nAdding line - O I 989 [988.655000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O I 989 [988.655000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 16990.07it/s]\nAdding line - O I 976 [976.448000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O I 976 [976.448000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 18489.40it/s]\nAdding line - O I 951 [950.885000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O I 951 [950.885000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 19978.26it/s]\nAdding line - O I 937 [936.629000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O I 937 [936.629000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 20915.29it/s]\nAdding line - O I 930 [929.517000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O I 930 [929.517000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 22166.64it/s]\nAdding line - O I 925 [924.950000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O I 925 [924.950000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 21496.77it/s]\nAdding line - O I 922 [922.008000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O I 922 [922.008000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 10857.58it/s]\nAdding line - O II 834 [834.465400 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O II 834 [834.465400 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 4749.10it/s]\nAdding line - O II 833 [833.330300 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O II 833 [833.330300 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 5392.18it/s]\nAdding line - O II 833 [832.758300 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O II 833 [832.758300 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 6370.21it/s]\nAdding line - O III* 835 [835.289000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O III* 835 [835.289000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 18678.94it/s]\nAdding line - O III* 835 [835.289000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O III* 835 [835.289000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 18569.72it/s]\nAdding line - O III 833 [832.929000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O III 833 [832.929000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 19102.70it/s]\nAdding line - O III* 703 [702.838000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O III* 703 [702.838000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 20682.74it/s]\nAdding line - O III 702 [702.337000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O III 702 [702.337000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 20141.17it/s]\nAdding line - O IV* 790 [790.199000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O IV* 790 [790.199000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 24413.61it/s]\nAdding line - O IV 788 [787.710000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O IV 788 [787.710000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 23661.32it/s]\nAdding line - O IV* 610 [609.829000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O IV* 610 [609.829000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 23507.44it/s]\nAdding line - O IV 608 [608.397000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O IV 608 [608.397000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 23922.31it/s]\nAdding line - O IV* 555 [554.513000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O IV* 555 [554.513000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 24139.22it/s]\nAdding line - O IV 554 [554.076000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O IV 554 [554.076000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 24361.44it/s]\nAdding line - O IV 553 [553.329000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O IV 553 [553.329000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 24169.41it/s]\nAdding line - O V 630 [629.732000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O V 630 [629.732000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 26368.32it/s]\nAdding line - O VI 1038 [1037.613000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O VI 1038 [1037.613000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 20365.36it/s]\nAdding line - O VI 1032 [1031.912000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - O VI 1032 [1031.912000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 15235.81it/s]\nAdding line - Ne V* 572 [572.335000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ne V* 572 [572.335000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 26680.04it/s]\nAdding line - Ne V* 570 [569.828000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ne V* 570 [569.828000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 26739.41it/s]\nAdding line - Ne V 568 [568.424000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ne V 568 [568.424000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 26288.80it/s]\nAdding line - Ne VI* 563 [562.805000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ne VI* 563 [562.805000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 22147.86it/s]\nAdding line - Ne VI 559 [558.603000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ne VI 559 [558.603000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 21690.79it/s]\nAdding line - Ne VII 465 [465.221000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ne VII 465 [465.221000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 22815.02it/s]\nAdding line - Ne VIII 780 [780.324000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ne VIII 780 [780.324000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 17693.96it/s]\nAdding line - Ne VIII 770 [770.409000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ne VIII 770 [770.409000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 14257.19it/s]\nAdding line - Na IX 694 [694.150000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Na IX 694 [694.150000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 27249.09it/s]\nAdding line - Na IX 682 [681.720000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Na IX 682 [681.720000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 27698.97it/s]\nAdding line - Mg II 1240 [1240.394700 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Mg II 1240 [1240.394700 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 16253.43it/s]\nAdding line - Mg II 1240 [1239.925300 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Mg II 1240 [1239.925300 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 16525.90it/s]\nAdding line - Mg X 625 [624.941000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Mg X 625 [624.941000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 25817.10it/s]\nAdding line - Mg X 610 [609.793000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Mg X 610 [609.793000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 25463.70it/s]\nAdding line - Al II 1671 [1670.787400 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Al II 1671 [1670.787400 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 6908.39it/s]\nAdding line - Al III 1863 [1862.789500 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Al III 1863 [1862.789500 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 15125.41it/s]\nAdding line - Al III 1855 [1854.716400 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Al III 1855 [1854.716400 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 13943.74it/s]\nAdding line - Si II* 1817 [1816.928000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Si II* 1817 [1816.928000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 19251.59it/s]\nAdding line - Si II 1808 [1808.013000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Si II 1808 [1808.013000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 19743.16it/s]\nAdding line - Si II* 1309 [1309.276000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Si II* 1309 [1309.276000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 6015.21it/s]\nAdding line - Si II 1304 [1304.370000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Si II 1304 [1304.370000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 1765.52it/s]\nAdding line - Si II* 1265 [1264.738000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Si II* 1265 [1264.738000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 2621.36it/s]\nAdding line - Si II 1260 [1260.422000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Si II 1260 [1260.422000 A]:  25%|██▌       | 27/107 [00:00&lt;00:00, 262.76it/s]Adding line - Si II 1260 [1260.422000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 948.35it/s]\nAdding line - Si II* 1197 [1197.394000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Si II* 1197 [1197.394000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 2622.01it/s]\nAdding line - Si II* 1194 [1194.500000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Si II* 1194 [1194.500000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 1097.74it/s]\nAdding line - Si II 1193 [1193.290000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Si II 1193 [1193.290000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 1341.29it/s]\nAdding line - Si II 1190 [1190.416000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Si II 1190 [1190.416000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 2703.67it/s]\nAdding line - Si II* 1024 [1023.700000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Si II* 1024 [1023.700000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 17905.61it/s]\nAdding line - Si II 1021 [1020.699000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Si II 1021 [1020.699000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 19905.81it/s]\nAdding line - Si II* 993 [992.683000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Si II* 993 [992.683000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 7003.17it/s]\nAdding line - Si II 990 [989.873000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Si II 990 [989.873000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 6837.84it/s]\nAdding line - Si III 1206 [1206.500000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Si III 1206 [1206.500000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 5455.24it/s]\nyt : [INFO     ] 2023-09-13 16:08:49,064 32 out of 107 line components are unresolved.\nAdding line - Si IV 1403 [1402.770000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Si IV 1403 [1402.770000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 14339.96it/s]\nyt : [INFO     ] 2023-09-13 16:08:49,074 33 out of 107 line components are unresolved.\nAdding line - Si XII 521 [520.665000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Si XII 521 [520.665000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 28540.01it/s]\nAdding line - Si XII 499 [499.406000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Si XII 499 [499.406000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 27756.04it/s]\nAdding line - P IV 951 [950.657000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - P IV 951 [950.657000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 25671.01it/s]\nAdding line - P V 1128 [1128.008000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - P V 1128 [1128.008000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 25425.84it/s]\nAdding line - P V 1118 [1117.977000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - P V 1118 [1117.977000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 25232.48it/s]\nAdding line - S II 1260 [1259.519000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S II 1260 [1259.519000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 13449.79it/s]\nAdding line - S II 1254 [1253.811000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S II 1254 [1253.811000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 14956.48it/s]\nAdding line - S II 1251 [1250.584000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S II 1251 [1250.584000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 16396.08it/s]\nAdding line - S II 913 [912.736000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S II 913 [912.736000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 10816.37it/s]\nAdding line - S II 910 [910.485000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S II 910 [910.485000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 8866.74it/s]\nAdding line - S II 907 [906.876000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S II 907 [906.876000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 8151.45it/s]\nAdding line - S II 766 [765.684000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S II 766 [765.684000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 3255.92it/s]\nAdding line - S II 764 [764.416000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S II 764 [764.416000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 3457.61it/s]\nAdding line - S II 764 [763.656000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S II 764 [763.656000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 4718.05it/s]\nAdding line - S III* 1201 [1200.966000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S III* 1201 [1200.966000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 14433.54it/s]\nAdding line - S III* 1194 [1194.058000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S III* 1194 [1194.058000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 14413.42it/s]\nAdding line - S III 1190 [1190.203000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S III 1190 [1190.203000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 14564.99it/s]\nAdding line - S III* 1021 [1021.323000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S III* 1021 [1021.323000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 22847.85it/s]\nAdding line - S III* 1021 [1021.108000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S III* 1021 [1021.108000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 24836.39it/s]\nAdding line - S III* 1016 [1015.779000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S III* 1016 [1015.779000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 24829.46it/s]\nAdding line - S III* 1016 [1015.567000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S III* 1016 [1015.567000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 23915.88it/s]\nAdding line - S III* 1016 [1015.502000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S III* 1016 [1015.502000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 24195.71it/s]\nAdding line - S III 1012 [1012.495000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S III 1012 [1012.495000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 22924.42it/s]\nAdding line - S III* 729 [728.685000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S III* 729 [728.685000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 8935.35it/s]\nAdding line - S III* 726 [725.858000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S III* 726 [725.858000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 11110.18it/s]\nAdding line - S III 724 [724.288000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S III 724 [724.288000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 13661.81it/s]\nAdding line - S III* 703 [702.779000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S III* 703 [702.779000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 8705.11it/s]\nAdding line - S III* 700 [700.288000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S III* 700 [700.288000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9473.40it/s]\nAdding line - S III* 700 [700.150000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S III* 700 [700.150000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 11486.79it/s]\nAdding line - S III 699 [698.727000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S III 699 [698.727000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 9294.18it/s]\nAdding line - S III* 681 [680.925000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S III* 681 [680.925000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 12419.58it/s]\nAdding line - S III* 681 [680.677000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S III* 681 [680.677000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 6409.43it/s]\nAdding line - S III* 678 [678.456000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S III* 678 [678.456000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 8363.67it/s]\nAdding line - S III 678 [677.729000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S III 678 [677.729000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 7633.60it/s]\nAdding line - S IV* 1073 [1072.973000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S IV* 1073 [1072.973000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 25402.60it/s]\nAdding line - S IV* 816 [815.941000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S IV* 816 [815.941000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 25999.78it/s]\nAdding line - S IV 810 [809.656000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S IV 810 [809.656000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 25790.14it/s]\nAdding line - S IV* 754 [753.760000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S IV* 754 [753.760000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 25736.40it/s]\nAdding line - S IV* 750 [750.221000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S IV* 750 [750.221000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 25591.22it/s]\nAdding line - S IV 748 [748.393000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S IV 748 [748.393000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 26120.45it/s]\nAdding line - S IV 745 [744.904000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S IV 745 [744.904000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 26231.41it/s]\nAdding line - S IV 657 [657.319000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S IV 657 [657.319000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 25604.48it/s]\nAdding line - S V 786 [786.468000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S V 786 [786.468000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 25094.33it/s]\nAdding line - S VI 945 [944.523000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S VI 945 [944.523000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 22874.88it/s]\nAdding line - S VI 933 [933.378000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S VI 933 [933.378000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 23549.78it/s]\nAdding line - S XIV 446 [445.700000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S XIV 446 [445.700000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 50288.00it/s]\nAdding line - S XIV 418 [417.660000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - S XIV 418 [417.660000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 48467.92it/s]\nAdding line - Ar I 1067 [1066.660000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ar I 1067 [1066.660000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 32494.97it/s]\nAdding line - Ar I 1048 [1048.220000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ar I 1048 [1048.220000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 20026.86it/s]\nAdding line - Ar II* 726 [725.548530 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ar II* 726 [725.548530 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 18365.67it/s]\nAdding line - Ar II 723 [723.360560 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ar II 723 [723.360560 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 16937.64it/s]\nAdding line - Ar II 718 [718.089852 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ar II 718 [718.089852 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 27277.52it/s]\nAdding line - Ar VII 586 [585.748000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ar VII 586 [585.748000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 26276.37it/s]\nAdding line - Ca X 574 [574.010000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ca X 574 [574.010000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 27227.40it/s]\nAdding line - Ca X 558 [557.765000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ca X 558 [557.765000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 26612.97it/s]\nAdding line - Fe II 1608 [1608.450830 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Fe II 1608 [1608.450830 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 7781.64it/s]\nAdding line - Fe II 1143 [1143.225730 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Fe II 1143 [1143.225730 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 17884.00it/s]\nAdding line - Fe II 1127 [1127.098400 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Fe II 1127 [1127.098400 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 34292.03it/s]\nAdding line - Fe II 1125 [1125.447630 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Fe II 1125 [1125.447630 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 16104.47it/s]\nAdding line - Fe II 1122 [1121.974710 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Fe II 1122 [1121.974710 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 12920.93it/s]\nAdding line - Fe II 1112 [1112.048320 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Fe II 1112 [1112.048320 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 30868.31it/s]\nAdding line - Fe II 1097 [1096.876870 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Fe II 1097 [1096.876870 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 12351.61it/s]\nAdding line - Fe II 1083 [1083.420460 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Fe II 1083 [1083.420460 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 30476.85it/s]\nAdding line - Fe II 1082 [1081.875260 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Fe II 1082 [1081.875260 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 21060.93it/s]\nAdding line - Fe II 1064 [1063.971790 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Fe II 1064 [1063.971790 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 31898.14it/s]\nAdding line - Fe II 1063 [1063.176870 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Fe II 1063 [1063.176870 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 10399.43it/s]\nAdding line - Fe II 1062 [1062.153100 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Fe II 1062 [1062.153100 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 33343.05it/s]\nAdding line - Fe II 1055 [1055.261760 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Fe II 1055 [1055.261760 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 26787.75it/s]\nAdding line - Fe II 938 [937.651330 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Fe II 938 [937.651330 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 34249.77it/s]\nAdding line - Fe II 927 [926.896870 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Fe II 927 [926.896870 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 39188.74it/s]\nAdding line - Fe II 926 [926.212010 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Fe II 926 [926.212010 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 12296.95it/s]\nAdding line - Fe II 924 [923.878210 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Fe II 924 [923.878210 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 41037.13it/s]\nyt : [INFO     ] 2023-09-13 16:08:49,694 Not adding continuum Ly C: insufficient column density or out of range\nyt : [INFO     ] 2023-09-13 16:08:49,700 Applying specified line spread function.\nyt : [INFO     ] 2023-09-13 16:08:49,704 Writing spectrum to hdf5 file: LightRays/spec_all_ray1.h5.\nyt : [INFO     ] 2023-09-13 16:08:49,706 Setting instrument to Custom\nyt : [INFO     ] 2023-09-13 16:08:49,743 Allocating for 121 particles\nyt : [INFO     ] 2023-09-13 16:08:49,797 Using all 213 available lines in 'lines.txt'.\nyt : [INFO     ] 2023-09-13 16:08:49,799 Creating C_p0_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,801 Creating C_p1_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,802 Creating C_p2_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,803 Creating C_p3_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,803 Creating N_p0_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,804 Creating N_p1_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,805 Creating N_p2_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,806 Creating N_p3_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,807 Creating N_p4_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,808 Creating O_p0_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,809 Creating O_p1_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,810 Creating O_p2_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,811 Creating O_p3_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,812 Creating O_p4_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,813 Creating Ne_p4_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,814 Creating Ne_p5_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,814 Creating Ne_p6_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,815 Creating Ne_p7_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,816 Creating Na_p8_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,817 Creating Mg_p1_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,818 Creating Mg_p9_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,819 Creating Al_p1_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,820 Creating Al_p2_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,821 Creating Si_p11_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,822 Creating P_p3_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,823 Creating P_p4_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,824 Creating S_p1_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,825 Creating S_p2_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,827 Creating S_p3_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,828 Creating S_p4_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,829 Creating S_p5_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,830 Creating S_p13_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,830 Creating Ar_p0_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,831 Creating Ar_p1_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,834 Creating Ar_p6_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,835 Creating Ca_p9_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,836 Creating Fe_p1_number_density from ray's fields.\nyt : [INFO     ] 2023-09-13 16:08:49,837 Creating spectrum\nAdding line - Ly a [1215.670000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly a [1215.670000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 1868.61it/s]\nAdding line - Ly b [1025.722200 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly b [1025.722200 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 8824.70it/s]\nAdding line - Ly c [972.536740 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly c [972.536740 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 9383.06it/s]\nAdding line - Ly d [949.742980 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly d [949.742980 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 9378.68it/s]\nAdding line - Ly e [937.803400 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly e [937.803400 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 9826.56it/s]\nAdding line - Ly 6 [930.748200 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 6 [930.748200 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 9791.96it/s]\nAdding line - Ly 7 [926.225640 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 7 [926.225640 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 9977.33it/s]\nAdding line - Ly 8 [923.150300 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 8 [923.150300 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 9869.92it/s]\nAdding line - Ly 9 [920.963026 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 9 [920.963026 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 10436.40it/s]\nAdding line - Ly 10 [919.351351 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 10 [919.351351 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 11319.89it/s]\nAdding line - Ly 11 [918.129312 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 11 [918.129312 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 11005.30it/s]\nAdding line - Ly 12 [917.180525 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 12 [917.180525 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 10316.19it/s]\nAdding line - Ly 13 [916.429085 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 13 [916.429085 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 10705.67it/s]\nAdding line - Ly 14 [915.823759 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 14 [915.823759 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 11515.17it/s]\nAdding line - Ly 15 [915.328939 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 15 [915.328939 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 10831.46it/s]\nAdding line - Ly 16 [914.919249 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 16 [914.919249 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 11519.38it/s]\nAdding line - Ly 17 [914.576207 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 17 [914.576207 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 10495.82it/s]\nAdding line - Ly 18 [914.286092 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 18 [914.286092 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 11585.41it/s]\nAdding line - Ly 19 [914.038542 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 19 [914.038542 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 8535.42it/s]\nAdding line - Ly 20 [913.825614 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 20 [913.825614 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 8957.24it/s]\nAdding line - Ly 21 [913.641137 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 21 [913.641137 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 10628.81it/s]\nAdding line - Ly 22 [913.480256 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 22 [913.480256 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 11638.99it/s]\nAdding line - Ly 23 [913.339110 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 23 [913.339110 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 10609.31it/s]\nAdding line - Ly 24 [913.214596 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 24 [913.214596 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 10598.81it/s]\nAdding line - Ly 25 [913.104199 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 25 [913.104199 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 10933.11it/s]\nAdding line - Ly 26 [913.005863 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 26 [913.005863 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 10847.81it/s]\nAdding line - Ly 27 [912.917891 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 27 [912.917891 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 10770.27it/s]\nAdding line - Ly 28 [912.838877 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 28 [912.838877 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 11315.31it/s]\nAdding line - Ly 29 [912.767643 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 29 [912.767643 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 10724.83it/s]\nAdding line - Ly 30 [912.703200 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 30 [912.703200 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 10771.89it/s]\nAdding line - Ly 31 [912.644712 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 31 [912.644712 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 11037.40it/s]\nAdding line - Ly 32 [912.591467 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 32 [912.591467 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 11156.55it/s]\nAdding line - Ly 33 [912.542856 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 33 [912.542856 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 10855.99it/s]\nAdding line - Ly 34 [912.498356 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 34 [912.498356 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 10871.47it/s]\nAdding line - Ly 35 [912.457516 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 35 [912.457516 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 11022.17it/s]\nAdding line - Ly 36 [912.419946 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 36 [912.419946 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 12738.96it/s]\nAdding line - Ly 37 [912.385306 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 37 [912.385306 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 11580.88it/s]\nAdding line - Ly 38 [912.353298 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 38 [912.353298 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 12066.18it/s]\nAdding line - Ly 39 [912.323663 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly 39 [912.323663 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 11716.48it/s]\nAdding line - C I 1657 [1656.929000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - C I 1657 [1656.929000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 18273.84it/s]\nAdding line - C I 1560 [1560.309000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - C I 1560 [1560.309000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 18870.59it/s]\nAdding line - C I 1329 [1328.834000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - C I 1329 [1328.834000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 22341.82it/s]\nAdding line - C I 1280 [1280.135000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - C I 1280 [1280.135000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 17768.08it/s]\nAdding line - C I 1277 [1277.245000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - C I 1277 [1277.245000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 16251.22it/s]\nAdding line - C I 1261 [1260.735000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - C I 1261 [1260.735000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 20291.75it/s]\nAdding line - C I 1194 [1193.995000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - C I 1194 [1193.995000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 19621.71it/s]\nAdding line - C I 1193 [1193.031000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - C I 1193 [1193.031000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 19031.86it/s]\nAdding line - C I 1189 [1188.833000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - C I 1189 [1188.833000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 19181.27it/s]\nAdding line - C I 1158 [1157.910000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - C I 1158 [1157.910000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 21085.73it/s]\nAdding line - C II* 1336 [1335.663000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - C II* 1336 [1335.663000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 16735.93it/s]\nAdding line - C II 1335 [1334.532000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - C II 1335 [1334.532000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 10530.96it/s]\nAdding line - C II* 1037 [1037.018000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - C II* 1037 [1037.018000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 8722.69it/s]\nAdding line - C II 1036 [1036.337000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - C II 1036 [1036.337000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 10919.11it/s]\nyt : [INFO     ] 2023-09-13 16:08:50,512 30 out of 121 line components are unresolved.\nAdding line - C II 904 [903.962000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - C II 904 [903.962000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 3770.13it/s]\nyt : [INFO     ] 2023-09-13 16:08:50,547 26 out of 121 line components are unresolved.\nAdding line - C III 977 [977.020000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - C III 977 [977.020000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 5645.73it/s]\nAdding line - C IV 1551 [1550.772000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - C IV 1551 [1550.772000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 13605.35it/s]\nAdding line - C IV 1548 [1548.187000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - C IV 1548 [1548.187000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 13264.37it/s]\nAdding line - N I 1201 [1200.710000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - N I 1201 [1200.710000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 16715.37it/s]\nAdding line - N I 1200 [1200.223000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - N I 1200 [1200.223000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 15267.28it/s]\nAdding line - N I 1200 [1199.550000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - N I 1200 [1199.550000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 22271.63it/s]\nAdding line - N I 1135 [1134.980000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - N I 1135 [1134.980000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 23252.17it/s]\nAdding line - N I 1134 [1134.415000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - N I 1134 [1134.415000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 25193.54it/s]\nAdding line - N I 1134 [1134.165000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - N I 1134 [1134.165000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 30178.47it/s]\nyt : [INFO     ] 2023-09-13 16:08:50,635 30 out of 121 line components are unresolved.\nAdding line - N I 965 [965.041000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - N I 965 [965.041000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 26449.97it/s]\nAdding line - N I 965 [964.626000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - N I 965 [964.626000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 25035.64it/s]\nAdding line - N I 964 [963.990000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - N I 964 [963.990000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 25532.21it/s]\nAdding line - N I 954 [954.104000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - N I 954 [954.104000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 27322.97it/s]\nAdding line - N I 954 [953.970000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - N I 954 [953.970000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 22530.84it/s]\nAdding line - N I 954 [953.655000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - N I 954 [953.655000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 21699.35it/s]\nAdding line - N I 953 [953.415000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - N I 953 [953.415000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 22966.76it/s]\nAdding line - N I 952 [952.415000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - N I 952 [952.415000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 28770.81it/s]\nAdding line - N I 952 [952.303000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - N I 952 [952.303000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 29592.93it/s]\nyt : [INFO     ] 2023-09-13 16:08:50,689 18 out of 121 line components are unresolved.\nAdding line - N II 1084 [1083.990000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - N II 1084 [1083.990000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 11042.73it/s]\nyt : [INFO     ] 2023-09-13 16:08:50,702 30 out of 121 line components are unresolved.\nAdding line - N II 916 [915.612000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - N II 916 [915.612000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 11051.94it/s]\nyt : [INFO     ] 2023-09-13 16:08:50,715 29 out of 121 line components are unresolved.\nAdding line - N III 990 [989.799000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - N III 990 [989.799000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 17428.46it/s]\nyt : [INFO     ] 2023-09-13 16:08:50,725 32 out of 121 line components are unresolved.\nAdding line - N IV 765 [765.147000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - N IV 765 [765.147000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 18052.96it/s]\nAdding line - N V 1243 [1242.804000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - N V 1243 [1242.804000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 22193.06it/s]\nAdding line - N V 1239 [1238.821000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - N V 1239 [1238.821000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 21633.13it/s]\nAdding line - O I* 1306 [1306.029000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O I* 1306 [1306.029000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 16920.48it/s]\nAdding line - O I* 1305 [1304.858000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O I* 1305 [1304.858000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 15675.25it/s]\nAdding line - O I 1302 [1302.168000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O I 1302 [1302.168000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 14307.71it/s]\nyt : [INFO     ] 2023-09-13 16:08:50,775 30 out of 121 line components are unresolved.\nAdding line - O I 1039 [1039.230000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O I 1039 [1039.230000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 19821.07it/s]\nAdding line - O I 989 [988.773000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O I 989 [988.773000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 14964.51it/s]\nAdding line - O I 989 [988.655000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O I 989 [988.655000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 22122.83it/s]\nAdding line - O I 976 [976.448000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O I 976 [976.448000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 25104.32it/s]\nAdding line - O I 951 [950.885000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O I 951 [950.885000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 24493.48it/s]\nAdding line - O I 937 [936.629000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O I 937 [936.629000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 24038.42it/s]\nAdding line - O I 930 [929.517000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O I 930 [929.517000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 24660.29it/s]\nAdding line - O I 925 [924.950000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O I 925 [924.950000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 26236.26it/s]\nAdding line - O I 922 [922.008000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O I 922 [922.008000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 19080.92it/s]\nyt : [INFO     ] 2023-09-13 16:08:50,837 31 out of 121 line components are unresolved.\nAdding line - O II 834 [834.465400 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O II 834 [834.465400 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 7713.07it/s]\nAdding line - O II 833 [833.330300 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O II 833 [833.330300 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 8779.59it/s]\nAdding line - O II 833 [832.758300 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O II 833 [832.758300 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 9845.01it/s]\nAdding line - O III* 835 [835.289000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O III* 835 [835.289000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 22243.08it/s]\nAdding line - O III* 835 [835.289000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O III* 835 [835.289000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 19739.45it/s]\nAdding line - O III 833 [832.929000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O III 833 [832.929000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 19845.30it/s]\nyt : [INFO     ] 2023-09-13 16:08:50,905 32 out of 121 line components are unresolved.\nAdding line - O III* 703 [702.838000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O III* 703 [702.838000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 21163.76it/s]\nAdding line - O III 702 [702.337000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O III 702 [702.337000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 20807.66it/s]\nAdding line - O IV* 790 [790.199000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O IV* 790 [790.199000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 18080.20it/s]\nAdding line - O IV 788 [787.710000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O IV 788 [787.710000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 18381.96it/s]\nyt : [INFO     ] 2023-09-13 16:08:50,936 34 out of 121 line components are unresolved.\nAdding line - O IV* 610 [609.829000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O IV* 610 [609.829000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 18148.65it/s]\nAdding line - O IV 608 [608.397000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O IV 608 [608.397000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 18080.20it/s]\nAdding line - O IV* 555 [554.513000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O IV* 555 [554.513000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 17714.93it/s]\nAdding line - O IV 554 [554.076000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O IV 554 [554.076000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 18329.08it/s]\nAdding line - O IV 553 [553.329000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O IV 553 [553.329000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 18367.87it/s]\nAdding line - O V 630 [629.732000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O V 630 [629.732000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 23068.86it/s]\nyt : [INFO     ] 2023-09-13 16:08:50,986 30 out of 121 line components are unresolved.\nAdding line - O VI 1038 [1037.613000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O VI 1038 [1037.613000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 23327.61it/s]\nAdding line - O VI 1032 [1031.912000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - O VI 1032 [1031.912000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 18696.75it/s]\nyt : [INFO     ] 2023-09-13 16:08:51,002 34 out of 121 line components are unresolved.\nAdding line - Ne V* 572 [572.335000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ne V* 572 [572.335000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 23734.63it/s]\nAdding line - Ne V* 570 [569.828000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ne V* 570 [569.828000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 23151.63it/s]\nAdding line - Ne V 568 [568.424000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ne V 568 [568.424000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 23152.70it/s]\nAdding line - Ne VI* 563 [562.805000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ne VI* 563 [562.805000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 20664.99it/s]\nAdding line - Ne VI 559 [558.603000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ne VI 559 [558.603000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 20056.44it/s]\nyt : [INFO     ] 2023-09-13 16:08:51,041 35 out of 121 line components are unresolved.\nAdding line - Ne VII 465 [465.221000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ne VII 465 [465.221000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 24839.19it/s]\nyt : [INFO     ] 2023-09-13 16:08:51,048 32 out of 121 line components are unresolved.\nAdding line - Ne VIII 780 [780.324000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ne VIII 780 [780.324000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 25033.15it/s]\nyt : [INFO     ] 2023-09-13 16:08:51,055 34 out of 121 line components are unresolved.\nAdding line - Ne VIII 770 [770.409000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ne VIII 770 [770.409000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 20456.69it/s]\nAdding line - Na IX 694 [694.150000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Na IX 694 [694.150000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 27497.62it/s]\nAdding line - Na IX 682 [681.720000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Na IX 682 [681.720000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 27708.04it/s]\nyt : [INFO     ] 2023-09-13 16:08:51,077 30 out of 121 line components are unresolved.\nAdding line - Mg II 1240 [1240.394700 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Mg II 1240 [1240.394700 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 18309.08it/s]\nAdding line - Mg II 1240 [1239.925300 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Mg II 1240 [1239.925300 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 18080.84it/s]\nyt : [INFO     ] 2023-09-13 16:08:51,093 34 out of 121 line components are unresolved.\nAdding line - Mg X 625 [624.941000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Mg X 625 [624.941000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 25636.25it/s]\nAdding line - Mg X 610 [609.793000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Mg X 610 [609.793000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 26749.39it/s]\nAdding line - Al II 1671 [1670.787400 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Al II 1671 [1670.787400 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 11794.73it/s]\nAdding line - Al III 1863 [1862.789500 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Al III 1863 [1862.789500 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 17446.58it/s]\nAdding line - Al III 1855 [1854.716400 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Al III 1855 [1854.716400 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 16513.01it/s]\nAdding line - Si II* 1817 [1816.928000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Si II* 1817 [1816.928000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 20817.99it/s]\nAdding line - Si II 1808 [1808.013000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Si II 1808 [1808.013000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 19972.88it/s]\nyt : [INFO     ] 2023-09-13 16:08:51,151 30 out of 121 line components are unresolved.\nAdding line - Si II* 1309 [1309.276000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Si II* 1309 [1309.276000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 10504.36it/s]\nAdding line - Si II 1304 [1304.370000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Si II 1304 [1304.370000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 3542.16it/s]\nAdding line - Si II* 1265 [1264.738000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Si II* 1265 [1264.738000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 5689.06it/s]\nAdding line - Si II 1260 [1260.422000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Si II 1260 [1260.422000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 2044.05it/s]\nAdding line - Si II* 1197 [1197.394000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Si II* 1197 [1197.394000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 5552.98it/s]\nAdding line - Si II* 1194 [1194.500000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Si II* 1194 [1194.500000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 2420.73it/s]\nAdding line - Si II 1193 [1193.290000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Si II 1193 [1193.290000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 2943.84it/s]\nAdding line - Si II 1190 [1190.416000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Si II 1190 [1190.416000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 5791.57it/s]\nyt : [INFO     ] 2023-09-13 16:08:51,417 32 out of 121 line components are unresolved.\nAdding line - Si II* 1024 [1023.700000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Si II* 1024 [1023.700000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 23827.89it/s]\nAdding line - Si II 1021 [1020.699000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Si II 1021 [1020.699000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 25945.49it/s]\nAdding line - Si II* 993 [992.683000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Si II* 993 [992.683000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 12231.26it/s]\nAdding line - Si II 990 [989.873000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Si II 990 [989.873000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 12535.28it/s]\nyt : [INFO     ] 2023-09-13 16:08:51,451 30 out of 121 line components are unresolved.\nAdding line - Si III 1206 [1206.500000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Si III 1206 [1206.500000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 6416.09it/s]\nyt : [INFO     ] 2023-09-13 16:08:51,471 29 out of 121 line components are unresolved.\nAdding line - Si IV 1403 [1402.770000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Si IV 1403 [1402.770000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 16107.67it/s]\nyt : [INFO     ] 2023-09-13 16:08:51,482 35 out of 121 line components are unresolved.\nAdding line - Si XII 521 [520.665000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Si XII 521 [520.665000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 34405.39it/s]\nAdding line - Si XII 499 [499.406000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Si XII 499 [499.406000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 34141.67it/s]\nyt : [INFO     ] 2023-09-13 16:08:51,493 34 out of 121 line components are unresolved.\nAdding line - P IV 951 [950.657000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - P IV 951 [950.657000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 29154.11it/s]\nyt : [INFO     ] 2023-09-13 16:08:51,500 32 out of 121 line components are unresolved.\nAdding line - P V 1128 [1128.008000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - P V 1128 [1128.008000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 19675.40it/s]\nAdding line - P V 1118 [1117.977000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - P V 1118 [1117.977000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 21523.97it/s]\nyt : [INFO     ] 2023-09-13 16:08:51,516 31 out of 121 line components are unresolved.\nAdding line - S II 1260 [1259.519000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S II 1260 [1259.519000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 17472.63it/s]\nAdding line - S II 1254 [1253.811000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S II 1254 [1253.811000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 17641.04it/s]\nAdding line - S II 1251 [1250.584000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S II 1251 [1250.584000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 18195.23it/s]\nyt : [INFO     ] 2023-09-13 16:08:51,539 34 out of 121 line components are unresolved.\nAdding line - S II 913 [912.736000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S II 913 [912.736000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 19976.05it/s]\nAdding line - S II 910 [910.485000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S II 910 [910.485000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 16787.85it/s]\nAdding line - S II 907 [906.876000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S II 907 [906.876000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 15635.32it/s]\nAdding line - S II 766 [765.684000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S II 766 [765.684000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 6639.71it/s]\nAdding line - S II 764 [764.416000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S II 764 [764.416000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 7336.33it/s]\nAdding line - S II 764 [763.656000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S II 764 [763.656000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 8773.78it/s]\nyt : [INFO     ] 2023-09-13 16:08:51,615 31 out of 121 line components are unresolved.\nAdding line - S III* 1201 [1200.966000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S III* 1201 [1200.966000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 15523.92it/s]\nAdding line - S III* 1194 [1194.058000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S III* 1194 [1194.058000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 15488.09it/s]\nAdding line - S III 1190 [1190.203000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S III 1190 [1190.203000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 14752.66it/s]\nyt : [INFO     ] 2023-09-13 16:08:51,642 32 out of 121 line components are unresolved.\nAdding line - S III* 1021 [1021.323000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S III* 1021 [1021.323000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 23818.87it/s]\nAdding line - S III* 1021 [1021.108000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S III* 1021 [1021.108000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 24444.71it/s]\nAdding line - S III* 1016 [1015.779000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S III* 1016 [1015.779000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 24229.36it/s]\nAdding line - S III* 1016 [1015.567000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S III* 1016 [1015.567000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 23948.06it/s]\nAdding line - S III* 1016 [1015.502000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S III* 1016 [1015.502000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 24450.64it/s]\nAdding line - S III 1012 [1012.495000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S III 1012 [1012.495000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 22632.15it/s]\nyt : [INFO     ] 2023-09-13 16:08:51,679 34 out of 121 line components are unresolved.\nAdding line - S III* 729 [728.685000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S III* 729 [728.685000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 11295.25it/s]\nAdding line - S III* 726 [725.858000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S III* 726 [725.858000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 13418.19it/s]\nAdding line - S III 724 [724.288000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S III 724 [724.288000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 15633.37it/s]\nAdding line - S III* 703 [702.779000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S III* 703 [702.779000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 10954.76it/s]\nAdding line - S III* 700 [700.288000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S III* 700 [700.288000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 12639.47it/s]\nAdding line - S III* 700 [700.150000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S III* 700 [700.150000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 13879.23it/s]\nAdding line - S III 699 [698.727000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S III 699 [698.727000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 12316.57it/s]\nAdding line - S III* 681 [680.925000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S III* 681 [680.925000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 15544.05it/s]\nAdding line - S III* 681 [680.677000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S III* 681 [680.677000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 8295.42it/s]\nAdding line - S III* 678 [678.456000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S III* 678 [678.456000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 10506.12it/s]\nAdding line - S III 678 [677.729000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S III 678 [677.729000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 9863.73it/s]\nyt : [INFO     ] 2023-09-13 16:08:51,803 32 out of 121 line components are unresolved.\nAdding line - S IV* 1073 [1072.973000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S IV* 1073 [1072.973000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 29664.44it/s]\nyt : [INFO     ] 2023-09-13 16:08:51,809 34 out of 121 line components are unresolved.\nAdding line - S IV* 816 [815.941000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S IV* 816 [815.941000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 30878.31it/s]\nAdding line - S IV 810 [809.656000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S IV 810 [809.656000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 29916.58it/s]\nAdding line - S IV* 754 [753.760000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S IV* 754 [753.760000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 29154.11it/s]\nAdding line - S IV* 750 [750.221000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S IV* 750 [750.221000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 27972.91it/s]\nAdding line - S IV 748 [748.393000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S IV 748 [748.393000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 29556.43it/s]\nAdding line - S IV 745 [744.904000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S IV 745 [744.904000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 29709.96it/s]\nAdding line - S IV 657 [657.319000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S IV 657 [657.319000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 28287.33it/s]\nAdding line - S V 786 [786.468000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S V 786 [786.468000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 20703.24it/s]\nAdding line - S VI 945 [944.523000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S VI 945 [944.523000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 19611.01it/s]\nAdding line - S VI 933 [933.378000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S VI 933 [933.378000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 19169.58it/s]\nyt : [INFO     ] 2023-09-13 16:08:51,874 36 out of 121 line components are unresolved.\nAdding line - S XIV 446 [445.700000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S XIV 446 [445.700000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 35064.55it/s]\nAdding line - S XIV 418 [417.660000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - S XIV 418 [417.660000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 35086.54it/s]\nyt : [INFO     ] 2023-09-13 16:08:51,885 34 out of 121 line components are unresolved.\nAdding line - Ar I 1067 [1066.660000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ar I 1067 [1066.660000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 42828.16it/s]\nAdding line - Ar I 1048 [1048.220000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ar I 1048 [1048.220000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 42238.71it/s]\nAdding line - Ar II* 726 [725.548530 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ar II* 726 [725.548530 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 31386.66it/s]\nyt : [INFO     ] 2023-09-13 16:08:51,900 35 out of 121 line components are unresolved.\nAdding line - Ar II 723 [723.360560 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ar II 723 [723.360560 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 30853.70it/s]\nAdding line - Ar II 718 [718.089852 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ar II 718 [718.089852 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 43494.34it/s]\nAdding line - Ar VII 586 [585.748000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ar VII 586 [585.748000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 23373.11it/s]\nAdding line - Ca X 574 [574.010000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ca X 574 [574.010000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 27112.50it/s]\nAdding line - Ca X 558 [557.765000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ca X 558 [557.765000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 27154.92it/s]\nyt : [INFO     ] 2023-09-13 16:08:51,932 31 out of 121 line components are unresolved.\nAdding line - Fe II 1608 [1608.450830 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Fe II 1608 [1608.450830 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 14687.65it/s]\nyt : [INFO     ] 2023-09-13 16:08:51,941 34 out of 121 line components are unresolved.\nAdding line - Fe II 1143 [1143.225730 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Fe II 1143 [1143.225730 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 27541.26it/s]\nAdding line - Fe II 1127 [1127.098400 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Fe II 1127 [1127.098400 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 38725.59it/s]\nAdding line - Fe II 1125 [1125.447630 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Fe II 1125 [1125.447630 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 28991.21it/s]\nAdding line - Fe II 1122 [1121.974710 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Fe II 1122 [1121.974710 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 21478.96it/s]\nAdding line - Fe II 1112 [1112.048320 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Fe II 1112 [1112.048320 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 36199.40it/s]\nAdding line - Fe II 1097 [1096.876870 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Fe II 1097 [1096.876870 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 21269.29it/s]\nAdding line - Fe II 1083 [1083.420460 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Fe II 1083 [1083.420460 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 33907.07it/s]\nAdding line - Fe II 1082 [1081.875260 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Fe II 1082 [1081.875260 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 35013.32it/s]\nAdding line - Fe II 1064 [1063.971790 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Fe II 1064 [1063.971790 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 34870.20it/s]\nAdding line - Fe II 1063 [1063.176870 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Fe II 1063 [1063.176870 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 17999.37it/s]\nAdding line - Fe II 1062 [1062.153100 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Fe II 1062 [1062.153100 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 35140.44it/s]\nAdding line - Fe II 1055 [1055.261760 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Fe II 1055 [1055.261760 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 35897.33it/s]\nAdding line - Fe II 938 [937.651330 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Fe II 938 [937.651330 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 40323.38it/s]\nAdding line - Fe II 927 [926.896870 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Fe II 927 [926.896870 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 42136.16it/s]\nAdding line - Fe II 926 [926.212010 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Fe II 926 [926.212010 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 26582.68it/s]\nAdding line - Fe II 924 [923.878210 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Fe II 924 [923.878210 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 39116.85it/s]\nyt : [INFO     ] 2023-09-13 16:08:52,020 Not adding continuum Ly C: insufficient column density or out of range\nyt : [INFO     ] 2023-09-13 16:08:52,024 Applying specified line spread function.\nyt : [INFO     ] 2023-09-13 16:08:52,027 Writing spectrum to hdf5 file: LightRays/spec_all_ray2.h5.\n\n\n\nfrom IPython.display import display, Image\n\n\n# Load the saved spectra and plot them together\nsg1 = trident.load_spectrum('LightRays/spec_all_ray1.h5')\nsg2 = trident.load_spectrum('LightRays/spec_all_ray2.h5')\n\nfilename = 'LightRays/COS130_1150_1300_allLines.png'\nplot_spectrum_Chad([sg1.lambda_field,sg2.lambda_field],\n        [sg1.flux_field,sg2.flux_field],\n        flux_limits = [0,1.5],\n        stagger=0.0, step=[True, True],\n        label=['Ray 1', 'Ray 2'], filename=filename)\n\nfig = Image(filename=filename)\ndisplay(fig)\n\nyt : [INFO     ] 2023-09-13 16:08:52,034 Setting instrument to Custom\n/var/folders/9t/skzkm_4169g47x95n5b3b5_h0000gn/T/ipykernel_3715/2514315971.py:250: MatplotlibDeprecationWarning: The label function was deprecated in Matplotlib 3.1 and will be removed in 3.8. Use Tick.label1 instead.\n  tick.label.set_fontsize(14)\n/var/folders/9t/skzkm_4169g47x95n5b3b5_h0000gn/T/ipykernel_3715/2514315971.py:252: MatplotlibDeprecationWarning: The label function was deprecated in Matplotlib 3.1 and will be removed in 3.8. Use Tick.label1 instead.\n  tick.label.set_fontsize(14)\nyt : [INFO     ] 2023-09-13 16:08:52,052 Writing spectrum plot to png file: LightRays/COS130_1150_1300_allLines.png\n\n\n\n\n\nWe see a lot of overlapping absorption lines between Ray 1 and Ray 2, except for around 1210-1220 A. Let’s zoom in on this region and label a few lines that I know are interesting: Si III 1206.5 and Lyman alpha.\n\nlambda_min,lambda_max = 1200, 1230\nsg1 = trident.SpectrumGenerator(lambda_min=lambda_min, lambda_max=lambda_max, dlambda=0.01)\nsg1.make_spectrum(ray1, lines={'Si III 1206','Ly a'}, use_peculiar_velocity=True,\n                  store_observables=True)\nsg1.add_milky_way_foreground()\nsg1.apply_lsf(filename='avg_COS.txt')\nsg1.add_gaussian_noise(30)\nsg1.save_spectrum('LightRays/spec_SiIII_Lya_ray1.h5')\n\nsg2 = trident.SpectrumGenerator(lambda_min=lambda_min, lambda_max=lambda_max, dlambda=0.01)\nsg2.make_spectrum(ray2, lines={'Si III 1206', 'Ly a'}, use_peculiar_velocity=True,\n                 store_observables=True)\nsg2.add_milky_way_foreground()\nsg2.apply_lsf(filename='avg_COS.txt')\nsg2.add_gaussian_noise(30)\nsg2.save_spectrum('LightRays/spec_SiIII_Lya_ray2.h5')\n\nplot_spectrum_Chad([sg1.lambda_field,sg2.lambda_field],\n        [sg1.flux_field,sg2.flux_field],\n        flux_limits = [0,1.5],\n        features={'Si III' : 1206.5, 'Ly a' : 1215.67},\n        stagger=0.0, step=[True, True],\n        label=['Ray 1', 'Ray 2'], filename='LightRays/COS130_1200_1230_SiIII_Lya.png')\n\ndisplay(Image(\"LightRays/COS130_1200_1230_SiIII_Lya.png\", embed=True))\n\nyt : [INFO     ] 2023-09-13 16:08:52,150 Setting instrument to Custom\nyt : [INFO     ] 2023-09-13 16:08:52,153 Creating spectrum\nyt : [INFO     ] 2023-09-13 16:08:52,157 33 out of 107 line components are unresolved.\nAdding line - Si III 1206 [1206.500000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Si III 1206 [1206.500000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 5012.98it/s]\nAdding line - Ly a [1215.670000 A]:   0%|          | 0/107 [00:00&lt;?, ?it/s]Adding line - Ly a [1215.670000 A]:  22%|██▏       | 24/107 [00:00&lt;00:00, 236.08it/s]Adding line - Ly a [1215.670000 A]:  99%|█████████▉| 106/107 [00:00&lt;00:00, 853.08it/s]\nyt : [INFO     ] 2023-09-13 16:08:52,306 Not adding continuum Ly C: insufficient column density or out of range\nyt : [INFO     ] 2023-09-13 16:08:52,309 Applying specified line spread function.\nyt : [INFO     ] 2023-09-13 16:08:52,310 Writing spectrum to hdf5 file: LightRays/spec_SiIII_Lya_ray1.h5.\nyt : [INFO     ] 2023-09-13 16:08:52,313 Setting instrument to Custom\nyt : [INFO     ] 2023-09-13 16:08:52,315 Creating spectrum\nyt : [INFO     ] 2023-09-13 16:08:52,320 30 out of 121 line components are unresolved.\nAdding line - Si III 1206 [1206.500000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Si III 1206 [1206.500000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 4164.77it/s]\nAdding line - Ly a [1215.670000 A]:   0%|          | 0/121 [00:00&lt;?, ?it/s]Adding line - Ly a [1215.670000 A]:  99%|█████████▉| 120/121 [00:00&lt;00:00, 1853.34it/s]\nyt : [INFO     ] 2023-09-13 16:08:52,418 Not adding continuum Ly C: insufficient column density or out of range\nyt : [INFO     ] 2023-09-13 16:08:52,420 Applying specified line spread function.\nyt : [INFO     ] 2023-09-13 16:08:52,423 Writing spectrum to hdf5 file: LightRays/spec_SiIII_Lya_ray2.h5.\n/var/folders/9t/skzkm_4169g47x95n5b3b5_h0000gn/T/ipykernel_3715/2514315971.py:250: MatplotlibDeprecationWarning: The label function was deprecated in Matplotlib 3.1 and will be removed in 3.8. Use Tick.label1 instead.\n  tick.label.set_fontsize(14)\n/var/folders/9t/skzkm_4169g47x95n5b3b5_h0000gn/T/ipykernel_3715/2514315971.py:252: MatplotlibDeprecationWarning: The label function was deprecated in Matplotlib 3.1 and will be removed in 3.8. Use Tick.label1 instead.\n  tick.label.set_fontsize(14)\nyt : [INFO     ] 2023-09-13 16:08:52,442 Writing spectrum plot to png file: LightRays/COS130_1200_1230_SiIII_Lya.png\n\n\n\n\n\nThe width of absorption lines, like the Lyman Alpha line shown above, are partially due to turbulent velocity dispersion, i.e. the random motions of fluid elements that redshift and blueshift the light we see on Earth.\n\n# Calculate the velocity standard deviation weighted by density\n\n # Profile plots\nraydat = ray1.all_data()\nlosvel = (raydat['velocity_los']/100000)*raydat['density'] \nprint(\"Value along ray 1: \")\nprint(np.std(losvel))\n\nraydat = ray2.all_data()\nlosvel = (raydat['velocity_los']/100000)*raydat['density'] \nprint(\"Value along ray 2: \")\nprint(np.std(losvel))\n\nValue along ray 1: \n2.3913198647901003e-24 g/(cm**2*s)\nValue along ray 2: \n6.301139948527954e-25 g/(cm**2*s)\n\n\nTurbulent motions are indeed stronger along ray 1 than ray 2, likely accounting for the increased line broadening. In fact, this interpretation makes physical sense given that ray 1 is closer to the LMC center where more star formation and wind driving occur, generating larger velocity and kinetic energy fluctuations."
  },
  {
    "objectID": "posts/LMC_Part1/index.html#other-useful-mock-observables-gamma-ray-emission-faraday-rotation-measure-and-h-alpha-emission",
    "href": "posts/LMC_Part1/index.html#other-useful-mock-observables-gamma-ray-emission-faraday-rotation-measure-and-h-alpha-emission",
    "title": "Data Analysis and Visualization for Astrophysics Research: Part I",
    "section": "Other useful mock observables: gamma-ray emission, Faraday rotation measure, and H-alpha emission",
    "text": "Other useful mock observables: gamma-ray emission, Faraday rotation measure, and H-alpha emission\n\nSome outcomes of this analysis can be found in Bustard et al. 2020 ApJ (and various AAS poster presentations by UW undergraduates), Ciampa et al. 2021 ApJ, and Livingston et al. 2023, in prep.\n\n\nFaraday rotation measure\nThe line-of-sight (LOS) magnetic field strength is commonly probed by Faraday rotation measure, an integral along the LOS with dependence on the LOS magnetic field strength, B\\(_{\\rm LOS}\\) and the electron number density, \\(n_{e}\\).\nBecause \\(n_{e}\\) depends on the ionization state of the gas, this is more complex to calculate and can’t be simply pulled out from yt. Here, we’ve loaded in tables of \\(n_{e}/n_{H}\\) as a function of the hydrogen number density \\(n_{H}\\) and the gas temperature. We then use a bilinear interpolator to interpolate between values in this 2D space.\n\nfrom numpy import *\nimport h5py\nimport matplotlib.cm as cm\nimport matplotlib.mlab as mlab\nfrom yt.fields import interpolated_fields\nfrom yt.fields.field_detector import \\\n    FieldDetector\nfrom yt.utilities.linear_interpolators import \\\n    BilinearFieldInterpolator\n\nds = yt.load(\"windCRs_hdf5_plt_cnt_0050\")\n\n# pre-tabulated text files for ne/nH, T, nH\nnenh = loadtxt('nenh.txt')\ntempTxt = loadtxt('Temps.txt')\nnHTxt = loadtxt('NH.txt')\n\n# ne/nH\ndef _nenh_interp(field, data):\n    # use yt's bilinear interpolator:\n    interp = BilinearFieldInterpolator(nenh,boundaries=[tempTxt,nHTxt],field_names=['temperature','number_density'], truncate=True)\n \n    field_data = interp(data)\n    field_data[field_data &lt; 0] = 0.01 # if extrapolating, set a floor value of 1/100 -- this is a bit arbitrary and could be improved in the future\n    return(field_data)\n \nds.add_field(('gas','nenh_interp'), function=_nenh_interp, units=\"\", take_log=False, display_name=r'$n_{e} / n_{H}$', sampling_type=\"cell\")\n\ndef _log10_nenh_interp(field, data): # create the log10 version too just for ease\n    return(np.log10(data['nenh_interp']))\n\nds.add_field(('gas','log10_nenh_interp'), function=_log10_nenh_interp, units=\"\", take_log=False, display_name=r'log10($n_{e} / n_{H}$)', sampling_type=\"cell\")\n\n\n# Rotation measure\ndef _rotationMeasure(field, data):\n    # use yt's bilinear interpolator:\n    interp = BilinearFieldInterpolator(nenh,boundaries=[tempTxt,nHTxt], \n                                    field_names=['temperature','number_density'], truncate=True)\n    field_data = interp(data)\n    field_data[field_data &lt; 0] = 0.01\n    return 0.812*field_data*data['number_density']*((-0.561*data['magnetic_field_x'] \n                        + 0.099*data['magnetic_field_y']\n                        + 0.822*data['magnetic_field_z'])/1.e-6)*(1./3.0856e18)\n \nds.add_field(('gas','rotationMeasure'), function=_rotationMeasure, units=\"gauss/cm**3\", take_log=False, display_name='Rotation Measure', sampling_type=\"cell\")\n\n# B_LOS\ndef _losBField(field,data):\n    return (-0.561*data['magnetic_field_x'] + 0.099*data['magnetic_field_y'] + 0.822*data['magnetic_field_z'])/1.e-6\n \nds.add_field(('gas','losBField'), function=_losBField, units=\"gauss\", take_log=False, display_name='Line of Sight B Field', sampling_type=\"cell\")\n\nyt : [INFO     ] 2023-09-13 16:08:52,633 Parameters: current_time              = 3.156010944496386e+16\nyt : [INFO     ] 2023-09-13 16:08:52,634 Parameters: domain_dimensions         = [96 96 96]\nyt : [INFO     ] 2023-09-13 16:08:52,634 Parameters: domain_left_edge          = [-6.171e+22 -6.171e+22 -6.171e+22]\nyt : [INFO     ] 2023-09-13 16:08:52,635 Parameters: domain_right_edge         = [1.234e+23 1.234e+23 1.234e+23]\nyt : [INFO     ] 2023-09-13 16:08:52,635 Parameters: cosmological_simulation   = 0\n\n\n\n# Now plot the rotation measure as a mock observation\n\n# first create a FITS file with rotation measure we can call on later\nprj_fits = yt.FITSOffAxisProjection(ds,L,'rotationMeasure',center = (0,0,0), width=(10, 'kpc'))\nsky_center = [79.0,-68.68] # in degrees\nsky_scale = (4123.71, \"arcsec/kpc\") # could also use a YTQuantity\nprj_fits.create_sky_wcs(sky_center, sky_scale, ctype=[\"RA---TAN\",\"DEC--TAN\"],  replace_old_wcs=True)\nprj_fits.writeto(\"LMC_Ram_evolved_Faraday.fits\", overwrite=True)\nimage_data = fits.getdata('LMC_Ram_evolved_Faraday.fits')\n \n# open the FITS file and plot rotation measure\nfig = aplpy.FITSFigure(\"LMC_Ram_evolved_Faraday.fits\")\nfig.add_grid()\nfig.show_colorscale(cmap=\"RdBu\",stretch = 'linear',vmin=-100, vmax = 100)\nfig.tick_labels.set_xposition(\"top\")\nfig.ticks.set_xspacing(8.0)\nfig.ticks.set_yspacing(8.0)\nfig.add_colorbar()\nfig.tick_labels.set_xformat('hh:mm')\nfig.tick_labels.set_yformat('dd')\nfig.colorbar.set_axis_label_text(r'Rotation Measure $\\phi$ (rad $ m^{-2}$)')\n\nyt : [INFO     ] 2023-09-13 16:09:19,729 Making a FITS image of field rotationMeasure\n\n\n\n\n\nOn the surface, this map looks quite reasonable…|RM| is highest near the center of the galaxy where both the density and magnetic field strength are presumably the largest, and due to the tilt of the galaxy, the B field is primarily directed toward us in the lower half and away from us in the upper half of the image. However, these RM values are quite a bit higher than what is observed, suggesting that either the electron density or magnetic field strength are too high. Or it could be that neither is, on average, too large, but they are too large in the same locations.\nLet’s take a look at both \\(n_{e}/n_{H}\\) and \\(B_{los}\\)\n\n# Now plot ne/nH to get a sense of how ionized the gas is.\nregion = ds.box([0.0,-6.17E22,-3.0856E22],[1.2E23,6.17E22,3.0856E22])\nL = [-0.561,0.099,0.822] # vector normal to cutting plane\nd = yt.OffAxisProjectionPlot(ds, L, 'nenh_interp',weight_field=\"density\",center=[0.0,0.0,0.0], width=(10, 'kpc'),fontsize=20)\nd.set_cmap(field=\"nenh_interp\", cmap='PuOr')\nd.set_colorbar_label(\"nenh_interp\", \"$n_{e}/n_{H}$\")\nd.annotate_timestamp()\nd.show()\n\nd = yt.OffAxisProjectionPlot(ds, L, \"losBField\",weight_field=\"density\",center=[0.0,0.0,0.0], width=(10, 'kpc'),fontsize=20)\nd.set_cmap(field=\"losBField\", cmap='cmr.wildfire')\nd.set_colorbar_label(\"losBField\", r\"B$_{\\rm LOS}$\")\nd.annotate_timestamp()\nd.show()\n\nyt : [INFO     ] 2023-09-13 16:09:20,808 xlim = -15428387904811624824832.000000 15428387904811624824832.000000\nyt : [INFO     ] 2023-09-13 16:09:20,808 ylim = -15428387904811624824832.000000 15428387904811624824832.000000\nyt : [INFO     ] 2023-09-13 16:09:20,808 zlim = -92554999999999995019264.000000 92554999999999995019264.000000\nyt : [INFO     ] 2023-09-13 16:09:20,809 Making a fixed resolution buffer of (('gas', 'nenh_interp')) 800 by 800\nyt : [INFO     ] 2023-09-13 16:09:40,122 xlim = -15428387904811624824832.000000 15428387904811624824832.000000\nyt : [INFO     ] 2023-09-13 16:09:40,122 ylim = -15428387904811624824832.000000 15428387904811624824832.000000\nyt : [INFO     ] 2023-09-13 16:09:40,122 zlim = -92554999999999995019264.000000 92554999999999995019264.000000\nyt : [INFO     ] 2023-09-13 16:09:40,123 Making a fixed resolution buffer of (('gas', 'losBField')) 800 by 800\n\n\n\n\n\n\n\n\nLet’s also make a phase plot showing cell-by-cell how the gas density, temperature, and ionization given by \\(n_{e}/n_{H}\\) correlate.\n\ndd = ds.all_data()\nplot = yt.PhasePlot(dd, \"number_density\", \"temperature\", \"log10_nenh_interp\",fontsize = 28)\n# plot.set_cmap(field=\"magnetic_field_magnitude\", cmap='viridis')\nplot.set_cmap(field=\"log10_nenh_interp\", cmap='viridis')\nplot.set_ylim(1.E3,1.E7)\nplot.set_xlim(1.E-3,1.E1)\n# plot.set_zlim(field='magnetic_field_magnitude', zmin=1.E-8, zmax=1.E-5)\nplot.set_zlim(field='log10_nenh_interp', zmin=-2, zmax=0.1)\nplot.show()\n\n\n\n\n\n# Check a mass-weighted PDF of ne/nh -- how much of the gas (by mass) has hit the floor I've imposed on ne/nh?\nplot = yt.ProfilePlot(\n    dd,\n    (\"gas\", \"log10_nenh_interp\"),\n    [(\"gas\", \"rotationMeasure\")],accumulation=False\n)\nplot.set_log((\"gas\", \"log10_nenh_interp\"), False)\nplot.show()\n\n\n\n\nA huge fraction of the rotation measure comes from cells with floored ne/nh = 1e-2. Yikes!\nThe lesson: gas ionization is hard to model, and this implementation, which assumes photoionization equilibrium and neglects things like local ionizing radiation fields from massive stars in the LMC disk, is too naive. Nevertheless, the LMC simulations presented here provide useful comparisons to observations when a thorough analysis is done and their limitations are known\n\n\nH \\(\\alpha\\) emission – probing ~ 2e4 K gas\nThis shows a quick example of how to measure H-alpha emission from a series of simulation snapshots. For our example, we just use one snapshot, but this script can be applied to any other FLASH simulation output with a “cooling” output variable capturing the radiative cooling rate (See Bustard and Gronke 2022 for a use-case involving idealized simulations of the Magellanic Stream compared to real H-alpha observations)\nInput: Set of simulation snapshots Output: A rough image, a table with columns = (time, max emission, average emission, standard deviation of emission)\n\nimport matplotlib as plt\nfrom yt.units import Mpc\nimport collections\nimport glob\n\nyt.enable_parallelism()\n\npUnit = YTQuantity(1, 'cm**2/s**2')\n\n# New function that takes in cooling rate ('cloo') and converts it to H-alpha luminosity\ndef CoolingmR(field,data):\n    return data['cloo']*YTQuantity(1,'erg/cm**3/s')/(4.0*np.pi*2.41e-10) # in mR\n\nyt.add_field((\"gas\",\"CoolingmR\"), function=CoolingmR, sampling_type='local',units=\"erg/cm**3/s\")\n\n\nnum_procs = 1\n\n# Could load in more than one data file and create a table with H-alpha statistics,\n# but here we only use one data file (the one we downloaded)\nfns = glob.glob('windCRs_hdf5_plt_cnt_0050*')\nfns.sort()\n\n# Create an empty dictionary\ndata = {}\n\n# Iterate through each dataset in the Time Series (using piter allows it\n# to happen in parallel automatically across available processors)\nfor sto,fn in yt.parallel_objects(fns,num_procs,storage=data):\n    ds = yt.load(fn)\n    ad = ds.all_data()\n    # ds.periodicity = (True,True,True) # deprecated\n    ds.coordinates.x_axis[1] = 0\n    ds.coordinates.y_axis[1] = 2\n    \n    L = [-0.561,0.099,0.822] # vector normal to cutting plane\n    d = yt.OffAxisProjectionPlot(ds, L, 'CoolingmR',center=[0.0,0.0,0.0], width=(10, 'kpc'),fontsize=20)\n    d.set_cmap(field=\"CoolingmR\", cmap='PuOr')\n    d.set_colorbar_label(\"CoolingmR\", \"$mR$\")\n    d.annotate_timestamp()\n    d.show()\n    \n    dense_ad = ad.cut_region(['obj[\"CoolingmR\"] &gt; 0.0'])\n    # c = yt.ProjectionPlot(ds, 1, \"cloo\",weight_field=\"density\",fontsize=28)\n    proj = ds.proj(\"CoolingmR\",1,data_source=dense_ad)\n    \n    #degrade the resolution to [nx,ny] -- we can play with this to mock the effects of lower resolution instruments\n    frb = proj.to_frb(width=(100,'kpc'),resolution=[128,128]) \n    my_image = np.array(frb[\"CoolingmR\"])\n    \n    #filtered_image = np.array(filter(lambda num: num &gt; 0.0, my_image))\n    filtered_image = my_image[my_image &gt; 0.0]\n    \n    # get max, avg, and standard deviation of cells with &gt;0 emission\n    maxCol = np.amax(filtered_image)\n    avgCol = np.average(filtered_image)\n    stdCol = np.std(filtered_image)\n\n    # Fill the dictionary with extrema and redshift information for each dataset\n    time = ds.current_time.in_units('Myr')\n    sto.result_id = ds.basename\n    sto.result = (time, maxCol, avgCol, stdCol)\n   # data[ds.basename] = (time, extrema, var)\n# Convert dictionary to ordered dictionary to get the right order\n\nfilename = \"cool_file_res_128.txt\"\ncool_file = open(filename,\"w\")#write mode\n#if yt.is_root()\ncool_file.write(\"Dataset                          Time       Lum Max    Lum average    Lum std dev       \\n\")\ncool_file.write(\"---------------------------------------------------------------------------------------------------------------------------------------    \\n \")\nfor fn, val in sorted(data.items()):\n    cool_file.write(\"%s       %05.3f      %5.3g mR     %5.3g mR     %5.3g mR       \\n\" % \\\n           (fn, val[0], val[1], val[2], val[3]))    \n\ncool_file.close()\n\ncool_file = open(filename, \"r\")\nprint(cool_file.read())\n\nyt : [ERROR    ] 2023-09-13 16:10:17,799 Could not enable parallelism: mpi4py is not installed\nyt : [INFO     ] 2023-09-13 16:10:17,851 Parameters: current_time              = 3.156010944496386e+16\nyt : [INFO     ] 2023-09-13 16:10:17,852 Parameters: domain_dimensions         = [96 96 96]\nyt : [INFO     ] 2023-09-13 16:10:17,852 Parameters: domain_left_edge          = [-6.171e+22 -6.171e+22 -6.171e+22]\nyt : [INFO     ] 2023-09-13 16:10:17,852 Parameters: domain_right_edge         = [1.234e+23 1.234e+23 1.234e+23]\nyt : [INFO     ] 2023-09-13 16:10:17,852 Parameters: cosmological_simulation   = 0\nyt : [INFO     ] 2023-09-13 16:10:19,083 xlim = -15428387904811624824832.000000 15428387904811624824832.000000\nyt : [INFO     ] 2023-09-13 16:10:19,083 ylim = -15428387904811624824832.000000 15428387904811624824832.000000\nyt : [INFO     ] 2023-09-13 16:10:19,083 zlim = -92554999999999995019264.000000 92554999999999995019264.000000\nyt : [INFO     ] 2023-09-13 16:10:19,084 Making a fixed resolution buffer of (('gas', 'CoolingmR')) 800 by 800\nyt : [INFO     ] 2023-09-13 16:10:30,192 Projection completed\nyt : [INFO     ] 2023-09-13 16:10:30,194 Making a fixed resolution buffer of (CoolingmR) 128 by 128\n\n\n\n\n\nDataset                          Time       Lum Max    Lum average    Lum std dev       \n---------------------------------------------------------------------------------------------------------------------------------------    \n windCRs_hdf5_plt_cnt_0050       1000.080      4.11e+07 mR     8.7e+04 mR     1.89e+06 mR       \n\n\n\nThis script can be extended further to show H-alpha emission across different velocity channels, for instance to see how slow vs fast-moving gas compares in emission. This is left as an exercise for now, but see Ciampa+ 2020 (incl. Bustard) for an example."
  },
  {
    "objectID": "posts/LMC_Part2/LMC_Part2.html",
    "href": "posts/LMC_Part2/LMC_Part2.html",
    "title": "Data Analysis and Visualization for Astrophysics Research: Part II",
    "section": "",
    "text": "In this post, we’ll continue to analyze simulations of the Large Magellanic Cloud, but this time, folding in some real observational data obtained by my collaborators Yong Zheng (University of Rochester) and Kirill Tchernyshov (University of Washington). We will plot values of “ram pressure” across the LMC disk and tabulate them at specific points where there are observational sightlines; this part, followed by an analysis of correlations between local ram pressure, star formation rate (shown below), and observed ion abundances forms the basis for a funded Hubble Space Telescope (HST) grant (PI: Yong Zheng, Co-I: Chad Bustard)"
  },
  {
    "objectID": "posts/LMC_Part2/LMC_Part2.html#mock-observables-from-models-of-the-large-magellanic-cloud",
    "href": "posts/LMC_Part2/LMC_Part2.html#mock-observables-from-models-of-the-large-magellanic-cloud",
    "title": "Data Analysis and Visualization for Astrophysics Research: Part II",
    "section": "Mock Observables from Models of the Large Magellanic Cloud",
    "text": "Mock Observables from Models of the Large Magellanic Cloud\n\nAuthor: Chad Bustard\nThis notebook goes through a few analyses of simulation data, specifically the simulations published in Bustard et al. 2020 of ram pressure stripping and supernova-driven outflows from the Large Magellanic Cloud.\n\nMain publication: https://ui.adsabs.harvard.edu/abs/2020ApJ…893…29B/abstract"
  },
  {
    "objectID": "posts/LMC_Part2/LMC_Part2.html#ram-pressure",
    "href": "posts/LMC_Part2/LMC_Part2.html#ram-pressure",
    "title": "Data Analysis and Visualization for Astrophysics Research: Part II",
    "section": "Ram Pressure",
    "text": "Ram Pressure\nThe ram pressure acting on an object moving with velocity \\(\\bf{v_{infall}}\\) through a static background gas with density \\(\\rho\\) is, in most basic form:\n(most basic) \\(P_{\\rm ram} = \\rho v_{\\rm infall}^{2}\\)\nThis pressure counteracts the gravitational “tension” force of the galaxy to strip gas from the galaxy.\n\nTowards the local ram pressure in different regions of the LMC\nThe above equation would describe the interaction between a galaxy and a headwind if the velocity offset between the galaxy and headwind were constant across the disk; however, to understand how ram pressure affects local star formation rates, local ion abundances, etc. we would like a more local description of ram pressure.\nTo a first approximation, we can assume the LMC is a rotating disk infalling at an arbitrary inclination. We have to account for the fact that, from the perspective of the LMC, some parts of the disk are rotating into the headwind while others are rotating away from the headwind. Therefore, the velocity vector of interest is really \\(v_{\\rm infall} - v_{\\rm rot}\\), where \\(v_{\\rm rot}(x_{\\rm LMC}, y_{\\rm LMC}) = (v_{\\rm rot,x}, v_{\\rm rot,y})\\) is the rotation vector (in coordinates such that \\(\\hat{z}\\) is along the axis of disk rotation, and \\(v_{\\rm infall} = (v_{x}, v_{y}, v_{z})\\) is the infall velocity vector of the LMC “as a whole” motivated by observations and more complete simulations of the LMC’s interaction (including it’s complicated gravitational dance with it’s neighboring SMC):\n(including rotation) \\({\\bf P}_{\\rm ram}(x_{LMC}, y_{LMC}) = \\rho \\left((v_{x}-v_{rot,x})^{2}\\hat{x} + (v_{y}-v_{rot,y})^{2}\\hat{y} + v_{z}^{2}\\hat{z}\\right)\\).\nNote that we’ve written the ram pressure as a vector and with dependence on LMC-centered coordinates \\((x_{LMC}, y_{LMC})\\) in the plane perpendicular to the disk axis of rotation. So to know the ram pressure impacting any point \\((x_{LMC}, y_{LMC})\\) across the disk, we need the following ingredients:\n1. The density of the Milky Way halo at the current LMC location. \n\n2. The infall velocity vector -- really, a combination of the LMC's infall velocity and a sense of it's inclination during infall (you can imagine a disk \"slicing\" through the air vs a disk \"pancaking\" through the air).\n\n3. The rotation vector\nIn our paper, we more fully account for how, over the course of its infall, the LMC changes both its distance from the Milky Way (and therefore the increasing halo gas density it interacts with as it gets closer and closer to the Milky Way) and its inclination.\nIt’s not worth going into all the observational measurements that lead to estimates of the halo gas density, the infall velocity, etc. Just know that \\(\\rho\\), \\(v_{x}\\), \\(v_{y}\\), \\(v_{z}\\) are well-motivated but, of course, have some uncertainties.\nThe rotation velocity can be calculated by assuming hydrostatic balance between the LMC’s centrifugal force and gravitational force…that’s how it is done in the Fortran-based FLASH simulations I created to model the LMC…but in the next cell, we’ll just take the rotation velocity as a function of \\(r_{LMC}\\) from Salem et al. 2015.\nAn additional complexity we can account for is that galaxies are constantly expelling and accreting gas through the disk-halo interface, here the region between the LMC’s disk and its surrounding circumgalactic medium. These gas flows are “very” challenging to model correctly (no model is ever correct, some are just closer to reality), but my own simulations (Bustard et al. 2020) are a first-of-their-kind attempt to model the supernova-driven galactic outflows from the LMC, connecting them to the temporally and spatially resolved star formation history that ultimately determines the time and locations of galactic outflow driving. Check out the .F90 file in this directory for the initial condition and boundary condition code (the FLASH code this is built on is proprietary, so that’s all I can post on Github).\nGeneralizing \\(v_{\\rm rot}\\) to \\(v_{\\rm local} = (v_{loc,x},v_{loc,y},v_{loc,z})\\), which includes all velocity information relative to the frame of rest of the LMC, the full ram pressure can be estimated as\n(including local gas flows) \\({\\bf P}_{\\rm ram}(x_{LMC}, y_{LMC}, z_{LMC}) = \\rho \\left((v_{x}-v_{loc,x})^{2}\\hat{x} + (v_{y}-v_{loc,y})^{2}\\hat{y} + (v_{z} - v_{loc,z})^{2}\\hat{z}\\right)\\)\nNote that, while rotation doesn’t alter ram pressure in the \\(\\hat{z}\\) direction, other gas flows surely can and could be included here.\n\n# Import all the packages we need\nimport yt\nimport trident\nfrom trident import LightRay\nimport aplpy\nimport numpy as np\n#import matplotlib as plt\nfrom yt.units.yt_array import YTQuantity\nfrom yt import YTArray\nimport h5py\nimport matplotlib.pyplot as plt\nfrom astropy.io import fits\nfrom astropy.table import Table\nfrom astropy import wcs\nfrom astropy.wcs import WCS\nimport csv\nimport pandas as pd\n\n!pip install cmasher # a nice repository of colorblind-friendly, aesthetically pleasing colormaps\nimport cmasher as cmr\n\nRequirement already satisfied: cmasher in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (1.6.3)\nRequirement already satisfied: colorspacious&gt;=1.1.0 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from cmasher) (1.1.2)\nRequirement already satisfied: e13tools&gt;=0.9.4 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from cmasher) (0.9.6)\nRequirement already satisfied: matplotlib&gt;=2.2.4 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from cmasher) (3.7.2)\nRequirement already satisfied: numpy&gt;=1.16.0 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from cmasher) (1.25.2)\nRequirement already satisfied: contourpy&gt;=1.0.1 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib&gt;=2.2.4-&gt;cmasher) (1.1.0)\nRequirement already satisfied: cycler&gt;=0.10 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib&gt;=2.2.4-&gt;cmasher) (0.11.0)\nRequirement already satisfied: fonttools&gt;=4.22.0 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib&gt;=2.2.4-&gt;cmasher) (4.42.0)\nRequirement already satisfied: kiwisolver&gt;=1.0.1 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib&gt;=2.2.4-&gt;cmasher) (1.4.4)\nRequirement already satisfied: packaging&gt;=20.0 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib&gt;=2.2.4-&gt;cmasher) (23.1)\nRequirement already satisfied: pillow&gt;=6.2.0 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib&gt;=2.2.4-&gt;cmasher) (10.0.0)\nRequirement already satisfied: pyparsing&lt;3.1,&gt;=2.3.1 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib&gt;=2.2.4-&gt;cmasher) (3.0.9)\nRequirement already satisfied: python-dateutil&gt;=2.7 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from matplotlib&gt;=2.2.4-&gt;cmasher) (2.8.2)\nRequirement already satisfied: six&gt;=1.5 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib&gt;=2.2.4-&gt;cmasher) (1.16.0)\n\n\n\n# Get the HDF5 file and additional CSV files from Google Drive link\n!pip install --upgrade --no-cache-dir gdown\nimport gdown\n\ngdown.download_folder(\"https://drive.google.com/drive/folders/1cctLEApfIzfdfa0RpisgtKnJzfck4uJK\")\n\nRequirement already satisfied: gdown in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (4.7.1)\nRequirement already satisfied: filelock in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from gdown) (3.12.2)\nRequirement already satisfied: requests[socks] in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from gdown) (2.31.0)\nRequirement already satisfied: six in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from gdown) (1.16.0)\nRequirement already satisfied: tqdm in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from gdown) (4.65.0)\nRequirement already satisfied: beautifulsoup4 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from gdown) (4.12.2)\nRequirement already satisfied: soupsieve&gt;1.2 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from beautifulsoup4-&gt;gdown) (2.4.1)\nRequirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from requests[socks]-&gt;gdown) (3.2.0)\nRequirement already satisfied: idna&lt;4,&gt;=2.5 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from requests[socks]-&gt;gdown) (3.4)\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from requests[socks]-&gt;gdown) (2.0.4)\nRequirement already satisfied: certifi&gt;=2017.4.17 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from requests[socks]-&gt;gdown) (2023.7.22)\nRequirement already satisfied: PySocks!=1.5.7,&gt;=1.5.6 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from requests[socks]-&gt;gdown) (1.7.1)\nProcessing file 1CD7SLWtpcCW6QZiSvv8AS82auvZAdvZt aligned_LMC_SFR_RP_rotation_ChadVersion.csv\nProcessing file 13-BB9KNw6GKtKcJbURRa37SLuzQHwqIk ullyses_lmc_dr5_chadedits.csv\nProcessing file 1BCvIdYOA3VZj91Fdh9seOki0ww3Rqiky windCRs_hdf5_plt_cnt_0050\nBuilding directory structure completed\n\n\nRetrieving folder list\nRetrieving folder list completed\nBuilding directory structure\nDownloading...\nFrom: https://drive.google.com/uc?id=1CD7SLWtpcCW6QZiSvv8AS82auvZAdvZt\nTo: /Users/chadbustard/Desktop/Quarto_Website/myblog/bustardchad.github.io/posts/LMC_Part2/LMC_high_mass/aligned_LMC_SFR_RP_rotation_ChadVersion.csv\n  0%|          | 0.00/4.21k [00:00&lt;?, ?B/s]100%|██████████| 4.21k/4.21k [00:00&lt;00:00, 4.19MB/s]\nDownloading...\nFrom: https://drive.google.com/uc?id=13-BB9KNw6GKtKcJbURRa37SLuzQHwqIk\nTo: /Users/chadbustard/Desktop/Quarto_Website/myblog/bustardchad.github.io/posts/LMC_Part2/LMC_high_mass/ullyses_lmc_dr5_chadedits.csv\n  0%|          | 0.00/2.09k [00:00&lt;?, ?B/s]100%|██████████| 2.09k/2.09k [00:00&lt;00:00, 6.42MB/s]\nDownloading...\nFrom (uriginal): https://drive.google.com/uc?id=1BCvIdYOA3VZj91Fdh9seOki0ww3Rqiky\nFrom (redirected): https://drive.google.com/uc?id=1BCvIdYOA3VZj91Fdh9seOki0ww3Rqiky&confirm=t&uuid=b304b642-ff8e-47d3-8765-05e1b839e731\nTo: /Users/chadbustard/Desktop/Quarto_Website/myblog/bustardchad.github.io/posts/LMC_Part2/LMC_high_mass/windCRs_hdf5_plt_cnt_0050\n  0%|          | 0.00/668M [00:00&lt;?, ?B/s]  0%|          | 2.62M/668M [00:00&lt;00:25, 26.1MB/s]  1%|          | 5.24M/668M [00:00&lt;00:29, 22.6MB/s]  1%|▏         | 8.91M/668M [00:00&lt;00:25, 26.0MB/s]  2%|▏         | 13.6M/668M [00:00&lt;00:19, 33.2MB/s]  3%|▎         | 18.4M/668M [00:00&lt;00:17, 37.4MB/s]  3%|▎         | 23.1M/668M [00:00&lt;00:16, 40.0MB/s]  4%|▍         | 27.8M/668M [00:00&lt;00:15, 41.7MB/s]  5%|▍         | 32.5M/668M [00:00&lt;00:14, 42.9MB/s]  6%|▌         | 37.2M/668M [00:00&lt;00:14, 43.5MB/s]  6%|▋         | 41.9M/668M [00:01&lt;00:14, 43.9MB/s]  7%|▋         | 46.7M/668M [00:01&lt;00:14, 44.4MB/s]  8%|▊         | 51.4M/668M [00:01&lt;00:14, 44.0MB/s]  8%|▊         | 56.1M/668M [00:01&lt;00:14, 42.0MB/s]  9%|▉         | 60.8M/668M [00:01&lt;00:14, 42.6MB/s] 10%|▉         | 66.1M/668M [00:01&lt;00:13, 44.5MB/s] 11%|█         | 71.8M/668M [00:01&lt;00:12, 46.8MB/s] 11%|█▏        | 76.5M/668M [00:01&lt;00:13, 43.0MB/s] 12%|█▏        | 82.3M/668M [00:01&lt;00:12, 45.8MB/s] 13%|█▎        | 87.0M/668M [00:02&lt;00:12, 45.0MB/s] 14%|█▎        | 91.8M/668M [00:02&lt;00:12, 45.0MB/s] 14%|█▍        | 96.5M/668M [00:02&lt;00:13, 43.8MB/s] 15%|█▌        | 101M/668M [00:02&lt;00:13, 41.5MB/s]  16%|█▌        | 106M/668M [00:02&lt;00:13, 42.8MB/s] 17%|█▋        | 111M/668M [00:02&lt;00:13, 42.7MB/s] 17%|█▋        | 116M/668M [00:02&lt;00:12, 44.0MB/s] 18%|█▊        | 121M/668M [00:02&lt;00:12, 44.4MB/s] 19%|█▊        | 125M/668M [00:02&lt;00:12, 44.7MB/s] 19%|█▉        | 130M/668M [00:03&lt;00:12, 44.8MB/s] 20%|██        | 135M/668M [00:03&lt;00:13, 40.5MB/s] 21%|██        | 141M/668M [00:03&lt;00:11, 46.4MB/s] 22%|██▏       | 146M/668M [00:03&lt;00:11, 44.9MB/s] 23%|██▎       | 151M/668M [00:03&lt;00:12, 41.9MB/s] 23%|██▎       | 156M/668M [00:03&lt;00:12, 41.4MB/s] 24%|██▍       | 160M/668M [00:03&lt;00:12, 42.0MB/s] 25%|██▍       | 166M/668M [00:03&lt;00:11, 43.5MB/s] 25%|██▌       | 170M/668M [00:04&lt;00:11, 44.2MB/s] 26%|██▌       | 175M/668M [00:04&lt;00:11, 44.5MB/s] 27%|██▋       | 180M/668M [00:04&lt;00:10, 44.7MB/s] 28%|██▊       | 185M/668M [00:04&lt;00:10, 44.8MB/s] 28%|██▊       | 189M/668M [00:04&lt;00:12, 37.1MB/s] 29%|██▉       | 193M/668M [00:04&lt;00:17, 27.9MB/s] 30%|██▉       | 199M/668M [00:04&lt;00:14, 31.7MB/s] 31%|███       | 204M/668M [00:04&lt;00:12, 36.0MB/s] 31%|███       | 208M/668M [00:05&lt;00:15, 29.3MB/s] 32%|███▏      | 212M/668M [00:05&lt;00:14, 31.4MB/s] 32%|███▏      | 217M/668M [00:05&lt;00:12, 34.8MB/s] 33%|███▎      | 222M/668M [00:05&lt;00:11, 37.4MB/s] 34%|███▍      | 226M/668M [00:05&lt;00:11, 39.5MB/s] 35%|███▍      | 231M/668M [00:05&lt;00:10, 41.3MB/s] 35%|███▌      | 236M/668M [00:05&lt;00:10, 42.3MB/s] 36%|███▌      | 241M/668M [00:05&lt;00:09, 42.9MB/s] 37%|███▋      | 245M/668M [00:06&lt;00:09, 43.6MB/s] 37%|███▋      | 250M/668M [00:06&lt;00:09, 44.3MB/s] 38%|███▊      | 255M/668M [00:06&lt;00:09, 44.7MB/s] 39%|███▉      | 260M/668M [00:06&lt;00:09, 42.8MB/s] 40%|███▉      | 265M/668M [00:06&lt;00:08, 45.7MB/s] 40%|████      | 270M/668M [00:06&lt;00:08, 45.3MB/s] 41%|████      | 275M/668M [00:06&lt;00:08, 44.7MB/s] 42%|████▏     | 279M/668M [00:06&lt;00:09, 40.5MB/s] 43%|████▎     | 284M/668M [00:06&lt;00:09, 41.2MB/s] 43%|████▎     | 289M/668M [00:07&lt;00:09, 42.2MB/s] 44%|████▍     | 294M/668M [00:07&lt;00:08, 42.7MB/s] 45%|████▍     | 298M/668M [00:07&lt;00:08, 43.1MB/s] 45%|████▌     | 303M/668M [00:07&lt;00:08, 43.0MB/s] 46%|████▌     | 308M/668M [00:07&lt;00:08, 43.7MB/s] 47%|████▋     | 312M/668M [00:07&lt;00:08, 44.1MB/s] 47%|████▋     | 317M/668M [00:07&lt;00:07, 44.5MB/s] 48%|████▊     | 322M/668M [00:07&lt;00:07, 44.8MB/s] 49%|████▉     | 327M/668M [00:07&lt;00:07, 45.1MB/s] 50%|████▉     | 331M/668M [00:07&lt;00:07, 45.1MB/s] 50%|█████     | 336M/668M [00:08&lt;00:07, 44.7MB/s] 51%|█████     | 341M/668M [00:08&lt;00:07, 45.4MB/s] 52%|█████▏    | 346M/668M [00:08&lt;00:07, 45.5MB/s] 52%|█████▏    | 350M/668M [00:08&lt;00:06, 45.5MB/s] 53%|█████▎    | 355M/668M [00:08&lt;00:06, 45.4MB/s] 54%|█████▍    | 360M/668M [00:08&lt;00:06, 45.3MB/s] 55%|█████▍    | 364M/668M [00:08&lt;00:06, 43.6MB/s] 55%|█████▌    | 369M/668M [00:08&lt;00:06, 43.6MB/s] 56%|█████▌    | 374M/668M [00:08&lt;00:06, 44.6MB/s] 57%|█████▋    | 379M/668M [00:09&lt;00:06, 44.8MB/s] 57%|█████▋    | 384M/668M [00:09&lt;00:06, 44.8MB/s] 58%|█████▊    | 388M/668M [00:09&lt;00:06, 44.5MB/s] 59%|█████▉    | 393M/668M [00:09&lt;00:06, 44.6MB/s] 60%|█████▉    | 398M/668M [00:09&lt;00:06, 44.5MB/s] 60%|██████    | 403M/668M [00:09&lt;00:05, 45.1MB/s] 61%|██████    | 407M/668M [00:09&lt;00:05, 45.1MB/s] 62%|██████▏   | 412M/668M [00:09&lt;00:05, 45.2MB/s] 62%|██████▏   | 417M/668M [00:09&lt;00:05, 43.7MB/s] 63%|██████▎   | 422M/668M [00:10&lt;00:05, 44.0MB/s] 64%|██████▍   | 426M/668M [00:10&lt;00:06, 34.9MB/s] 64%|██████▍   | 430M/668M [00:10&lt;00:08, 29.7MB/s] 65%|██████▌   | 435M/668M [00:10&lt;00:07, 31.7MB/s] 66%|██████▌   | 439M/668M [00:10&lt;00:06, 35.0MB/s] 66%|██████▋   | 444M/668M [00:10&lt;00:06, 36.3MB/s] 67%|██████▋   | 449M/668M [00:10&lt;00:05, 39.4MB/s] 68%|██████▊   | 454M/668M [00:10&lt;00:05, 40.3MB/s] 69%|██████▊   | 459M/668M [00:11&lt;00:04, 42.6MB/s] 69%|██████▉   | 463M/668M [00:11&lt;00:04, 43.2MB/s] 70%|███████   | 468M/668M [00:11&lt;00:04, 43.8MB/s] 71%|███████   | 473M/668M [00:11&lt;00:04, 44.1MB/s] 71%|███████▏  | 478M/668M [00:11&lt;00:04, 44.6MB/s] 72%|███████▏  | 482M/668M [00:11&lt;00:04, 45.0MB/s] 73%|███████▎  | 487M/668M [00:11&lt;00:04, 44.2MB/s] 74%|███████▎  | 492M/668M [00:11&lt;00:03, 45.4MB/s] 74%|███████▍  | 497M/668M [00:11&lt;00:03, 45.4MB/s] 75%|███████▌  | 502M/668M [00:12&lt;00:03, 45.3MB/s] 76%|███████▌  | 506M/668M [00:12&lt;00:03, 43.3MB/s] 76%|███████▋  | 511M/668M [00:12&lt;00:03, 44.1MB/s] 77%|███████▋  | 516M/668M [00:12&lt;00:03, 44.4MB/s] 78%|███████▊  | 521M/668M [00:12&lt;00:03, 40.7MB/s] 79%|███████▊  | 525M/668M [00:12&lt;00:03, 41.9MB/s] 79%|███████▉  | 530M/668M [00:12&lt;00:03, 42.8MB/s] 80%|████████  | 535M/668M [00:12&lt;00:03, 43.7MB/s] 81%|████████  | 539M/668M [00:12&lt;00:02, 44.2MB/s] 81%|████████▏ | 544M/668M [00:12&lt;00:02, 44.5MB/s] 82%|████████▏ | 549M/668M [00:13&lt;00:02, 44.9MB/s] 83%|████████▎ | 554M/668M [00:13&lt;00:02, 44.9MB/s] 84%|████████▎ | 558M/668M [00:13&lt;00:02, 43.8MB/s] 84%|████████▍ | 563M/668M [00:13&lt;00:02, 44.2MB/s] 85%|████████▍ | 568M/668M [00:13&lt;00:02, 44.5MB/s] 86%|████████▌ | 573M/668M [00:13&lt;00:02, 44.7MB/s] 86%|████████▋ | 577M/668M [00:13&lt;00:02, 44.6MB/s] 87%|████████▋ | 582M/668M [00:13&lt;00:01, 45.0MB/s] 88%|████████▊ | 587M/668M [00:13&lt;00:01, 45.1MB/s] 88%|████████▊ | 591M/668M [00:14&lt;00:01, 43.8MB/s] 89%|████████▉ | 596M/668M [00:14&lt;00:01, 43.8MB/s] 90%|████████▉ | 601M/668M [00:14&lt;00:01, 45.3MB/s] 91%|█████████ | 606M/668M [00:14&lt;00:01, 40.8MB/s] 91%|█████████▏| 611M/668M [00:14&lt;00:01, 42.3MB/s] 92%|█████████▏| 616M/668M [00:14&lt;00:01, 43.2MB/s] 93%|█████████▎| 620M/668M [00:14&lt;00:01, 43.8MB/s] 93%|█████████▎| 625M/668M [00:14&lt;00:01, 42.6MB/s] 94%|█████████▍| 630M/668M [00:14&lt;00:00, 42.8MB/s] 95%|█████████▍| 635M/668M [00:15&lt;00:00, 44.3MB/s] 96%|█████████▌| 640M/668M [00:15&lt;00:00, 44.6MB/s] 96%|█████████▋| 644M/668M [00:15&lt;00:00, 44.9MB/s] 97%|█████████▋| 649M/668M [00:15&lt;00:00, 44.9MB/s] 98%|█████████▊| 654M/668M [00:15&lt;00:00, 40.5MB/s] 98%|█████████▊| 658M/668M [00:15&lt;00:00, 33.6MB/s] 99%|█████████▉| 663M/668M [00:15&lt;00:00, 36.5MB/s]100%|█████████▉| 667M/668M [00:15&lt;00:00, 38.8MB/s]100%|██████████| 668M/668M [00:15&lt;00:00, 41.9MB/s]\nDownload completed\n\n\n['/Users/chadbustard/Desktop/Quarto_Website/myblog/bustardchad.github.io/posts/LMC_Part2/LMC_high_mass/aligned_LMC_SFR_RP_rotation_ChadVersion.csv',\n '/Users/chadbustard/Desktop/Quarto_Website/myblog/bustardchad.github.io/posts/LMC_Part2/LMC_high_mass/ullyses_lmc_dr5_chadedits.csv',\n '/Users/chadbustard/Desktop/Quarto_Website/myblog/bustardchad.github.io/posts/LMC_Part2/LMC_high_mass/windCRs_hdf5_plt_cnt_0050']\n\n\n\n# Rotation velocity from Salem+ 2015\n# In the form I obtained it, the velocity is tabulated as a function of cylindrical radius (zero radius is the center of the LMC)\n\n# Let's use scipy to fit an exponential curve to our data \nfrom scipy.optimize import curve_fit\n \ndef func(x,a,b,c):\n    return a * np.exp(-b * x) + c\n\n# radius in units of kiloparsecs (kpc)\nr_data = [0.025,0.091,0.223,0.364,0.496,0.709,0.84,1.043,1.316,1.569,1.893,2.227,2.642,3.107,3.573,4.038,4.464,4.879,5.294,5.698,6.144,6.579,6.953,7.308,7.763,8.381,9.008,9.524, 9.975]\n\n# rotational velocity\nv_data = [21.671,25.196,30.809,35.64,40.47,45.822,49.086,53.264,58.355,62.533,66.449,69.582,72.715,75.718,77.546,79.373,80.287,81.07,81.593,81.984,82.115,82.245,82.245,81.984,  82.115,81.854,81.723,81.07,80.94]\n\n\nr_arr = np.arange(0.01,10,0.01)\npopt, pcov = curve_fit(func, r_data, v_data)\n#print(popt)\nplt.plot(r_data,v_data,label=\"From Salem2015\")\nplt.plot(r_arr, func(r_arr, *popt), 'r-', label='fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt))\nplt.xlabel(\"x (kpc)\")\nplt.ylabel(\"Velocity (km/s)\")\nplt.legend()\nplt.show()\n\n\n\n\nThis curve with appropriate values for a, b, c fits the data extremely well (that functional form is physically motivated, so I knew it would work well), so let’s take the magnitude of the velocity to be \\(v(r) = a e^{-br} + c\\) from now on and proceed to calculate the ram pressure.\nFor the remainder of this notebook, we employ the yt package, a visualization and analysis toolkit for astrophysics: https://yt-project.org/. We first create a new function for the “most basic” ram pressure given the “headwind” \\(v_{\\rm infall}\\), and then the next order ram pressure that also takes into account the disk rotation \\(v_{\\rm rot}\\) into/away from the headwind.\n\n# define new functions for ram pressure\n\ndef _ramPres_norot(field, data): # ram pressure #1, NOT including rotation effect or local gas flows\n        # density of the Milky Way halo at present-day position of LMC is rho = 1.65e-28 g/cm^3\n        # v_infall = (220, 159, 192) km/s\n        val = 1.65e-28*YTQuantity(1,'g/cm**3')*((220.0*1e5*data['ones']*YTQuantity(1,'cm/s'))**2.0 + (159.0*1e5*data['ones']*YTQuantity(1,'cm/s'))**2.0 + (192.0*1e5*data['ones']*YTQuantity(1,'cm/s'))**2.0)\n        return val\n\nyt.add_field((\"gas\",\"ramPres_norot\"), function=_ramPres_norot, sampling_type='local',units=\"dyne/cm**2\")\n\n\ndef _ramPres_rot(field, data): # ram pressure #2, including rotation effect but not local gas flows\n        rad = np.sqrt((data['x']**2.0 + data['y']**2.0)) # radius from center of LMC\n        velrot_y = 1.e5*func(rad,*popt)*data['x']/rad*YTQuantity(1,'cm/s') # v_y in units of km/s\n        velrot_x = 1.e5*func(rad,*popt)*data['y']/rad*YTQuantity(1,'cm/s') # v_x\n        \n        # density of the Milky Way halo at present-day position of LMC is rho = 1.65e-28 g/cm^3\n        # v_infall = (220, 159, 192) km/s\n        val = 1.65e-28*YTQuantity(1,'g/cm**3')*((220.0*1e5*data['ones']*YTQuantity(1,'cm/s') - velrot_x)**2.0 + (159.0*1e5*data['ones']*YTQuantity(1,'cm/s') - velrot_y)**2.0 + (192.0*1e5*data['ones']*YTQuantity(1,'cm/s'))**2.0)\n        return val\n\nyt.add_field((\"gas\",\"ramPres_rot\"), function=_ramPres_rot, sampling_type='local',units=\"dyne/cm**2\")\n\n\n# load in the dataset and set line of sight vector L\nds = yt.load(\"LMC_high_mass/windCRs_hdf5_plt_cnt_0050\")\ndd = ds.all_data()\n\nL = [-0.561,0.099,0.822] # vector normal to cutting plane\nnorth_vector = [0,0,1]\n\nsky_center = [79.0,-68.68] # in degrees\nsky_scale = (4123.71, \"arcsec/kpc\") # could also use a YTQuantity\n\n# Restrict our plot to just the galaxy (cells with an ISM tag &gt; 0.6)\ncut_data = dd.cut_region('(obj[\"ism \"] &gt; 0.6)')\n\n# Make plots along the line of sight and save as FITS files for future access\nprj_fits = yt.FITSOffAxisProjection(ds,L,'ramPres_norot',center = (0,0,0),width=(20, 'kpc'), weight_field=\"ones\",data_source=cut_data)\nprj_fits.create_sky_wcs(sky_center, sky_scale, ctype=[\"RA---TAN\",\"DEC--TAN\"], replace_old_wcs=True)\nprj_fits.writeto(\"LMC_ram_RP_norotate.fits\", overwrite=True)\n\nprj_fits = yt.FITSOffAxisProjection(ds,L,'ramPres_rot',center = (0,0,0),width=(20, 'kpc'), weight_field=\"ones\",data_source=cut_data)\nsky_center = [79.0,-68.68] # in degrees\nsky_scale = (4123.71, \"arcsec/kpc\") # could also use a YTQuantity\nprj_fits.create_sky_wcs(sky_center, sky_scale, ctype=[\"RA---TAN\",\"DEC--TAN\"], replace_old_wcs=True)\nprj_fits.writeto(\"LMC_ram_RP_rotate.fits\", overwrite=True)\n\nyt : [INFO     ] 2023-09-13 16:07:21,263 Parameters: current_time              = 3.156010944496386e+16\nyt : [INFO     ] 2023-09-13 16:07:21,263 Parameters: domain_dimensions         = [96 96 96]\nyt : [INFO     ] 2023-09-13 16:07:21,264 Parameters: domain_left_edge          = [-6.171e+22 -6.171e+22 -6.171e+22]\nyt : [INFO     ] 2023-09-13 16:07:21,264 Parameters: domain_right_edge         = [1.234e+23 1.234e+23 1.234e+23]\nyt : [INFO     ] 2023-09-13 16:07:21,264 Parameters: cosmological_simulation   = 0\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/unyt/array.py:1906: RuntimeWarning: invalid value encountered in divide\n  out_arr = func(\nyt : [INFO     ] 2023-09-13 16:07:31,100 Making a FITS image of field ramPres_norot\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/unyt/array.py:1906: RuntimeWarning: invalid value encountered in divide\n  out_arr = func(\nyt : [INFO     ] 2023-09-13 16:07:46,206 Making a FITS image of field ramPres_rot\n\n\n\nimage_data_norot = fits.getdata('LMC_ram_RP_norotate.fits')\nimage_data_rot = fits.getdata('LMC_ram_RP_rotate.fits')\nprint(\"image type: \" + str(type(image_data_rot)))\nprint(\"shape of image: \" +str(image_data_rot.shape))\n\n# create a quick plotting function we can use again\ndef plot_fits(fits_file):\n    fig = aplpy.FITSFigure(fits_file)\n    fig.add_grid()\n    fig.show_colorscale(cmap=\"kamae_r\",stretch = 'linear', vmin=1E-13, vmax = 3.5E-13)\n    fig.tick_labels.set_xposition(\"top\")\n    fig.ticks.set_xspacing(8.0)\n    fig.ticks.set_yspacing(8.0)\n    fig.add_colorbar()\n \n    # fig.tick_labels.set_xformat('hh:mm')\n    fig.tick_labels.set_xformat('dd')\n    fig.tick_labels.set_yformat('dd')\n    # fig.set_theme('pretty')\n    fig.colorbar.show(log_format=False)\n    fig.colorbar.set_font(size=20)\n    #fig.show()\n\n# plot ram pressure with and without rotation\nplot_fits(\"LMC_ram_RP_norotate.fits\")\nplot_fits(\"LMC_ram_RP_rotate.fits\")\n\nimage type: &lt;class 'numpy.ndarray'&gt;\nshape of image: (512, 512)\n\n\n\n\n\n\n\n\nThe top panel, not accounting for rotation, obviously shows a constant ram pressure across the whole disk since there is no dependence on position. The bottom panel, however, reflects that the true ram pressure is highest in the lower left corner where the disk is rotating into the headwind. Let’s overlay some observational sightlines and tabulate ram pressure for each sightline."
  },
  {
    "objectID": "posts/LMC_Part2/LMC_Part2.html#reading-in-sightlines",
    "href": "posts/LMC_Part2/LMC_Part2.html#reading-in-sightlines",
    "title": "Data Analysis and Visualization for Astrophysics Research: Part II",
    "section": "Reading in sightlines",
    "text": "Reading in sightlines\nWe read in sightlines from a pre-made CSV file that provides RA, DEC coordinates for each one\n\n# Read in table of (RA, DEC) values for sightlines through the LMC\ninputArr = np.genfromtxt('LMC_high_mass/ullyses_lmc_dr5_chadedits.csv',delimiter=',',invalid_raise=False)\nra_data = inputArr[:,0]\nra_data = ra_data[1:len(ra_data)]\ndec_data = inputArr[:,1]\ndec_data = dec_data[1:len(dec_data)]\n\nLet’s take a quick look at the file header for the ram pressure FITS file we created. It shows the “World Coordinate System (WCS)” keywords, including the type of axes we are using (RA–TAN and DEC–TAN) and the number of points along each axis (512 x 512)\n\nf = fits.open(\"LMC_ram_RP_rotate.fits\")\nw = wcs.WCS(f[0].header)\nprint(w)\n\nWCS Keywords\n\nNumber of WCS axes: 2\nCTYPE : 'RA---TAN'  'DEC--TAN'  \nCRVAL : 79.0  -68.68  \nCRPIX : 256.5  256.5  \nPC1_1 PC1_2  : 1.0  0.0  \nPC2_1 PC2_2  : 0.0  1.0  \nCDELT : -0.0447451171875  0.0447451171875  \nNAXIS : 512  512\n\n\nWe’ll make use of Astropy’s built-in transformations to map from world coordinates to pixel coordinates. That way we can figure out where each sightline, given to us in world coordinates, lies on our simulation grid: https://python4astronomers.github.io/astropy/wcs.html\n\n# convert from world to pixel coords\nra_test, dec_test = w.wcs_world2pix(ra_data, dec_data, 1)\n\n# Make some quick plots \nplt.plot(ra_data,ra_test)\nplt.xlabel(\"RA Inputs\")\nplt.ylabel(\"Pixel Outputs\")\nplt.show()\n\nplt.plot(dec_data,dec_test)\nplt.xlabel(\"DEC Inputs\")\nplt.ylabel(\"Pixel Outputs\")\nplt.show()\n\n\n\n\n\n\n\n\n# access the ram pressure values from ramPres_rot file\nram_arr = f[\"ramPres_rot\"].data\n\nrp_pixel_coords = []\nfor j in range(0,len(ra_data)):\n    ra, dec = w.wcs_world2pix(ra_data[j], dec_data[j], 1)\n    \n    # \n    ra = int(ra)\n    dec = int(dec)\n    rp_pixel_coords.append(ram_arr[dec,ra])\n\n\n# Open the CSV file using Pandas, call it df\ndf = pd.read_csv('LMC_high_mass/ullyses_lmc_dr5_chadedits.csv')\n\n# Add a column for RP -- units are dyne/cm^2\ndf['RP(dyne/cm^2)'] = rp_pixel_coords\n\n# Print the new dataframe df\nprint(df)\n \n# Plot the sightlines in RA, DEC coordinates, with color = ram pressure magnitude    \nsc = plt.scatter(ra_data,dec_data, c = rp_pixel_coords,cmap=\"Greens\")\nplt.colorbar(sc)\nplt.title(\"Ram Pressure (Rotation Included)\")\nplt.gca().invert_xaxis()\nplt.xlabel(\"RA (ICRS)\",fontsize=16)\nplt.ylabel(\"DEC (ICRS)\",fontsize=16)\nplt.tight_layout()\nplt.show()\n \n# Write df (with appended column for RP values) to a new CSV file \ndf.to_csv('RP_Rotation_dr5_Sept2022.csv')\n\n     RA(deg)  Dec(deg)  Unnamed: 2  RP(dyne/cm^2)\n0    71.7686  -67.1148         NaN   1.402618e-13\n1    72.5789  -67.6606         NaN   1.505098e-13\n2    73.4304  -68.7148         NaN   1.813268e-13\n3    73.6329  -67.2568         NaN   1.490383e-13\n4    73.7390  -70.0412         NaN   2.281196e-13\n..       ...       ...         ...            ...\n105  85.7289  -68.9485         NaN   2.372947e-13\n106  85.8042  -67.8544         NaN   2.204783e-13\n107  86.0963  -67.2414         NaN   2.106828e-13\n108  86.4664  -67.2405         NaN   2.117671e-13\n109  87.2069  -70.0661         NaN   2.493760e-13\n\n[110 rows x 4 columns]"
  },
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "Resume/CV",
    "section": "",
    "text": "Download current resume"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "From Galaxy Atmospheres to Saving Earth’s Atmosphere",
    "section": "",
    "text": "Announcing a series of blog posts spanning machine learning, climate science, galactic winds, and cosmic rays!\nYou’re probably thinking, “None of these topics are connected, and some of these words sound made up…this blog is going to be an incoherent mess, and the author must be too!”\nWell, let me explain…\n\nFrom Galaxy Atmospheres…\nI’m a computational astrophysicist by training. I got my PhD in Physics in 2020 from University of Wisconsin-Madison simulating the gas flows in and around galaxies. I particularly focused on how galaxies can drive large-scale outflows (“galactic winds”) into their surrounding atmospheres (the circumgalactic medium). For 6 years, I designed and built new astrophysics modules and integrated them with massively parallel C++ and Fortran-based codebases, ran large-scale models on some of the country’s largest supercomputers, and analyzed terabytes of data using Python-based data science tools (e.g. Numpy, Pandas, Scipy).\nI then did a 3-year postdoctoral fellowship at the Kavli Institute for Theoretical Physics at UC-Santa Barbara, where I was the principal investigator (PI) on a supercomputing grant (&gt; 15 million CPU hours) supporting multiple postdoc and PhD projects. Our main objectives were to better understand how cold clouds in galaxy atmospheres survive fluid instabilities and “rain” down on galaxies, and how relativistic charged particles called cosmic rays can significantly alter galaxies and their surroundings despite comprising only a billionth of all particles in the Universe.\nMost recently, I’ve created a &gt;10 terabyte simulation suite exploring the interplay between cosmic rays and magnetized turbulence (Bustard and Oh 2022, 2023), and using those images as training data, I’ve developed a novel technique to reveal cosmic ray properties from gas density images using convolutional neural networks (Bustard and Wu, in prep). This project is ready for journal submission, so look for a blog post about this very soon!\n\n\n…To Lots and Lots of Self-Reflection…\nI’ve greatly enjoyed my time as a computational astrophysicist, especially the diverse and intellectually stimulating collaborations and the opportunities to sculpt and advise projects for 6 junior researchers; however, I’ve also become more aware of my personal priorities that are at odds with the traditional academic route, e.g. having flexibility in work location (ask me about New Mexico and Wisconsin, two under-appreciated states I plan to spend a lot of time in), creating positive contributions to society beyond the accumulation and dissemination of knowledge, and maybe contributing a bit more financially to our family so my partner doesn’t have to bear the entire load any more.\nFor those reasons and others, I recently decided to forego a career in academia and test the job market for data science, machine learning, and software engineering roles! Instead of all roads leading to tenure-track, I’m now exploring dozens of career paths, which on one hand is very overwhelming, but on the other hand, very freeing and exciting!\n\n\n…To Saving Earth’s Atmosphere\nWhile I’m genuinely enthused to tackle complex, ambiguous problems of all sorts, one path in particular stands out: climate science, particularly data-intensive solutions to climate change such as optimized transportation, smart use of the power grid, and machine learning-informed verification and monitoring of corporate greenhouse gas emissions. During the current explosion of AI in our daily lives, from chatbots to pointed advertisements, I’m optimistic that AI can also support our necessary fight to offset global warming.\nTo that end, I recently participated in a series of lectures and tutorials at the Climate Change AI 2023 Summer School, where I greatly expanded my knowledge of clean energy funding and regulations, cutting-edge climate science research, and use-cases of machine learning in this space, from natural language processing to remote sensing and computer vision.\nStarting September 25th, I’ll be one of the few hundred Climatebase Fellows (Cohort 4) accepted out of a pool of a few thousand! I’ll spend 12 weeks connecting with other like-minded individuals from diverse academic and professional backgrounds, learning about global warming and efforts in the tech industry to slow and reverse the warming trend, and devising and executing a collaborative capstone project to present to industry professionals later this year!\n\n\nWhy create a blog?\nI’m naming this blog “From Galaxy Atmospheres to Saving Earth’s Atmosphere” partly because it’s catchier than “My Blog” but mainly because I hope it captures a story of transition from theoretical astrophysics research to applied climate technology, an area I imagine many other STEM and non-STEM PhDs would be thrilled to join but probably don’t know where to start. As I’ve found out over the last 2 years, making a career transition is extremely difficult. It first requires you to divest from your one-track career path and your past identity, which may have been engrained in you for many years; this part is the hardest and takes the longest. It then requires you to embrace uncertainty and ask others for help; this part is uncomfortable. Then it requires you to pour over your previous career and remind yourself what you’ve done, put all of that in a presentable resume, cover letter, blog, etc. and start applying; as of writing, this is my current phase.\nI hope that 5 years from now, when I’m an established climate technologist leading a successful group of diverse, remote, and enthusiastic data scientists, a data-oriented PhD will find this blog, feel empowered to make a scary career switch, learn a thing or two about the transition to industry, and see the exciting steps we’ve taken towards off-setting global warming. For now, this blog is meant to show a bit of who I am, a bit of what I’ve done as an astrophysics researcher, and a bit of what I’m currently learning as I explore the realm of clean energy and AI-informed solutions to global warming. Cheers to you for reading this far!\n\nAbove is a beautiful stock image (which looks surprisingly similar to my current desk setup) for a Quarto-generated blog post. Quarto allows you to convert things like Jupyter notebooks to pretty blog posts hosted on a variety of platforms, such as GitHub Pages."
  },
  {
    "objectID": "posts/code_timing/index.html",
    "href": "posts/code_timing/index.html",
    "title": "Code Timing and Scaling on Distributed Clusters",
    "section": "",
    "text": "For the past 5 years, I’ve been the principal investigator (PI) on multiple supercomputing allocations, totalling over 15 million CPU hours of compute time. This means I’ve written project scoping proposals and renewal proposals, demonstrating the usefulness of our team’s science to broader National Science Foundation initiatives and also demonstrating the efficiency (for instance, as the number of processors or the simulation memory requirements vary) of our modified C++ and Fortran codes on national supercomputers similar to the Exascale Frontier cluster shown below.\n\nSince this process is where research begins, I wanted to share the scaling and timing portion of my most recent proposal below. When I wrote my first proposal in 2018, I struggled to find similar examples online, so I hope this blog post benefits someone out there. If you find this useful, please share it widely, and reach out if you have questions!\nNext up will be a blog post focused on the scientific results from this project!\n\n\n\n\n  \n     Download scaling and timing document"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Blog",
    "section": "",
    "text": "Deep Learning Cosmic Ray Transport\n\n\n\n\n\n\n\nPython\n\n\nPyTorch\n\n\nCNNs\n\n\n\n\n\n\n\n\n\n\n\nJan 19, 2024\n\n\nChad Bustard\n\n\n\n\n\n\n  \n\n\n\n\nCosmic Ray Impacts on Turbulence\n\n\n\n\n\n\n\nPython\n\n\ndata analysis\n\n\nplotly\n\n\ntime series\n\n\n\n\n\n\n\n\n\n\n\nOct 5, 2023\n\n\nChad Bustard\n\n\n\n\n\n\n  \n\n\n\n\nCode Timing and Scaling on Distributed Clusters\n\n\n\n\n\n\n\nDistributed Computing\n\n\n\n\n\n\n\n\n\n\n\nSep 14, 2023\n\n\nChad Bustard\n\n\n\n\n\n\n  \n\n\n\n\nData Analysis and Visualization for Astrophysics Research: Part II\n\n\n\n\n\n\n\nPython\n\n\ndata analysis\n\n\n\n\n\n\n\n\n\n\n\nSep 12, 2023\n\n\n\n\n\n\n  \n\n\n\n\nData Analysis and Visualization for Astrophysics Research: Part I\n\n\n\n\n\n\n\nPython\n\n\ndata analysis\n\n\n\n\n\n\n\n\n\n\n\nSep 10, 2023\n\n\nChad Bustard\n\n\n\n\n\n\n  \n\n\n\n\nFrom Galaxy Atmospheres to Saving Earth’s Atmosphere\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nSep 8, 2023\n\n\nChad Bustard\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/ML_Turb/ML_BlogPost.html",
    "href": "posts/ML_Turb/ML_BlogPost.html",
    "title": "Deep Learning Cosmic Ray Transport",
    "section": "",
    "text": "I’m happy to announce that my recent paper with John Wu (Space Telescope Science Institute & Johns Hopkins University), titled “Deep Learning Cosmic Ray Transport from Density Maps of Simulated, Turbulent Gas”, is now online! In this paper, we demonstrate a novel, neural-based method to constrain cosmic ray transport solely from images of simulated, turbulent gas, and we utilize network interpretability methods (image manipulation and saliency maps) to derive new insights and highlight the transport-dependent impacts of cosmic rays on their surroundings.\n Click here to read the PDF  or wait for the official published version and arXiv link coming soon.\nThis work was generously funded by the National Science Foundation and the Gordon and Betty Moore Foundation, and it wouldn’t have been possible without the support of the Kavli Institute for Theoretical Physics, which hosted me for my postdoctoral fellowship and hosted the 10-week program “Building a Physical Understanding of Galaxy Evolution with Data-driven Astronomy” where John and I met and began this project.\nSo what are cosmic rays? What does transport mean, and why is it important? Keep reading to find out!\n\n\n\n\n\nGalaxies are complex, dynamical systems with collisional components, such as gas, and collisionless components that primarily interact through gravity, such as stars and dark matter. One of the collisional components, in addition to normal, non-relativistic gas and magnetic fields, is the cosmic ray population. These relativistic particles travel the Universe along magnetic field lines, and their interactions with non-relativistic gas are mediated by electromagnetic forces. While cosmic rays are in very low abundance compared to normal gas (only about a billionth of all particles in the Milky Way galaxy are cosmic rays), they collectively have as much energy as their less energetic, non-relativistic counterparts and, therefore, can exert a significant influence on galaxies and their surroundings. A large part of my doctoral and postdoctoral research, more-or-less, was to design and run numerical experiments on national supercomputers to model cosmic ray effects on different environments (sometimes full galaxies, sometimes idealized chunks of galaxies or the surrounding “circumgalactic medium”) incorporating modern, plasma physics-based theories of cosmic ray propagation.\n\n\n\nFrom my research and that of others in the field, the far-reaching influence of cosmic rays is coming into clearer view. For instance, cosmic ray pressure and energy transfer to gas can drive a wide variety of fluid instabilities in stratified galaxy disks (Heintz, Bustard, and Zweibel 2020) and galaxy surroundings (Tsung, Oh, and Jiang 2022), they can help ionize and pressurize cold molecular clouds where stars are born (Cesarsky and Volk 1978; Morlino and Gabici 2015), and they can help drive fantastic, galactic-scale, gaseous outflows called “galactic winds” that circulate gas throughout the Universe and help regulate star formation in galaxies (Breitschwerdt, McKenzie, and Voelk 1991; Ruszkowski, Yang, and Zweibel 2017; Farber et al. 2018; Bustard et al. 2020; Bustard and Zweibel 2021). However, a nagging uncertainty that underlies these models is how cosmic rays propagate along magnetic fields and, subsequently, how they couple to non-relativistic gas. While our theory of cosmic rays is becoming ever-more advanced, confirmation from observations eludes us.\nThe current state-of-the-art in constraining cosmic ray propagation is as follows. Phenomenological models of cosmic ray propagation are fit to a variety of direct and indirect cosmic ray indicators, for instance:\n* Gamma-ray emission from cosmic ray interactions with thermal gas\n* Radio synchrotron emission generated by cosmic ray electrons spiraling around magnetic field lines\n* Cosmic ray spallation products, i.e. the secondary by-products of direct collisions between cosmic rays of varying composition with other particles.\nObtaining these indicators or “observables” is expensive and time-consuming. Each of the three modes above is probed by a different telescope or instrument, with varying sensitivities, resolution, and sky coverage.\nOn top of that, there are limiting assumptions to the phenomenological models themselves. For instance, what is ultimately being constrained is the large-scale propagation of cosmic rays, averaged over many tangled magnetic field lines. This propagation, whose best-fit model is “diffusive”, does not tell us the fine-grained cosmic ray propagation and coupling to individual magnetic field lines, which is what we ultimately seek. At this stage, despite some very clever recent attempts to compare models to high-resolution observations (Thomas, Pfrommer, and Enßlin 2020), we have no robust, efficient way to determine the small-scale transport of cosmic rays from observations. The following work, then, is essentially in untreaded water, with no good, direct baseline for comparison.\n\n\n\nInstead of requiring “multimessenger” indicators of cosmic rays from radio emission, gamma-ray emission, etc., what if we could infer cosmic ray transport solely by observing the non-relativistic gas?\nThe main assumption underlying this hypothesis is that cosmic rays must leave distinct, transport-dependent imprints on the surrounding gas. I’ve written a  blog post  about recent research I conducted with Peng Oh at UC-Santa Barbara (Bustard and Oh 2023) on this very topic, showing that cosmic rays modify the spectra of turbulent gas and the mixture between solenoidal and compressive motions in distinct, transport-dependent ways.\nThis work combines the TBs of 3D simulation data generated in (Bustard and Oh 2023) with powerful computer vision models. Specifically, we probe whether convolutional neural networks (CNNs) can learn the underlying cosmic ray transport mode simply by observing gas density. We show that even a relatively simple network can classify unseen images to their correct category (5 total categories) with 95% accuracy!\nAdditionally, we use image manipulation and network interpretability tools to pick out the salient features of the images that led to the network decision. This allows us to discover new imprints of cosmic rays on gas, improving our fundamental understanding of how cosmic rays interact with their surroundings.\nThat’s enough introduction. Let’s dive in!\n\n\n\n\nWe generate images by manipulating 3D volume data stemming from simulations of astrophysical gas stirred in a turbulent box (imagine stirring a cup of coffee, but the ingredients are gas, magnetic fields, and cosmic rays, and the stirring utensil is a C++ module that applies random kicks to the gas). Greater detail on the simulation setup can be found in (Bustard and Oh 2023).\nTo create 2D images from 3D simulation cubes, we largely follow previous, similar work from (Peek and Burkhart 2019), which trained CNNs on MHD simulations (without cosmic rays) to learn salient imprints of magnetic fields on gas (rather than our goal to learn imprints of cosmic rays on gas). Following their lead, we create one-cell-thick slices in the plane parallel to the initial magnetic field direction (in the y-z plane in the figure below).\n\n\n\nSplitting these images into training, validation, and test sets, in this case, requires substantial care. Normally, one splits data randomly; however, imagine two images directly next to each other (zero separation in the x-direction), and imagine that one falls into the training set and one falls into the validation set. Because gaseous structures extend over multiple cells in the x-direction, there are strong correlations between these images. During training and hyperparameter tuning, the network simply memorizes the correlation, cheating its way to very high accuracies while not learning any true, salient information. This was readily apparent in our interpretability tests, with saliency maps showing seemingly random, pixel-scale junk rather than expected salient features, underscoring the need for rigorous network interpretation.\nFor this reason, we carefully separate training, validation, and test sets originating from the same 3D cube by spatial buffers. This decreases correlations between the sets. Furthermore, we generate images from 6 simulation cubes taken at different times, each snapshot separated by at least an eddy turnover time so the turbulence has randomized and erased all correlations. This decreases image correlations within each set, increasing the variety of images the network is trained and finetuned on.\nIn all, for each image set, we generate 90,000 images to train, fine-tune, and test our network (50,000 training images, 20,000 validation images, and 20,000 test images).\n\n\nThe density in each image is logarithmically scaled to bring the full range of densities to the forefront, and all images are histogram equalized and normalized to values between 0 and 1. This case, without further modifications, is called the Full Power dataset, since we retain spectral information – how much power is in perturbations at every scale. We also create another dataset, Flattened Power, where we flatten the 1D power spectrum of every image, thereby erasing spectral information that could be used to discriminate between classes. In this case, we’re interested in whether cosmic rays imprint phase differences on the gas and whether CNNs can pick up on these differences.\n\n\n\n\nThe five classes of cosmic ray transport we consider are (see also the table below):\n\nMHD – A system with no cosmic rays.\n\nCR_Advect – Includes cosmic rays that are fully locked to the gas, i.e. there is no additional slippage or transport of cosmic rays along magnetic field lines.\n\nCR_Diff_Fiducial – Includes additional cosmic ray diffusion, with a diffusion coefficient \\(\\kappa\\) that sits at a sweet-spot where cosmic rays will have maximal impact on the gas.\n\nCR_Diff100 – Includes diffusion with a diffusion coefficient 100 times greater than the fiducial case. This means cosmic rays diffuse over small-scale perturbations very quickly, generally not having a great influence on the gas.\n\nCR_withStreaming – Transport in this case includes fiducial diffusion but also includes extra terms for so-called cosmic ray “streaming.” This type of transport is fundamentally different from diffusion and, subsequently, cosmic rays interact with gas perturbations in a fundamentally different way. Streaming also adds an energy exchange term between the gas and cosmic rays that isn’t present in the purely diffusive case. Streaming generally has the strongest theoretical basis, but constraining transport to be streaming vs diffusion is very difficult using current phenomenological models and multiwavelength observations.\n\nNote that in the four scenarios where cosmic rays are present, there are equal amounts (in terms of pressure) of cosmic rays and gas. This “equipartition” roughly occurs in the Milky Way disk and could be reasonable, as well, in circumgalactic environments above the main plane of the Galactic disk. Magnetic fields in all simulations have a pressure about 10 times weaker than gas and cosmic rays, but while they have a less important dynamical influence on the system, magnetic fields serve as the important binder between cosmic rays and gas.\n\n\n\nA set of examples from each class is given below. The top row shows images with full spectral information (Full Power), and the bottom row shows a different set of images with spectral information erased (Flattened Power).\n\n\n\nNote how the MHD, CR_Advect, and CR_Diff100 classes, in particular, show sharp transitions between dense (white) and underdense (black) regions, as well as numerous small-scale structure. CR_Diff_Fiducial shows far less small-scale structure, which we believe is due to strong cosmic ray damping of gas perturbations in that “sweet-spot” diffusion regime. CR_withStreaming is somewhat intermediate.\nTo better visualize scale-dependent differences between images, we show 1D power spectra as a function of wave number \\(k\\). There are clear differences between the classes, with the MHD case showing the greatest power at intermediate scales and CR_Diff_Fiducial showing far less.\n\n\n\nPart of our exploration is to see whether convolutional neural networks can learn those spectral differences when presented with 2D images. However, we also explore what happens when we equal out those spectral differences (our Flattened Power set), leaving a network to learn solely phase differences arising due to different cosmic ray transport modes.\n\n\n\nConvolutional neural networks (CNNs) have been the workhorses of computer vision tasks for a number of years, and CNN variations remain competitive on standard computer vision benchmarks compared to newer, more advanced architectures such as Vision Transformers.\nEach layer of our network contains a 2D convolution, batch normalization, and SiLU activations (similar to other continuously differential activation functions but robust against the “dying neuron” problem possible with traditional ReLU activations).\nTo ward off overfitting, we add a dropout layer near the end of the network in between the average pooling layer and the final fully connected layer. In testing, we determined that dropping out 25% of neurons worked best, as shown in the PyTorch code below that generates our fiducial network.\ndef create_model(config):\n  model = nn.Sequential(\n      nn.Conv2d(1, 8, kernel_size=3, stride=2, padding=1),\n      nn.BatchNorm2d(8),\n      nn.SiLU(),\n      nn.Conv2d(8, 16, kernel_size=3, stride=2, padding=1),\n      nn.BatchNorm2d(16),\n      nn.SiLU(),\n      nn.Conv2d(16, 32, kernel_size=3, stride=2, padding=1),\n      nn.BatchNorm2d(32),\n      nn.SiLU(),\n      nn.Conv2d(32, 64, kernel_size=3, stride=2, padding=1),\n      nn.BatchNorm2d(64),\n      nn.SiLU(),\n      nn.AdaptiveAvgPool2d(4), # works with any input size\n      nn.Dropout(0.25)\n      nn.Flatten(),\n      nn.Linear(64*4*4,config.num_classes)\n  ).to(device)\n\nTo size our network appropriately to the dataset, we tested different numbers of layers and logged the training and validation loss, as well as other statistics such as accuracy, precision, recall, and F1 score (the harmonic mean between precision and recall). The loss for different numbers of layers is plotted below over 40 epochs.\n\n\n\nWhile somewhat volatile, the loss generally shows 4 layers to work best. Fewer layers result in higher training loss, while more layers show signs of validation loss separating from training loss (overfitting). Other parameter choices (learning rate, batch size, etc.) were similarly determined through a manual hyperparameter study.\nLoss for the Flattened Power network is shown below. In this case, overfitting was obvious after about 25 epochs, so our final, trained network was taken after only 25 epochs.\n\n\n\nIn the table below, we display several commonly used metrics for multi-class machine learning problems, which depend on the number of true positives (TP), true negatives (TN), false positives (FP), and false negatives (FN). The accuracy is defined as (TP + TN) / (TP + TN + FP + FN), the precision is defined as the TP / (TP + FP), the recall is defined as the TP / (TP + FN), and the F1 score is the harmonic mean between the purity and recall. The precision can be considered a measure of “purity” while the recall can be thought of as “completeness” for CNN predictions. In some cases, for instance for the MHD class, the network achieves high precision at the expense of recall, a common behavior that makes the F1 score a necessary metric to present.\n\n\n\nAccuracies range from 92% to 99% for the Full Power model, which is quite good! Accuracies are somewhat lower for the Flattened Power model, as expected since some distinguishing spectral differences are now thrown out, but still quite high, suggesting significant transport-dependent phase differences!\nBelow is a confusion matrix for the Full Power model, showing that the network most frequently mistakes MHD, CR_Advect, and CR_Diff100 images. This is an excellent confirmation of our expectation, since we anticipated that cosmic rays with those propagation modes leave gas primarily unaffected.\n\n\n\nMost impressively, the CR_Diff_Fiducial and CR_withStreaming classes, which differ only in that cosmic ray streaming is included in addition to fiducial diffusivity, are well-distinguished, with the network achieving 94.2% accuracy on CR_withStreaming and only rarely (3.4% of the time) confusing CR_withStreaming for the CR_Diff_Fiducial class. Instead, CR_withStreaming is confused for CR_Diff100 ≈ 14.5% of the time, likely because additional cosmic ray streaming means cosmic rays are propagating faster along field lines, somewhat akin to faster diffusion.\n\n\n\nArmed with a quite accurate network trained on non-correlated data, we can test more extensively why the network made its decisions. The hope is that this interpretability exercise can confirm expected behavior and/or show us new transport-dependent imprints of cosmic rays on turbulence.\n\n\nWe start by making saliency maps. These work as follows:\n1. Load in an image from one of the data sets\n2. Evaluate the image with gradients on\n3. Run backpropagation and store the gradients\n4. Map the gradients to individual pixels\n5. Gaussian smooth the gradient map\n6. Return the image and a corresponding saliency map for a given class\nThis allows us to see what parts of a given image make the network think it belongs to a given class. A Python/PyTorch function to accomplish this is below:\ndef saliency_class_specific(image, model, pred_class, sigma = 4.0):\n    \"\"\"Create a saliency map showing activations for each class on an input image\n    \n    Inputs: \n        image: 2D image\n        model: trained PyTorch model\n        pred_class: class to pull out saliency for\n        sigma: standard deviation for gaussian smoothing\n\n    Returns:\n        plt_image: input image\n        filtered_saliency: Gaussian smoothed saliency on a 2D grid\n\n    \"\"\"\n    model.eval() # put in evaluation mode\n\n    # requires a 4D tensor, so need to reshape this 3D one\n    image = image.reshape(1, 1, image.shape[1], image.shape[2])\n\n\n    # we need to find the gradient with respect to the input image, so we need to call requires_grad_ on it\n    image.requires_grad_()\n\n    # run the model on the image\n    outputs = model(image)\n\n    # Get the index corresponding to the maximum score and the maximum score itself.\n    # pred_max_index = outputs.argmax()\n    pred_max_index = pred_class\n    pred_max = outputs[0,pred_max_index]\n\n    # backward pass to calculate the gradient\n    pred_max.backward()\n\n    saliency, _ = torch.max(image.grad[0].data.abs(),dim=0) # dim = 0 is channel\n\n    # renormalize saliency\n    saliency = (saliency - saliency.min())/(saliency.max()-saliency.min())\n\n    # code to plot the saliency map as a heatmap\n    plt_image = image.reshape(image.shape[2],image.shape[3])\n    plt_image = plt_image.detach().numpy()\n\n    # Blur the saliency maps using a gaussian kernel and return saliency to later plot on the original image\n    filtered_saliency = gaussian_filter(saliency,sigma=sigma)\n\n    return plt_image, filtered_saliency\n\nSaliency heat maps are overplotted on top of select images from each class below. Each row shows an input image from a different class, and each column shows the regions of that image that led the network to believe it belonged to each class.\n\n\n\nThese maps are quite a bit more difficult to interpret in this astrophysical case compared to typical classification problems where, for instance, a network determines whether a dog or cat is present in an image. The reason is likely that, in physics, differences over a range of scales are frequently the salient features, rather than localized objects with well-defined boundaries.\nNevertheless, these saliency experiments can be quite illuminating if we restrict ourselves to fewer classes and retrain our network. For instance, in the figure below, yellow contours show the saliency for 12 different images, 6 from the MHD class and 6 from the CR_Diff_Fiducial class, with the network trained (to 99% accuracy!) on only those two classes.\n\n\n\nNow, it’s clear that CR_Diff_Fiducial class is distinguished by broad gray regions marking smooth density transitions, while the MHD class is characterized instead by sharp transitions and lots of small-scale structure. With all 5 classes present, this is harder to discern because all three of MHD, CR_Advect, and CR_Diff100 show sharp transitions. The network must pick up on higher-level distinguishing information, but this is difficult to see.\n\n\n\nKnowing that smooth transitions characterizes the CR_Diff_Fiducial images, let’s try some image manipulation and probe this further. We’ll take sample images from each class (each column is a different class) and blur each image to different extents by applying a Gaussian filter with varying standard deviation \\(\\sigma\\). In the top center of each image, we display the probability that the network believes this image belongs to the CR_Diff_Fiducial class.\n\n\n\nWithout any filtering, the network is confident (and correct) in all cases, but as we filter more and more, the network more and more confidently predicts the CR_Diff_Fiducial class for every image. This collapse to one class tells us that the CR_Diff_Fiducial class is, indeed, very strongly characterized by blurriness and lack of small-scale structure.\n\n\n\nOur Flattened Power dataset gives us a different glimpse into how cosmic rays impact their surroundings. Namely, by erasing all spectral information (i.e. the presence or lack of small-scale structure is no longer available to the network), a separately trained network must learn the phase differences that arise from different cosmic ray transport modes.\nWhile the highest accuracies achieved in this network are not as high as those for the Full Power dataset, they are still quite high and allow us to possibly learn new insights by applying our saliency map method. The figure below shows a similar saliency experiment to before, and it provides some possible insights to what separates the CR_withStreaming class from the others: the presence of sharp, dark (underdense) features that are, in all images shown, strongly correlated with predictions for the CR_withStreaming class.\n\n\n\nWhile it’s too early to try to apply such a methodology (flatten power, train a network, etc.) to real astrophysical observations, for reasons outlined in the next section, such a strong indicator is a positive sign that streaming transport leads to unique, non-spectral imprints on the surrounding gas. In Bustard and Wu 2024, we speculate that this signature is related to a transport-dependent change in the mixture of solenoidal vs compressive fluid motions, as found in (Bustard and Oh 2023).\n## Discussion\nWhile this exploratory study leads to highly accurate predictions on simulation data, can we apply these trained networks to real astronomical observations? Not quite.\nIn our paper, we briefly discuss three limitations to the simulations themselves that prohibit this: incomplete physics, limited parameter coverage, and issues of convergence make even these state-of-the-art simulations only an idealized representation of reality. Furthermore, there are observational uncertainties that make this endeavor difficult. We show, for instance, that our trained network does not accurately predict classes if images are created by projecting over many cells in the x-direction. This effect, related to the optical depth of an image, is highly environment-dependent and uncertain, and this issue of “domain shift”, i.e. applying a model trained on one dataset to another, is a prevalent issue in machine learning and an active area of research.\nOverall, our work represents a novel demonstration of deep CNNs learning salient imprints of cosmic rays on surrounding gas from simulations of astrophysical turbulence, and our interpretability exercises strengthen prior theories of this cosmic ray transport-dependent impact, reveal new insights, and help build intuition."
  },
  {
    "objectID": "posts/ML_Turb/ML_BlogPost.html#introduction",
    "href": "posts/ML_Turb/ML_BlogPost.html#introduction",
    "title": "Deep Learning Cosmic Ray Transport",
    "section": "",
    "text": "Galaxies are complex, dynamical systems with collisional components, such as gas, and collisionless components that primarily interact through gravity, such as stars and dark matter. One of the collisional components, in addition to normal, non-relativistic gas and magnetic fields, is the cosmic ray population. These relativistic particles travel the Universe along magnetic field lines, and their interactions with non-relativistic gas are mediated by electromagnetic forces. While cosmic rays are in very low abundance compared to normal gas (only about a billionth of all particles in the Milky Way galaxy are cosmic rays), they collectively have as much energy as their less energetic, non-relativistic counterparts and, therefore, can exert a significant influence on galaxies and their surroundings. A large part of my doctoral and postdoctoral research, more-or-less, was to design and run numerical experiments on national supercomputers to model cosmic ray effects on different environments (sometimes full galaxies, sometimes idealized chunks of galaxies or the surrounding “circumgalactic medium”) incorporating modern, plasma physics-based theories of cosmic ray propagation.\n\n\n\nFrom my research and that of others in the field, the far-reaching influence of cosmic rays is coming into clearer view. For instance, cosmic ray pressure and energy transfer to gas can drive a wide variety of fluid instabilities in stratified galaxy disks (Heintz, Bustard, and Zweibel 2020) and galaxy surroundings (Tsung, Oh, and Jiang 2022), they can help ionize and pressurize cold molecular clouds where stars are born (Cesarsky and Volk 1978; Morlino and Gabici 2015), and they can help drive fantastic, galactic-scale, gaseous outflows called “galactic winds” that circulate gas throughout the Universe and help regulate star formation in galaxies (Breitschwerdt, McKenzie, and Voelk 1991; Ruszkowski, Yang, and Zweibel 2017; Farber et al. 2018; Bustard et al. 2020; Bustard and Zweibel 2021). However, a nagging uncertainty that underlies these models is how cosmic rays propagate along magnetic fields and, subsequently, how they couple to non-relativistic gas. While our theory of cosmic rays is becoming ever-more advanced, confirmation from observations eludes us.\nThe current state-of-the-art in constraining cosmic ray propagation is as follows. Phenomenological models of cosmic ray propagation are fit to a variety of direct and indirect cosmic ray indicators, for instance:\n* Gamma-ray emission from cosmic ray interactions with thermal gas\n* Radio synchrotron emission generated by cosmic ray electrons spiraling around magnetic field lines\n* Cosmic ray spallation products, i.e. the secondary by-products of direct collisions between cosmic rays of varying composition with other particles.\nObtaining these indicators or “observables” is expensive and time-consuming. Each of the three modes above is probed by a different telescope or instrument, with varying sensitivities, resolution, and sky coverage.\nOn top of that, there are limiting assumptions to the phenomenological models themselves. For instance, what is ultimately being constrained is the large-scale propagation of cosmic rays, averaged over many tangled magnetic field lines. This propagation, whose best-fit model is “diffusive”, does not tell us the fine-grained cosmic ray propagation and coupling to individual magnetic field lines, which is what we ultimately seek. At this stage, despite some very clever recent attempts to compare models to high-resolution observations (Thomas, Pfrommer, and Enßlin 2020), we have no robust, efficient way to determine the small-scale transport of cosmic rays from observations. The following work, then, is essentially in untreaded water, with no good, direct baseline for comparison.\n\n\n\nInstead of requiring “multimessenger” indicators of cosmic rays from radio emission, gamma-ray emission, etc., what if we could infer cosmic ray transport solely by observing the non-relativistic gas?\nThe main assumption underlying this hypothesis is that cosmic rays must leave distinct, transport-dependent imprints on the surrounding gas. I’ve written a  blog post  about recent research I conducted with Peng Oh at UC-Santa Barbara (Bustard and Oh 2023) on this very topic, showing that cosmic rays modify the spectra of turbulent gas and the mixture between solenoidal and compressive motions in distinct, transport-dependent ways.\nThis work combines the TBs of 3D simulation data generated in (Bustard and Oh 2023) with powerful computer vision models. Specifically, we probe whether convolutional neural networks (CNNs) can learn the underlying cosmic ray transport mode simply by observing gas density. We show that even a relatively simple network can classify unseen images to their correct category (5 total categories) with 95% accuracy!\nAdditionally, we use image manipulation and network interpretability tools to pick out the salient features of the images that led to the network decision. This allows us to discover new imprints of cosmic rays on gas, improving our fundamental understanding of how cosmic rays interact with their surroundings.\nThat’s enough introduction. Let’s dive in!"
  },
  {
    "objectID": "posts/ML_Turb/ML_BlogPost.html#cosmic-ray-transport-modes-we-consider",
    "href": "posts/ML_Turb/ML_BlogPost.html#cosmic-ray-transport-modes-we-consider",
    "title": "Deep Learning Cosmic Ray Transport",
    "section": "",
    "text": "The five classes of cosmic ray transport we consider are (see also the table below):\n\nMHD – A system with no cosmic rays.\n\nCR_Advect – Includes cosmic rays that are fully locked to the gas, i.e. there is no additional slippage or transport of cosmic rays along magnetic field lines.\n\nCR_Diff_Fiducial – Includes additional cosmic ray diffusion, with a diffusion coefficient \\(\\kappa\\) that sits at a sweet-spot where cosmic rays will have maximal impact on the gas.\n\nCR_Diff100 – Includes diffusion with a diffusion coefficient 100 times greater than the fiducial case. This means cosmic rays diffuse over small-scale perturbations very quickly, generally not having a great influence on the gas.\n\nCR_withStreaming – Transport in this case includes fiducial diffusion but also includes extra terms for so-called cosmic ray “streaming.” This type of transport is fundamentally different from diffusion and, subsequently, cosmic rays interact with gas perturbations in a fundamentally different way. Streaming also adds an energy exchange term between the gas and cosmic rays that isn’t present in the purely diffusive case. Streaming generally has the strongest theoretical basis, but constraining transport to be streaming vs diffusion is very difficult using current phenomenological models and multiwavelength observations.\n\nNote that in the four scenarios where cosmic rays are present, there are equal amounts (in terms of pressure) of cosmic rays and gas. This “equipartition” roughly occurs in the Milky Way disk and could be reasonable, as well, in circumgalactic environments above the main plane of the Galactic disk. Magnetic fields in all simulations have a pressure about 10 times weaker than gas and cosmic rays, but while they have a less important dynamical influence on the system, magnetic fields serve as the important binder between cosmic rays and gas.\n\n\n\nA set of examples from each class is given below. The top row shows images with full spectral information (Full Power), and the bottom row shows a different set of images with spectral information erased (Flattened Power).\n\n\n\nNote how the MHD, CR_Advect, and CR_Diff100 classes, in particular, show sharp transitions between dense (white) and underdense (black) regions, as well as numerous small-scale structure. CR_Diff_Fiducial shows far less small-scale structure, which we believe is due to strong cosmic ray damping of gas perturbations in that “sweet-spot” diffusion regime. CR_withStreaming is somewhat intermediate.\nTo better visualize scale-dependent differences between images, we show 1D power spectra as a function of wave number \\(k\\). There are clear differences between the classes, with the MHD case showing the greatest power at intermediate scales and CR_Diff_Fiducial showing far less.\n\n\n\nPart of our exploration is to see whether convolutional neural networks can learn those spectral differences when presented with 2D images. However, we also explore what happens when we equal out those spectral differences (our Flattened Power set), leaving a network to learn solely phase differences arising due to different cosmic ray transport modes."
  },
  {
    "objectID": "posts/ML_Turb/ML_BlogPost.html#image-generation-and-processing",
    "href": "posts/ML_Turb/ML_BlogPost.html#image-generation-and-processing",
    "title": "Deep Learning Cosmic Ray Transport",
    "section": "",
    "text": "We generate images by manipulating 3D volume data stemming from simulations of astrophysical gas stirred in a turbulent box (imagine stirring a cup of coffee, but the ingredients are gas, magnetic fields, and cosmic rays, and the stirring utensil is a C++ module that applies random kicks to the gas). Greater detail on the simulation setup can be found in (Bustard and Oh 2023).\nTo create 2D images from 3D simulation cubes, we largely follow previous, similar work from (Peek and Burkhart 2019), which trained CNNs on MHD simulations (without cosmic rays) to learn salient imprints of magnetic fields on gas (rather than our goal to learn imprints of cosmic rays on gas). Following their lead, we create one-cell-thick slices in the plane parallel to the initial magnetic field direction (in the y-z plane in the figure below).\n\n\n\nSplitting these images into training, validation, and test sets, in this case, requires substantial care. Normally, one splits data randomly; however, imagine two images directly next to each other (zero separation in the x-direction), and imagine that one falls into the training set and one falls into the validation set. Because gaseous structures extend over multiple cells in the x-direction, there are strong correlations between these images. During training and hyperparameter tuning, the network simply memorizes the correlation, cheating its way to very high accuracies while not learning any true, salient information. This was readily apparent in our interpretability tests, with saliency maps showing seemingly random, pixel-scale junk rather than expected salient features, underscoring the need for rigorous network interpretation.\nFor this reason, we carefully separate training, validation, and test sets originating from the same 3D cube by spatial buffers. This decreases correlations between the sets. Furthermore, we generate images from 6 simulation cubes taken at different times, each snapshot separated by at least an eddy turnover time so the turbulence has randomized and erased all correlations. This decreases image correlations within each set, increasing the variety of images the network is trained and finetuned on.\nIn all, for each image set, we generate 90,000 images to train, fine-tune, and test our network (50,000 training images, 20,000 validation images, and 20,000 test images).\n\n\nThe density in each image is logarithmically scaled to bring the full range of densities to the forefront, and all images are histogram equalized and normalized to values between 0 and 1. This case, without further modifications, is called the Full Power dataset, since we retain spectral information – how much power is in perturbations at every scale. We also create another dataset, Flattened Power, where we flatten the 1D power spectrum of every image, thereby erasing spectral information that could be used to discriminate between classes. In this case, we’re interested in whether cosmic rays imprint phase differences on the gas and whether CNNs can pick up on these differences."
  },
  {
    "objectID": "posts/ML_Turb/ML_BlogPost.html#convolutional-neural-network-cnn-structure-and-training",
    "href": "posts/ML_Turb/ML_BlogPost.html#convolutional-neural-network-cnn-structure-and-training",
    "title": "Deep Learning Cosmic Ray Transport",
    "section": "",
    "text": "Convolutional neural networks (CNNs) have been the workhorses of computer vision tasks for a number of years, and CNN variations remain competitive on standard computer vision benchmarks compared to newer, more advanced architectures such as Vision Transformers.\nEach layer of our network contains a 2D convolution, batch normalization, and SiLU activations (similar to other continuously differential activation functions but robust against the “dying neuron” problem possible with traditional ReLU activations).\nTo ward off overfitting, we add a dropout layer near the end of the network in between the average pooling layer and the final fully connected layer. In testing, we determined that dropping out 25% of neurons worked best, as shown in the PyTorch code below that generates our fiducial network.\ndef create_model(config):\n  model = nn.Sequential(\n      nn.Conv2d(1, 8, kernel_size=3, stride=2, padding=1),\n      nn.BatchNorm2d(8),\n      nn.SiLU(),\n      nn.Conv2d(8, 16, kernel_size=3, stride=2, padding=1),\n      nn.BatchNorm2d(16),\n      nn.SiLU(),\n      nn.Conv2d(16, 32, kernel_size=3, stride=2, padding=1),\n      nn.BatchNorm2d(32),\n      nn.SiLU(),\n      nn.Conv2d(32, 64, kernel_size=3, stride=2, padding=1),\n      nn.BatchNorm2d(64),\n      nn.SiLU(),\n      nn.AdaptiveAvgPool2d(4), # works with any input size\n      nn.Dropout(0.25)\n      nn.Flatten(),\n      nn.Linear(64*4*4,config.num_classes)\n  ).to(device)\n\nTo size our network appropriately to the dataset, we tested different numbers of layers and logged the training and validation loss, as well as other statistics such as accuracy, precision, recall, and F1 score (the harmonic mean between precision and recall). The loss for different numbers of layers is plotted below over 40 epochs.\n\n\n\nWhile somewhat volatile, the loss generally shows 4 layers to work best. Fewer layers result in higher training loss, while more layers show signs of validation loss separating from training loss (overfitting). Other parameter choices (learning rate, batch size, etc.) were similarly determined through a manual hyperparameter study.\nLoss for the Flattened Power network is shown below. In this case, overfitting was obvious after about 25 epochs, so our final, trained network was taken after only 25 epochs.\n\n\n\nIn the table below, we display several commonly used metrics for multi-class machine learning problems, which depend on the number of true positives (TP), true negatives (TN), false positives (FP), and false negatives (FN). The accuracy is defined as (TP + TN) / (TP + TN + FP + FN), the precision is defined as the TP / (TP + FP), the recall is defined as the TP / (TP + FN), and the F1 score is the harmonic mean between the purity and recall. The precision can be considered a measure of “purity” while the recall can be thought of as “completeness” for CNN predictions. In some cases, for instance for the MHD class, the network achieves high precision at the expense of recall, a common behavior that makes the F1 score a necessary metric to present.\n\n\n\nAccuracies range from 92% to 99% for the Full Power model, which is quite good! Accuracies are somewhat lower for the Flattened Power model, as expected since some distinguishing spectral differences are now thrown out, but still quite high, suggesting significant transport-dependent phase differences!\nBelow is a confusion matrix for the Full Power model, showing that the network most frequently mistakes MHD, CR_Advect, and CR_Diff100 images. This is an excellent confirmation of our expectation, since we anticipated that cosmic rays with those propagation modes leave gas primarily unaffected.\n\n\n\nMost impressively, the CR_Diff_Fiducial and CR_withStreaming classes, which differ only in that cosmic ray streaming is included in addition to fiducial diffusivity, are well-distinguished, with the network achieving 94.2% accuracy on CR_withStreaming and only rarely (3.4% of the time) confusing CR_withStreaming for the CR_Diff_Fiducial class. Instead, CR_withStreaming is confused for CR_Diff100 ≈ 14.5% of the time, likely because additional cosmic ray streaming means cosmic rays are propagating faster along field lines, somewhat akin to faster diffusion."
  },
  {
    "objectID": "posts/ML_Turb/ML_BlogPost.html#network-interpretation",
    "href": "posts/ML_Turb/ML_BlogPost.html#network-interpretation",
    "title": "Deep Learning Cosmic Ray Transport",
    "section": "",
    "text": "Armed with a quite accurate network trained on non-correlated data, we can test more extensively why the network made its decisions. The hope is that this interpretability exercise can confirm expected behavior and/or show us new transport-dependent imprints of cosmic rays on turbulence.\n\n\nWe start by making saliency maps. These work as follows:\n1. Load in an image from one of the data sets\n2. Evaluate the image with gradients on\n3. Run backpropagation and store the gradients\n4. Map the gradients to individual pixels\n5. Gaussian smooth the gradient map\n6. Return the image and a corresponding saliency map for a given class\nThis allows us to see what parts of a given image make the network think it belongs to a given class. A Python/PyTorch function to accomplish this is below:\ndef saliency_class_specific(image, model, pred_class, sigma = 4.0):\n    \"\"\"Create a saliency map showing activations for each class on an input image\n    \n    Inputs: \n        image: 2D image\n        model: trained PyTorch model\n        pred_class: class to pull out saliency for\n        sigma: standard deviation for gaussian smoothing\n\n    Returns:\n        plt_image: input image\n        filtered_saliency: Gaussian smoothed saliency on a 2D grid\n\n    \"\"\"\n    model.eval() # put in evaluation mode\n\n    # requires a 4D tensor, so need to reshape this 3D one\n    image = image.reshape(1, 1, image.shape[1], image.shape[2])\n\n\n    # we need to find the gradient with respect to the input image, so we need to call requires_grad_ on it\n    image.requires_grad_()\n\n    # run the model on the image\n    outputs = model(image)\n\n    # Get the index corresponding to the maximum score and the maximum score itself.\n    # pred_max_index = outputs.argmax()\n    pred_max_index = pred_class\n    pred_max = outputs[0,pred_max_index]\n\n    # backward pass to calculate the gradient\n    pred_max.backward()\n\n    saliency, _ = torch.max(image.grad[0].data.abs(),dim=0) # dim = 0 is channel\n\n    # renormalize saliency\n    saliency = (saliency - saliency.min())/(saliency.max()-saliency.min())\n\n    # code to plot the saliency map as a heatmap\n    plt_image = image.reshape(image.shape[2],image.shape[3])\n    plt_image = plt_image.detach().numpy()\n\n    # Blur the saliency maps using a gaussian kernel and return saliency to later plot on the original image\n    filtered_saliency = gaussian_filter(saliency,sigma=sigma)\n\n    return plt_image, filtered_saliency\n\nSaliency heat maps are overplotted on top of select images from each class below. Each row shows an input image from a different class, and each column shows the regions of that image that led the network to believe it belonged to each class.\n\n\n\nThese maps are quite a bit more difficult to interpret in this astrophysical case compared to typical classification problems where, for instance, a network determines whether a dog or cat is present in an image. The reason is likely that, in physics, differences over a range of scales are frequently the salient features, rather than localized objects with well-defined boundaries.\nNevertheless, these saliency experiments can be quite illuminating if we restrict ourselves to fewer classes and retrain our network. For instance, in the figure below, yellow contours show the saliency for 12 different images, 6 from the MHD class and 6 from the CR_Diff_Fiducial class, with the network trained (to 99% accuracy!) on only those two classes.\n\n\n\nNow, it’s clear that CR_Diff_Fiducial class is distinguished by broad gray regions marking smooth density transitions, while the MHD class is characterized instead by sharp transitions and lots of small-scale structure. With all 5 classes present, this is harder to discern because all three of MHD, CR_Advect, and CR_Diff100 show sharp transitions. The network must pick up on higher-level distinguishing information, but this is difficult to see.\n\n\n\nKnowing that smooth transitions characterizes the CR_Diff_Fiducial images, let’s try some image manipulation and probe this further. We’ll take sample images from each class (each column is a different class) and blur each image to different extents by applying a Gaussian filter with varying standard deviation \\(\\sigma\\). In the top center of each image, we display the probability that the network believes this image belongs to the CR_Diff_Fiducial class.\n\n\n\nWithout any filtering, the network is confident (and correct) in all cases, but as we filter more and more, the network more and more confidently predicts the CR_Diff_Fiducial class for every image. This collapse to one class tells us that the CR_Diff_Fiducial class is, indeed, very strongly characterized by blurriness and lack of small-scale structure.\n\n\n\nOur Flattened Power dataset gives us a different glimpse into how cosmic rays impact their surroundings. Namely, by erasing all spectral information (i.e. the presence or lack of small-scale structure is no longer available to the network), a separately trained network must learn the phase differences that arise from different cosmic ray transport modes.\nWhile the highest accuracies achieved in this network are not as high as those for the Full Power dataset, they are still quite high and allow us to possibly learn new insights by applying our saliency map method. The figure below shows a similar saliency experiment to before, and it provides some possible insights to what separates the CR_withStreaming class from the others: the presence of sharp, dark (underdense) features that are, in all images shown, strongly correlated with predictions for the CR_withStreaming class.\n\n\n\nWhile it’s too early to try to apply such a methodology (flatten power, train a network, etc.) to real astrophysical observations, for reasons outlined in the next section, such a strong indicator is a positive sign that streaming transport leads to unique, non-spectral imprints on the surrounding gas. In Bustard and Wu 2024, we speculate that this signature is related to a transport-dependent change in the mixture of solenoidal vs compressive fluid motions, as found in (Bustard and Oh 2023).\n## Discussion\nWhile this exploratory study leads to highly accurate predictions on simulation data, can we apply these trained networks to real astronomical observations? Not quite.\nIn our paper, we briefly discuss three limitations to the simulations themselves that prohibit this: incomplete physics, limited parameter coverage, and issues of convergence make even these state-of-the-art simulations only an idealized representation of reality. Furthermore, there are observational uncertainties that make this endeavor difficult. We show, for instance, that our trained network does not accurately predict classes if images are created by projecting over many cells in the x-direction. This effect, related to the optical depth of an image, is highly environment-dependent and uncertain, and this issue of “domain shift”, i.e. applying a model trained on one dataset to another, is a prevalent issue in machine learning and an active area of research.\nOverall, our work represents a novel demonstration of deep CNNs learning salient imprints of cosmic rays on surrounding gas from simulations of astrophysical turbulence, and our interpretability exercises strengthen prior theories of this cosmic ray transport-dependent impact, reveal new insights, and help build intuition."
  },
  {
    "objectID": "posts/ML_Turb/ML_BlogPost.html#discussion-and-future-work",
    "href": "posts/ML_Turb/ML_BlogPost.html#discussion-and-future-work",
    "title": "Deep Learning Cosmic Ray Transport",
    "section": "",
    "text": "(include: Figure 11) Talk about limitations to applying this to observations at this stage."
  }
]